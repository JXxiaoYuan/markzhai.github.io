<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[markzhai's home]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.zhaiyifan.cn/"/>
  <updated>2017-01-11T07:10:33.000Z</updated>
  <id>http://blog.zhaiyifan.cn/</id>
  
  <author>
    <name><![CDATA[Mark Zhai]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[PWA 渐进式实践 (1)]]></title>
    <link href="http://blog.zhaiyifan.cn/2017/01/11/pwa-in-practice-1/"/>
    <id>http://blog.zhaiyifan.cn/2017/01/11/pwa-in-practice-1/</id>
    <published>2017-01-11T04:14:42.000Z</published>
    <updated>2017-01-11T07:10:33.000Z</updated>
    <content type="html"><![CDATA[<p>不知道大家还记不记得之前的四篇 PWA 系列翻译：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/23673184?refer=moduth" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/23673184?refer=moduth</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23926652?refer=moduth" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/23926652?refer=moduth</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23966686?refer=moduth" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/23966686?refer=moduth</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/23966862?refer=moduth" target="_blank" rel="external">https://zhuanlan.zhihu.com/p/23966862?refer=moduth</a></li>
</ul>
<p>不过这毕竟是老外他们自己的实践，而且相对来说是从科普角度来描述了 PWA 的实践，对想要直接进行 PWA 优化的，可能会觉得比较啰嗦。</p>
<p>恰好我司最近使用 React 全家桶开发了一个网站：<a href="https://pai.bigins.cn/" target="_blank" rel="external">海绵保保</a>，所以干脆就拿它开刀，来进行 PWA 优化，顺便记录一下点滴。</p>
<h1 id="Lighthouse">Lighthouse</h1><p>首先我看了下 taobao 的评分，21/100，恩…这样一来，就有信心了，再怎么我们肯定比它高不是？</p>
<p>测了一下，嗯…果然还算看得过去，66分，至少及格了不是？</p>
<p><img src="http://blog.zhaiyifan.cn/images/pwa-in-practice-1.png" alt="Lighthouse result"></p>
<p>我们的目标就是能把它优化到<strong>90分</strong>以上！（作为 PWA 模范的 mobile.twitter.com，就达到了90分）</p>
<p>作为系列第一篇，我们先来看看有哪些问题导致了网站评分不够高，其产生原因和大概的解决策略。</p>
<h1 id="App在离线/间断网络下的加载">App在离线/间断网络下的加载</h1><p>第一类就是 Service Worker 导致的问题：</p>
<p><img src="http://blog.zhaiyifan.cn/images/pwa-in-practice-2.png" alt="App can load on offline/flaky connections"></p>
<p>简单描述 Service Worker 的话，可以理解为一个本地的 server，在客户端（浏览器）发起请求的时候，可以直接监听到它并直接进行响应。</p>
<p>当然，它不仅仅是这么一个拦截器，本身作为一个后台运行的任务，它还能进行预加载，离线响应（返回200），甚至进行 push 提示。</p>
<h1 id="页面加载性能">页面加载性能</h1><p><img src="http://blog.zhaiyifan.cn/images/pwa-in-practice-3.png" alt="Page load performance is fast"></p>
<p>各种性能指标不够过关啦。</p>
<h1 id="渐进式增强">渐进式增强</h1><p><img src="http://blog.zhaiyifan.cn/images/pwa-in-practice-4.png" alt="Site is progressively enhanced"></p>
<p>即 JavaScript 被禁用的时候，页面仍然应该有内容，即便那只是提示用户需要打开 JavaScript 以使用 app。</p>
<h1 id="添加到主屏幕">添加到主屏幕</h1><p><img src="http://blog.zhaiyifan.cn/images/pwa-in-practice-5.png" alt="User can be prompted to Add to Homescreen"></p>
<p>manifest 其实我已经加上了，还是因为 service worker 没有注册，所以最后没有生效。</p>
<h1 id="避免影响用户体验的_APIs">避免影响用户体验的 APIs</h1><p><img src="http://blog.zhaiyifan.cn/images/pwa-in-practice-6.png" alt="Avoiding APIs that harm the user experience"></p>
<p>一些 css 标签放在 header 里，阻塞影响到了页面体验。</p>
<h1 id="辅助功能">辅助功能</h1><p><img src="http://blog.zhaiyifan.cn/images/pwa-in-practice-7.png" alt="Accessibility"></p>
<p>对比度啦，标签啦，还有那么几个缺省了的。</p>
<h1 id="性能指标">性能指标</h1><p><img src="http://blog.zhaiyifan.cn/images/pwa-in-practice-8.png" alt="Performance Metrics"></p>
<p>加载链太长。</p>
<h1 id="奇妙的东西">奇妙的东西</h1><p>总而言之就是一些新特性。</p>
<p><img src="http://blog.zhaiyifan.cn/images/pwa-in-practice-9.png" alt="Site does not use Date.now() in its own scripts"></p>
<p>然而好像是插件还是 sw-tools 导致的。</p>
<h1 id="预告">预告</h1><p>本篇中我们大致看到了哪些问题导致了我们的 webapp 的 PWA 评分不够高，下一次，我们会开始逐个开刀，解决这些问题。对本话题感兴趣的朋友，也可以使用 Lighthouse 插件，对自家的网站或者其他网站来评评分，看看做得有多好（其实我们的<strong>66分</strong>真的已经挺高了）。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>不知道大家还记不记得之前的四篇 PWA 系列翻译：</p>
<ul>
<li><a href="https://zhuanlan.zhihu.com/p/23673184?refer=moduth" target="_blank" rel="external">https:]]>
    </summary>
    
      <category term="JavaScript" scheme="http://blog.zhaiyifan.cn/tags/JavaScript/"/>
    
      <category term="PWA" scheme="http://blog.zhaiyifan.cn/tags/PWA/"/>
    
      <category term="React.js" scheme="http://blog.zhaiyifan.cn/tags/React-js/"/>
    
      <category term="前端" scheme="http://blog.zhaiyifan.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Frontend" scheme="http://blog.zhaiyifan.cn/categories/Frontend/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Blog计划2016]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/12/31/Blog-Plan-2016/"/>
    <id>http://blog.zhaiyifan.cn/2016/12/31/Blog-Plan-2016/</id>
    <published>2016-12-31T15:59:00.000Z</published>
    <updated>2016-07-21T08:36:24.000Z</updated>
    <content type="html"><![CDATA[<h1 id="从零开始系列">从零开始系列</h1><p>系列标题取得有问题，其实是面向进阶的Android开发的，相对初学者来说很多地方说的可能不够清楚。<br>后期会考虑一下完善一下，尽可能说的更清楚。</p>
<p>4月做完BlockCanary分享后尽快把demo先完善了，然后和blog做到同步更新。</p>
<p>目前想到的后面的几篇</p>
<ul>
<li><del>Retrofit</del></li>
<li><del>Realm</del></li>
<li><del>基于Retrofit和Realm的Data层设计</del></li>
<li><del>Data Binding</del></li>
<li>前端用后台接口设计与撕逼</li>
<li>基于异常的优雅错误处理架构</li>
<li>RxJava</li>
<li>模块化的重用</li>
<li>基于Navigator的全局scheme式跳转设计</li>
<li>Hybrid App</li>
<li>上线前优化，打包</li>
<li>Crash处理、分析</li>
<li>BlockCanary线上优化实践</li>
</ul>
<h1 id="Android逆向分析">Android逆向分析</h1><ul>
<li>Android可执行文件之谜 - DEX与ODEX, OAT与ELF</li>
<li>修改apktool</li>
<li>native逆向</li>
<li>重打包</li>
<li>Google Camera反编译看看Photo Sphere怎么做的</li>
<li>静态分析</li>
<li>动态调试</li>
</ul>
<h1 id="JavaScript">JavaScript</h1><ul>
<li>Vue</li>
<li>React.js</li>
<li>Redux</li>
</ul>
<h1 id="React_Native">React Native</h1><ul>
<li>在已有android项目添加RN的方法</li>
<li>简单的例子 - 点赞页面</li>
<li>和native的交互module</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="从零开始系列">从零开始系列</h1><p>系列标题取得有问题，其实是面向进阶的Android开发的，相对初学者来说很多地方说的可能不够清楚。<br>后期会考虑一下完善一下，尽可能说的更清楚。</p>
<p>4月做完BlockCanary分享后尽快把demo先完善]]>
    </summary>
    
      <category term="Blog Plan" scheme="http://blog.zhaiyifan.cn/tags/Blog-Plan/"/>
    
      <category term="闲言闲语" scheme="http://blog.zhaiyifan.cn/categories/%E9%97%B2%E8%A8%80%E9%97%B2%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 React.js 的渐进式 Web 应用程序：第 2 部分 - 页面加载性能]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/11/16/pwa-react-p2/"/>
    <id>http://blog.zhaiyifan.cn/2016/11/16/pwa-react-p2/</id>
    <published>2016-11-16T15:26:28.000Z</published>
    <updated>2017-01-11T04:17:07.000Z</updated>
    <content type="html"><![CDATA[<p>系列第二篇，来看看基于 React 路由分块的页面加载优化。</p>
<blockquote>
<ul>
<li>原文地址：<a href="https://medium.com/@addyosmani/progressive-web-apps-with-react-js-part-2-page-load-performance-33b932d97cf2#.o0f4vf64s" target="_blank" rel="external">Progressive Web Apps with React.js: Part 2 — Page Load Performance</a></li>
<li>原文作者：<a href="https://medium.com/@addyosmani" target="_blank" rel="external">Addy Osmani</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者：<a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a></li>
<li>校对者：<a href="https://github.com/Romeo0906" target="_blank" rel="external">Romeo0906</a>，<a href="https://github.com/AceLeeWinnie" target="_blank" rel="external">AceLeeWinnie</a></li>
</ul>
</blockquote>
<h1 id="使用_React-js_的渐进式_Web_应用程序：第_2_部分_-_页面加载性能">使用 React.js 的渐进式 Web 应用程序：第 2 部分 - 页面加载性能</h1><h2 id="这是新系列的第二部分，新系列介绍的是使用_Lighthouse_优化移动_web_应用传输的技巧。本期，我们关注的是页面加载性能。">这是新<a href="https://medium.com/@addyosmani/progressive-web-apps-with-react-js-part-i-introduction-50679aef2b12#.ysn8uhvkq" target="_blank" rel="external">系列</a>的第二部分，新系列介绍的是使用 <a href="https://github.com/googlechrome/lighthouse" target="_blank" rel="external">Lighthouse</a> 优化移动 web 应用传输的技巧。本期，我们关注的是页面加载性能。</h2><h3 id="保证页面加载性能是快的">保证页面加载性能是快的</h3><p>移动 Web 的速度很关键。平均来说，更快的体验会 <a href="https://www.doubleclickbygoogle.com/articles/mobile-speed-matters/" target="_blank" rel="external">延长 70% 的会话</a> 以及两倍以上更多的移动广告收益。基于 React 的 Web 性能投资中，Flipkart Lite 使<a href="https://developers.google.com/web/showcase/2016/flipkart" target="_blank" rel="external">访问时间提升了三倍</a>， GQ 在流量上得到了 <a href="http://digiday.com/publishers/gq-com-cut-page-load-time-80-percent/" target="_blank" rel="external">80% 增长</a>，Trainline 在 <a href="https://youtu.be/ai-6qwT6ES8?t=462" target="_blank" rel="external">年收益上增长了 11M</a> 并且 Instagram 的 <a href="http://engineering.instagram.com/posts/193415561023919/performance-&amp;-usage-at-Instagram" target="_blank" rel="external">好感度上升了 33%</a>。</p>
<p>在你的 web app 加载时有一些 <a href="https://www.youtube.com/watch?v=wFwogd4CdwY&amp;index=4&amp;list=PLNYkxOF6rcIB3ci6nwNyLYNU6RDOU3YyL" target="_blank" rel="external">关键的用户时刻</a>：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/0*KlJk2hhZl3wyn6E4." alt=""></p>
<p>测量并优化一直很重要。Lighthouse 的页面加载检测会关注：</p>
<ul>
<li><a href="https://www.quora.com/What-does-First-Meaningful-Paint-mean-in-Web-Performance" target="_blank" rel="external"><strong>第一次有意义的绘制</strong></a>（当页面主内容可见）</li>
<li><a href="https://sites.google.com/a/webpagetest.org/docs/using-webpagetest/metrics/speed-index" target="_blank" rel="external"><strong>速度指数（Speed Index）</strong></a>（完全可见）</li>
<li><strong>估算的输入延迟</strong>（主线程什么时候才能立即处理用户输入）</li>
<li>以及 <strong>抵达可交互的时间</strong>（ app 到开始可用和可交互的时间)</li>
</ul>
<p><strong>关于 PWA <a href="(https://www.youtube.com/watch?v=IxXGMesq_8s">值得关注的有趣指标</a>)，Paul Irish 做了很棒的总结。</strong></p>
<p><strong>良好性能的目标：</strong></p>
<ul>
<li><strong>遵循</strong> <a href="https://developers.google.com/web/tools/chrome-devtools/profile/evaluate-performance/rail?hl=en" target="_blank" rel="external"><strong>RAIL 性能模型</strong></a> 的 L 部分。<strong>A+ 的性能是我们所有人都必须力求达到的，即便有的浏览器不支持 Service Worker。我们仍然可以快速地在屏幕上获得一些有意义的内容，并且仅加载我们所需要的</strong></li>
<li><strong>在典型网络（3G）和硬件条件下</strong></li>
<li>首次访问在 5 秒内可交互，重复访问（Service Worker 可用）则在 2 秒内。</li>
<li>首次加载（网络限制下），速度指数在 3000 或者更少。</li>
<li>第二次加载（磁盘限制，因为 Service Worker 可用）：速度指数 1000 或者更少。</li>
</ul>
<p>让我们再说说，关于通过 TTI 关注交互性。</p>
<h3 id="关注抵达可交互时间（TTI）">关注抵达可交互时间（TTI）</h3><p>为交互性优化，也就是使得 app 尽快能对用户可用（比如让他们可以四处点击，app 可以响应）。这对试图在移动设备上提供一流用户体验的现代 web 体验很关键。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*qfZvSxxJxPHhXXgb." alt=""></p>
<p>Lighthouse 目前将 TTI 作为布局是否达到稳定的衡量，web 字型是否可见并且主线程是否有足够的能力处理用户输入。有很多方法来手动跟踪 TTI，重要的是根据指标进行优化会提升你用户的体验。</p>
<p>对于像 React 这样的库，你应该关心的是在移动设备上 <a href="https://aerotwist.com/blog/the-cost-of-frameworks/" target="_blank" rel="external">启用库的代价</a> 因为这会让人们有感知。在 <a href="https://github.com/insin/react-hn" target="_blank" rel="external">ReactHN</a>，我们达到了 <strong>1700毫秒</strong> 内就完成了交互，尽管有多个视图，但我们还是保持整个 app 的大小和执行消耗相对很小：app 压缩包只有 11KB，vendor/React/libraries 压缩包只有 107KB。实际上，它们是这样的：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/0*N--j53GygKHn2ViI." alt=""></p>
<p>之后，对于有小功能的 app 来说，我们会使用 <a href="https://www.polymer-project.org/1.0/toolbox/server" target="_blank" rel="external">PRPL</a> 这样的性能模式，这种模式可以充分利用 <a href="https://www.igvita.com/2013/06/12/innovating-with-http-2.0-server-push/" target="_blank" rel="external">HTTP/2 的服务器推送</a> 功能，利用颗粒状的 “基于路由的分块” 来得到快速的可交互时间。（可以试试 <a href="https://shop.polymer-project.org/" target="_blank" rel="external">Shop</a> demo 来获取直观了解）。</p>
<p>Housing.com 最近使用了类 PRPL 模式搭载 React 体验，获得了很多赞扬：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*55ArR_Z3qt7Az_FW." alt=""></p>
<p>Housing.com 利用 Webpack 路由分块，来推迟入口页面的部分启动消耗（仅加载 route 渲染所需要的）。更多细节请查看 <a href="https://twitter.com/samccone/status/771786445015035904" target="_blank" rel="external">Sam Saccone 的优秀 Housing.com 性能检测</a>.</p>
<p>Flipkart 也做了类似的：</p>
<p>注意：关于什么是 “可交互时间”，有很多不同的看法，Lighthouse 对 TTI 的定义也可能会演变。还有其他测试可交互时间的方法，页面跳转后第一个 5 秒内 window 没有长任务的时刻，或者一次文本/内容绘制后第一次 5 秒内 window 没有长任务的时刻。基本上，就是页面稳定后多久用户才可以和 app 交互。</p>
<p>注意：尽管不是强制的要求，你可能也需要提高视觉完整度（速度指数），通过 <a href="https://developers.google.com/web/fundamentals/performance/critical-rendering-path/" target="_blank" rel="external">优化关键渲染路径</a>。<a href="https://github.com/addyosmani/critical-path-css-tools#node-modules" target="_blank" rel="external">关键路径 CSS 优化工具的存在</a> 以及其优化在 HTTP/2 的世界中依然有效。</p>
<h3 id="用基于路由的分块来提高性能">用基于路由的分块来提高性能</h3><h3 id="Webpack">Webpack</h3><p><strong>如果你第一次接触模块打包工具，比如 Webpack，看看</strong> <a href="https://www.youtube.com/watch?v=OhPUaEuEaXk" target="_blank" rel="external"><strong>JS 模块化打包器</strong></a><strong>(视频) 可能会有帮助。</strong></p>
<p>如今一些的 JavaScript 工具能够方便地将所有脚本打包成一个所有页面都引入的 bundle.js 文件。这意味着很多时候，你可能要加载很多对当前路由来说并不需要的代码。为什么一次路由需要加载 500KB 的 JS，而事实上 50KB 就够了呢？我们应该丢开那些无助于获得更快体验的脚本，来加速获得可交互的路由。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*z2tqS124xW0GDmcP." alt=""></p>
<p><strong>当仅提供用户一次 route 所需要的最小功能的可用代码就可以的时候，避免提供庞大整块的 bundles（像上图）。</strong></p>
<p>代码分割是解决整块的 bundles 的一个方法。想法大致是在你的代码中定义分割点，然后分割成不同的文件进行按需懒加载。这会改善启动时间，帮助更迅速地达到可交互状态。</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/0*c9rmq2rp95BN39qg." alt=""></p>
<p>想象使用一个公寓列表 app。如果我们登陆的路由是列出我们所在区域的地产（route-1）—— 我们不需要全部地产详情（route-2）或者预约看房（route-3）的代码，所以我们可以只提供列表路由所需要的 JavaScript 代码，然后动态加载其余部分。</p>
<p>这些年来，很多 app 已经使用了代码分割的概念，然而现在用 “<a href="https://gist.github.com/addyosmani/44678d476b8843fd981ff8011d389724" target="_blank" rel="external">基于路由的分块</a>” 来称呼它。我们可以通过 Webpack 模块打包器为 React 启用这个设置。</p>
<h3 id="实践基于路由的代码分块">实践基于路由的代码分块</h3><p>当 Webpack 在 app 代码中发现  <a href="https://webpack.github.io/docs/code-splitting.html" target="_blank" rel="external">require.ensure()</a>（在 <a href="https://gist.github.com/sokra/27b24881210b56bbaff7" target="_blank" rel="external">Webpack 2</a> 中是 <a href="http://moduscreate.com/code-splitting-for-react-router-with-es6-imports/" target="_blank" rel="external">System.import</a>）时，支持分割代码。这些方法出现的地方被称为“分割点”，Webpack 会对它们的每一个都生成一个分开的 bundle，按需解决依赖。</p>
<pre><code><span class="comment">// 定义一个 "split-point"</span>
<span class="built_in">require</span>.ensure([], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
   <span class="keyword">const</span> details = <span class="built_in">require</span>(<span class="string">'./Details'</span>);
   <span class="comment">// 所有被 require() 需要的都会成为分开的 bundle</span>
   <span class="comment">// require(deps, cb) 是异步的。它会异步加载，并且评估</span>
   <span class="comment">// 模块，通过你的 deps 的 exports 调用 cb。</span>
});
</code></pre><p>当你的代码需要某些东西，Webpack 会发起一个 JSONP 请求来从服务器获得它。这个和 React Router 结合工作得很好，我们可以在对用户渲染视图之前在依赖（块）中懒加载一个新的路由。</p>
<p>Webpack 2 支持 <a href="https://medium.com/modus-create-front-end-development/automatic-code-splitting-for-react-router-w-es6-imports-a0abdaa491e9#.3ryyedhfc" target="_blank" rel="external">使用 React Router 的自动代码分割</a>，它可以像 import 语句一样处理 System.import 模块调用，将导入的文件和它们的依赖一起打包。依赖不会与你在 Webpack 设置中的初始入口冲突。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'../containers/App'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">errorLoading</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.error(<span class="string">'Lazy-loading failed'</span>, err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadRoute</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (<span class="built_in">module</span>) =&gt; cb(<span class="literal">null</span>, <span class="built_in">module</span>.default);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  component: App,</span><br><span class="line">  childRoutes: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'booktour'</span>,</span><br><span class="line">      getComponent(location, cb) &#123;</span><br><span class="line">        System.import(<span class="string">'../pages/BookTour'</span>)</span><br><span class="line">          .then(loadRoute(cb))</span><br><span class="line">          .catch(errorLoading);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="加分项：预加载那些路由！">加分项：预加载那些路由！</h3><p>在我们继续之前，一个配置可选项是来自 <a href="https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/" target="_blank" rel="external"></a> 的 <a href="https://twitter.com/addyosmani/status/743571393174872064" target="_blank" rel="external">Resource Hints</a>。这提供了一个声明式获取资源的方法，而不用执行他们。预加载可以用来加载那些用户<strong>可能</strong>访问的路由的 Webpack 块，用户真正访问这些路由时已经缓存并且能够立即实例化。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*l-XqjMw7_XX0wsxX." alt=""></p>
<p>笔者写这篇文章的时候，预加载只能在 <a href="http://caniuse.com/#feat=link-rel-preload" target="_blank" rel="external">Chrome</a> 中进行，但是在其他浏览器中被处理为渐进式增加（如果支持的话）。</p>
<p>注意：html-webpack-plugin 的 <a href="https://github.com/ampedandwired/html-webpack-plugin#events" target="_blank" rel="external">模板和自定义事件</a> 可以使用最小的改变来让简化这个过程。然后你应该保证预加载的资源真正会对你大部分的用户浏览过程有用。</p>
<h3 id="异步加载路由">异步加载路由</h3><p>让我们回到代码分割（code-splitting）—— 在一个使用 React 和 <a href="https://github.com/reactjs/react-router" target="_blank" rel="external">React Router</a> 的 app 里，我们可以使用 require.ensure() 以在 ensure 被调用的时候异步加载一个组件。顺带一提，如果任何人在探索服务器渲染，如果要 node 上尝试服务器端渲染，需要用 <a href="https://www.npmjs.com/package/node-ensure" target="_blank" rel="external">node-ensure</a> 包作垫片代替。Pete Hunt 在 <a href="https://github.com/petehunt/webpack-howto#9-async-loading" target="_blank" rel="external">Webpack How-to</a> 里涉及了异步加载。</p>
<p>在下面的例子里，require.ensure() 使我们可以按需懒加载路由，在组件被使用前等待拉取：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> rootRoute = &#123;</span><br><span class="line">  component: Layout,</span><br><span class="line">  path: <span class="string">'/'</span>,</span><br><span class="line">  indexRoute: &#123;</span><br><span class="line">    getComponent (location, cb) &#123;</span><br><span class="line">      <span class="built_in">require</span>.ensure([], () =&gt; &#123;</span><br><span class="line">        cb(<span class="literal">null</span>, <span class="built_in">require</span>(<span class="string">'./Landing'</span>))</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  childRoutes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'book'</span>,</span><br><span class="line">      getComponent (location, cb) &#123;</span><br><span class="line">        <span class="built_in">require</span>.ensure([], () =&gt; &#123;</span><br><span class="line">          cb(<span class="literal">null</span>, <span class="built_in">require</span>(<span class="string">'./BookTour'</span>))</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'details/:id'</span>,</span><br><span class="line">      getComponent (location, cb) &#123;</span><br><span class="line">        <span class="built_in">require</span>.ensure([], () =&gt; &#123;</span><br><span class="line">          cb(<span class="literal">null</span>, <span class="built_in">require</span>(<span class="string">'./Details'</span>))</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>注意：我经常配合 CommonChunksPlugin (minChunks: Infinity) 使用上面的配置，这样不同入口文件中的相同模块只有一个 chunk。这还 <a href="https://github.com/webpack/webpack/issues/368#issuecomment-247212086" target="_blank" rel="external">降低</a> 了陷入缺省 webpack 运行期。</strong></p>
<p>Brian Holt 在 React 的完整介绍 中对异步路由加载介绍得很好。。</p>
<p>Brian Holt 在 <a href="https://btholt.github.io/complete-intro-to-react/" target="_blank" rel="external">React 的完整介绍</a> 对异步路由加载阐述地很全面。通过异步路由的代码分割在 React Router 的最新版本和 <a href="https://gist.github.com/acdlite/a68433004f9d6b4cbc83b5cc3990c194" target="_blank" rel="external">新的 React Router V4</a> 上都可以使用。</p>
<h3 id="使用异步的_getComponent_+_require-ensure()_的声明式路由_chunk">使用异步的 getComponent + require.ensure() 的声明式路由 chunk</h3><p>有一个可以更快设置代码分割的小技巧。在 React Router 中，一个根路由 “/” 映射到 <code>App</code> 组件的 <a href="https://github.com/ReactTraining/react-router/blob/master/docs/API.md#route" target="_blank" rel="external">申明式的路由</a> 就像这样 <code>&lt;Route path=”/” component={App}&gt;</code>。</p>
<p>React Router 也支持 <code>[getComponent](https://github.com/ReactTraining/react-router/blob/master/docs/API.md#getcomponentnextstate-callback)</code> 属性，十分方便，类似于 <code>component</code> 但却是异步的，并且能够<strong>非常快速</strong>地设置代码分割：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route</span><br><span class="line">   path=<span class="string">"stories/:storyId"</span></span><br><span class="line">   getComponent=&#123;(nextState, cb) =&gt; &#123;</span><br><span class="line">   <span class="comment">// 异步地查找 components</span></span><br><span class="line">  cb(<span class="keyword">null</span>, Stories)</span><br><span class="line">&#125;&#125; /&gt;</span><br></pre></td></tr></table></figure>
<p><code>getComponent</code> 函数参数包括下一个状态（我设置为 null）和一个回调。</p>
<p>让我们添加一些基于路由的代码分割到 <a href="https://github.com/insin/react-hn" target="_blank" rel="external">ReactHN</a>。我们会从 <a href="https://github.com/insin/react-hn/blob/master/src/routes.js#L36" target="_blank" rel="external">routes</a> 文件中的一段开始 —— 它为每个路由定义了引入调用和 React Router 路由（比如 news, item, poll, job, comment 永久链接等）：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> IndexRoute = <span class="built_in">require</span>(<span class="string">'react-router/lib/IndexRoute'</span>)</span><br><span class="line"><span class="keyword">var</span> App = <span class="built_in">require</span>(<span class="string">'./App'</span>)</span><br><span class="line"><span class="keyword">var</span> Item = <span class="built_in">require</span>(<span class="string">'./Item'</span>)</span><br><span class="line"><span class="keyword">var</span> PermalinkedComment = <span class="built_in">require</span>(<span class="string">'./PermalinkedComment'</span>) &lt;--</span><br><span class="line"><span class="keyword">var</span> UserProfile = <span class="built_in">require</span>(<span class="string">'./UserProfile'</span>)</span><br><span class="line"><span class="keyword">var</span> NotFound = <span class="built_in">require</span>(<span class="string">'./NotFound'</span>)</span><br><span class="line"><span class="keyword">var</span> Top = stories(<span class="string">'news'</span>, <span class="string">'topstories'</span>, <span class="number">500</span>)</span><br><span class="line"><span class="comment">// ....</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="xml"><span class="tag">&lt;<span class="title">Route</span> <span class="attribute">path</span>=<span class="value">"/"</span> <span class="attribute">component</span>=<span class="value">&#123;App&#125;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">IndexRoute</span> <span class="attribute">component</span>=<span class="value">&#123;Top&#125;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">Route</span> <span class="attribute">path</span>=<span class="value">"news"</span> <span class="attribute">component</span>=<span class="value">&#123;Top&#125;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">Route</span> <span class="attribute">path</span>=<span class="value">"item/:id"</span> <span class="attribute">component</span>=<span class="value">&#123;Item&#125;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">Route</span> <span class="attribute">path</span>=<span class="value">"job/:id"</span> <span class="attribute">component</span>=<span class="value">&#123;Item&#125;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">Route</span> <span class="attribute">path</span>=<span class="value">"poll/:id"</span> <span class="attribute">component</span>=<span class="value">&#123;Item&#125;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">Route</span> <span class="attribute">path</span>=<span class="value">"comment/:id"</span> <span class="attribute">component</span>=<span class="value">&#123;PermalinkedComment&#125;</span>/&gt;</span> <span class="tag">&lt;<span class="title">---</span></span><br><span class="line">  &lt;<span class="attribute">Route</span> <span class="attribute">path</span>=<span class="value">"newcomments"</span> <span class="attribute">component</span>=<span class="value">&#123;Comments&#125;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">Route</span> <span class="attribute">path</span>=<span class="value">"user/:id"</span> <span class="attribute">component</span>=<span class="value">&#123;UserProfile&#125;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">Route</span> <span class="attribute">path</span>=<span class="value">"*"</span> <span class="attribute">component</span>=<span class="value">&#123;NotFound&#125;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">Route</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p>
<p>ReactHN 现在提供给用户一个整块的 JS bundle，包含<strong>所有</strong>路由。让我们将它转换为路由分块，只提供一次路由真正需要的代码，从 comment 的永久链接开始（comment/:id）：</p>
<p>所以我们首先删了对永久链接组件的隐式 require：</p>
<pre><code><span class="tag">var</span> PermalinkedComment = <span class="function"><span class="title">require</span><span class="params">(‘./PermalinkedComment’)</span></span>
</code></pre><p>然后开始我们的路由..</p>
<p>然后使用声明式的 getComponent 来更新它。我们在路由中使用 require.ensure() 调用来懒加载，而这就是我们所需要做的一切了：</p>
<pre><code>&lt;Route
  path=<span class="string">"comment/:id"</span>
  getComponent={(location, callback) =&gt; {
    <span class="keyword">require</span>.ensure([], <span class="keyword">require</span> =&gt; {
      callback(<span class="keyword">null</span>, <span class="keyword">require</span>(<span class="string">'./PermalinkedComment'</span>))
    }, <span class="string">'PermalinkedComment'</span>)
  }}
/&gt;
</code></pre><p>OMG，太棒了。这..就搞定了。不骗你。我们可以如法炮制剩下的路由，然后运行 webpack。它会正确地找到 require.ensure() 调用，并且如我们所愿地分割代码。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*glKcFK9_RLNk9AyR." alt=""></p>
<p>将声明式代码分割应用到我们的大部分路由后，我们可以看到路由分块生效了，只在需要的时候对一个路由（我们能够预缓存在 Service Worker 里）加载所需代码：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*tVvolw4FTKjNFAnY." alt=""></p>
<p>提醒：有许多可用于 Service Worker 的简单 Webpack 插件：</p>
<ul>
<li><a href="https://github.com/goldhand/sw-precache-webpack-plugin" target="_blank" rel="external">sw-precache-webpack-plugin</a> 在底层使用 sw-precache</li>
<li><a href="https://github.com/NekR/offline-plugin" target="_blank" rel="external">offline-plugin</a> 被 react-boilerplate 所使用</li>
</ul>
<h4 id="CommonsChunkPlugin">CommonsChunkPlugin</h4><p><img src="https://cdn-images-1.medium.com/max/1600/0*QphlrnwHQiOsB06w." alt=""></p>
<p>为了识别出在不同路由使用的通用模块并把它们放在一个通用的分块，需要使用 <a href="https://webpack.github.io/docs/list-of-plugins.html#commonschunkplugin" target="_blank" rel="external">CommonsChunkPlugin</a>。它需要在每个页面引入两个 script 标签，一个用于 commons 分块，另一个用于一次路由的入口分块。</p>
<pre><code><span class="keyword">const</span> CommonsChunkPlugin = <span class="built_in">require</span>(<span class="string">"webpack/lib/optimize/CommonsChunkPlugin"</span>);
<span class="module"><span class="keyword">module</span>.exports = </span>{
    entry: {
        p1: <span class="string">"./route-1"</span>,
        p2: <span class="string">"./route-2"</span>,
        p3: <span class="string">"./route-3"</span>
    },
    output: {
        filename: <span class="string">"[name].entry.chunk.js"</span>
    },
    plugins: [
        <span class="keyword">new</span> CommonsChunkPlugin(<span class="string">"commons.chunk.js"</span>)
    ]
}
</code></pre><p>Webpack 的 <a href="https://blog.madewithlove.be/post/webpack-your-bags/" target="_blank" rel="external">— display-chunks 标志</a> 对于查看模块在哪个分块中出现很有用。这个帮助我们减少分块中重复的依赖，并且能够提示是否应该在项目中开启 CommonChunksPlugin。这是一个带有多个组件的项目，在不同分块间检测到重复的 Mustache.js 依赖：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*YMvoz-W2HL3v2MIs." alt=""></p>
<p>Webpack 1 也支持通过 <a href="https://github.com/webpack/docs/wiki/optimization#deduplication" target="_blank" rel="external">DedupePlugin</a> 以在你的依赖树中进行依赖库的去重。在 Webpack 2，tree-shaking 应该淘汰了这个的需求。</p>
<p><strong>更多 Webpack 的小贴士</strong></p>
<ul>
<li>你的代码库中 require.ensure() 调用的数目通常会关联到生成的 bundles 的数目。在代码库中大量使用 ensure 的时候意识到这点很有用。</li>
<li><a href="https://medium.com/modus-create-front-end-development/webpack-2-tree-shaking-configuration-9f1de90f3233" target="_blank" rel="external">Webpack2 的 Tree-shaking</a> 会帮助删除没用的 exports，这可以让你的 bundle 尺寸变小。</li>
<li>另外，避免在 通用/共享的 bundles 里面调用 require.ensure()。你会发现这创建了入口点引用，而我们假定这些引用的依赖已经完成加载了。</li>
<li>在 Webpack 2，System.import 目前不支持服务端渲染，但我已经在 <a href="http://stackoverflow.com/a/39088208" target="_blank" rel="external">StackOverflow</a> 分享了怎么去处理这个问题。</li>
<li>如果需要优化编译速度，可以看看 <a href="https://github.com/webpack/docs/wiki/list-of-plugins" target="_blank" rel="external">Dll plugin</a>，<a href="https://www.npmjs.com/package/parallel-webpack" target="_blank" rel="external">parallel-webpack</a> 以及目标的编译。</li>
<li>如果你希望通过 Webpack <strong>异步</strong> 或者 <strong>延迟</strong> 脚本，看看 <a href="https://github.com/numical/script-ext-html-webpack-plugin" target="_blank" rel="external">script-ext-html-webpack-plugin</a></li>
</ul>
<p><strong>在 Webpack 编译中检测臃肿</strong></p>
<p>Webpack 社区有很多建立在 Web 上的编译分析器包括 <a href="http://webpack.github.io/analyse/" target="_blank" rel="external">http://webpack.github.io/analyse/</a>，<a href="https://chrisbateman.github.io/webpack-visualizer/" target="_blank" rel="external">https://chrisbateman.github.io/webpack-visualizer/</a>，和 <a href="https://alexkuz.github.io/stellar-webpack/" target="_blank" rel="external">https://alexkuz.github.io/stellar-webpack/</a>，这些能方便地明确你项目中最大的模块。</p>
<p><a href="https://github.com/danvk/source-map-explorer" target="_blank" rel="external"><strong>source-map-explorer</strong></a> (来自 Paul Irish) 通过 source maps 来理解代码臃肿，也<strong>超级棒</strong>的。看看这个对 ReactHN Webpack bundle 的 tree-map 可视化，带有每个文件的代码行数，以及百分比的统计分析：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*D5j-Jv_FVkMigRyZ." alt=""></p>
<p>你可能也会对来自 Sam Saccone 的 <a href="https://github.com/samccone/coverage-ext" target="_blank" rel="external"><strong>coverage-ext</strong></a> 感兴趣，它可以生成任何 webapp 的代码覆盖率。这个对于理解你的代码中有多少实际会被执行到很有用。</p>
<h3 id="代码分割（code-splitting）之上：PRPL_模式">代码分割（code-splitting）之上：PRPL 模式</h3><p>Polymer 发现了一个有趣的 web 性能模式，用于精细服务的 apps，称为 <a href="https://www.polymer-project.org/1.0/toolbox/server" target="_blank" rel="external">PRPL</a>（看看 <a href="https://www.youtube.com/watch?v=J4i0xJnQUzU" target="_blank" rel="external">Kevin 的 I/O 演讲</a>)。这个模式尝试优化交互，各个字母代表：</p>
<ul>
<li>(P)ush，对于初始路由推送关键资源。</li>
<li>(R)ender，渲染初始路由，并使它尽快变得可交互。</li>
<li>(P)re-cache，通过 Service Worker 预缓存剩下的路由。</li>
<li>(L)azy-load，根据用户在应用中的移动懒加载并懒初始化 apps 中对应的部分。</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/2000/0*2XxuNsDEp1-4VuoU." alt=""></p>
<p>在这里，我们必须给予 <a href="https://shop.polymer-project.org/" target="_blank" rel="external">Polymer Shop demo</a> 大大的赞赏，因为它展示给我们移动设备上的实现方法。使用 PRPL（在这种情况下通过 HTML Imports，从而利用浏览器的后台 HTML parser 的好处）。屏幕上的像素你都可以使用。这里额外的工作在于分块和保持可交互。在一台真实移动设备上，我们可以在 1.75 秒内达到可交互。其中 1.3 秒用于 JavaScript，但它都被打散了。在那以后所有功能都可以用了。</p>
<p>你到现在应该已经成功享受到将应用打碎到更精细的分块的好处了。当用户第一次访问我们的 PWA，假设说他们访问一个特定的路由。服务器（使用 H/2 推送）能够推送下来仅仅那次路由需要的分块 —— 这些是用来启动应用的必要资源，并会进入网络缓存中。</p>
<p>一旦它们被推送下来了，我们就能高效地准备好未来会被加载的页面分块到缓存中。当应用启动后，检查路由并发现我们想要的已经在缓存中了，所以我们就能使得应用的首次加载非常快 —— 不仅仅是闪屏 —— 而是用户请求的可交互内容。</p>
<p>下一步是尽快渲染这个视图的内容。第三步是，当用户在看当前的视图的时候，使用 Service Worker 来开始预缓存所有其他用户还没有请求的分块和路由，将它们安装到 Service Worker 的缓存中。</p>
<p>此时，整个应用（或者大部分）都已经可以离线使用了。当用户跳转到应用的不同部分，我们可以从 Service Worker 的缓存中懒加载下面的部分。不需要网络加载 —— 因为它们已经被预缓存了。瞬间加载碉堡了！❤</p>
<p>PRPL 可以被应用到任何 app，正如 Flipkart 最近在他们的 React 栈上所展示的。完全使用 PRPL 的 Apps 可以利用 HTTP/2 服务器推送的快速加载，通过产生两种编译版本，并根据浏览器的支持提供不同版本：</p>
<ul>
<li><p>一个 bundled 编译，为没有 HTTP/2 推送支持的服务器/浏览器优化以最小化往返。对大多数人而言，这是现在默认的访问内容。</p>
</li>
<li><p>一个没有 bundled 编译，用于支持 HTTP/2 推送的服务器/浏览器，使得首次绘制更快。</p>
</li>
</ul>
<p>这个部分基于我们在之前讨论的路由分块的概念。通过 PRPL，服务器和我们的 Service Worker 协作来为非活动路由预缓存资源。当一个用户在你的 app 中浏览并改变路由，我们对尚未缓存的路由进行懒加载，并创建请求的视图。</p>
<h3 id="实现_PRPL">实现 PRPL</h3><p><strong>篇幅过长，没有阅读：Webpack 的 require.ensure() 以及异步的 ‘getComponent’，还有 React Router 是到 PRPL 风格性能模式的最小摩擦路径</strong></p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*-llrY94drXMjBUW6." alt=""></p>
<p>PRPL 的一大部分在于颠覆 JS 打包思维，并像编写时候那样精细地传输资源（至少从功能独立模块角度上）。配合 Webpack，这就是我们已经说过的路由分块。</p>
<p>对于初始路由推送关键资源。理想情况下，使用 <a href="https://www.igvita.com/2013/06/12/innovating-with-http-2.0-server-push/" target="_blank" rel="external">HTTP/2 服务端推送</a>，但即便没有它，也不会成为实现类 PRPL 路径的阻碍。即便没有 H/2 推送，你也可以实现一个大致和“完整” PRPL 类似的结果，只需要发送 <a href="https://www.smashingmagazine.com/2016/02/preload-what-is-it-good-for/" target="_blank" rel="external">预加载头</a> 而不需要 H/2。</p>
<p>看看 Flipkart 他们前后的生产瀑布流：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/0*-hLp_Acvig_s4Uop." alt=""></p>
<p>Webpack 已经通过 <a href="https://github.com/webpack/webpack/tree/master/examples/http2-aggressive-splitting" target="_blank" rel="external">AggressiveSplittingPlugin</a> 的形式支持了 H/2。</p>
<p>AggressiveSplittingPlugin 分割每个块直到它到达了指定的 maxSize（最大尺寸），正如我们在下面的例子里可见的：<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">    entry: <span class="string">"./example"</span>,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.join(__dirname, <span class="string">"js"</span>),</span><br><span class="line">        filename: <span class="string">"[chunkhash].js"</span>,</span><br><span class="line">        chunkFilename: <span class="string">"[chunkhash].js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.AggressiveSplittingPlugin(&#123;</span><br><span class="line">            minSize: <span class="number">30000</span>,</span><br><span class="line">            maxSize: <span class="number">50000</span></span><br><span class="line">        &#125;),</span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure></p>
<p>查看官方 <a href="https://github.com/webpack/webpack/tree/master/examples/http2-aggressive-splitting" target="_blank" rel="external">plugin page</a>，以获得关于更多细节的例子。<a href="https://docs.google.com/document/d/1K0NykTXBbbbTlv60t5MyJvXjqKGsCVNYHyLEXIxYMv0/preview?pref=2&amp;pli=1" target="_blank" rel="external">学习 HTTP/2 推送实验的课程</a> 和 <a href="https://99designs.com.au/tech-blog/blog/2016/07/14/real-world-http-2-400gb-of-images-per-day/" target="_blank" rel="external">真实世界 HTTP/2</a> 也值得一读。</p>
<ul>
<li>渲染初始路由：这实际上取决于你使用的框架或者库。</li>
<li>预缓存剩下的路由。对于缓存，我们依赖于 Service Worker。<a href="https://github.com/GoogleChrome/sw-precache" target="_blank" rel="external">sw-precache</a> 能很好地生成一个 Service Worker 用于静态资源预缓存。对于 Webpack 我们可以使用 <a href="https://www.npmjs.com/package/sw-precache-webpack-plugin" target="_blank" rel="external">SWPrecacheWebpackPlugin</a>。</li>
<li>按需懒加载并创建剩下的路由 —— 在 Webpack 领域，可以使用 require.ensure() 和 System.import()。</li>
</ul>
<h3 id="通过_Webpack_的缓存失效和长期缓存">通过 Webpack 的缓存失效和长期缓存</h3><p><strong>为什么关心静态资源版本？</strong></p>
<p>静态资源指的是我们页面中像是脚本，stylesheets 和图片这样的资源。当用户第一次访问我们页面的时候，他们需要其需要的所有资源。比如说当我们加载一个路由的时候，JavaScript 块和上次访问之际并没有改变 —— 我们不必重新抓取这些脚本因为他们已经在浏览器缓存中存在了。更少的网络请求是我们在 web 性能优化中的胜利。</p>
<p>通常地，我们使用对每个文件设置 <a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=en" target="_blank" rel="external">expires 头</a> 来达到目的。一个 expires 头只意味着我们可以告诉浏览器，避免在指定时间内（比如说1年）发起另一个对该文件的请求到服务器。随着代码演变和重新部署，我们想要确保用户可以获得最新的文件，如果没有改变的话则不需要重新下载资源。</p>
<p><a href="https://css-tricks.com/strategies-for-cache-busting-css/" target="_blank" rel="external">Cache-busting</a> 通过在文件名后面附加字符串来完成这个 —— 他可以是一个编译版本（比如 src=”chunk.js?v=1.2.0”），一个 timestamp 或者别的什么。我倾向于添加一个文件内容的 hash 到文件名（比如 chunk.d9834554decb6a8j.js）因为这个在文件内容发生改变的时候总是会改变。在 Webpack 社区常用 MD5 哈希生成的 16 字节长的“概要”来实现这个目的。</p>
<p><a href="https://medium.com/@okonetchnikov/long-term-caching-of-static-assets-with-webpack-1ecb139adb95" target="_blank" rel="external"><strong>通过 Webpack 的静态资源长期缓存</strong></a> <strong>是关于这个主题的优秀读物，你应该去看一看。我试图在下面涵盖其涉及到的主要内容。</strong></p>
<p><strong>在 Webpack 中通过 content-hashing 来做资源版本控制</strong></p>
<p>在 Webpack 设置中加上如下内容来启用基于内容哈希的资源版本 <a href="https://webpack.github.io/docs/long-term-caching.html" target="_blank" rel="external">[chunkhash]</a>：</p>
<pre><code><span class="attribute">filename</span>: <span class="string">‘[name].[chunkhash].js’,</span>
<span class="attribute">chunkFilename</span>: <span class="string">‘[name].[chunkhash].js’</span>
</code></pre><p>我们也想要保证常规的 [name].js 和 内容哈希 ([name].[chunkhash].js) 文件名在我们的 HTML 文件被正确引用。不同之处在于引用 <code>&lt;script src=”chunk”.js”&gt;</code> 和 <code>&lt;script src=”chunk.d9834554decb6a8j.js”&gt;</code>。</p>
<p>下面是一个注释了的 Webpack 设置样例，包括了一些其他的插件来使得长期缓存的安装更优雅。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="comment">// 使用 webpack-manifest-plugin 来生成包含了源文件到对应输出的映射的资源 manifest。Webpack 使用 IDs 而不是模块名来保持生成的文件尽量小。IDs 在它们被放进 chunk（分块）manifest 之前被生成并映射到 chunk 的文件名（会跑到我们的入口 chunk）。不幸的是，任何对代码的改变都会更新入口 chunk 包括新的 manifest，并刷新我们的缓存。</span></span><br><span class="line"><span class="keyword">const</span> ManifestPlugin = <span class="built_in">require</span>(<span class="string">'webpack-manifest-plugin'</span>);</span><br><span class="line"><span class="comment">// 我们通过 chunk-manifest-webpack-plugin 来修复这个问题，它会将 manifest 放到一个完全独立的 JSON 文件。</span></span><br><span class="line"><span class="keyword">const</span> ChunkManifestPlugin = <span class="built_in">require</span>(<span class="string">'chunk-manifest-webpack-plugin'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendor: <span class="string">'./src/vendor.js'</span>,</span><br><span class="line">    main: <span class="string">'./src/index.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.join(__dirname, <span class="string">'build'</span>),</span><br><span class="line">    filename: <span class="string">'[name].[chunkhash].js'</span>,</span><br><span class="line">    chunkFilename: <span class="string">'[name].[chunkhash].js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">      name: <span class="string">"vendor"</span>,</span><br><span class="line">      minChunks: <span class="literal">Infinity</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> ManifestPlugin(),</span><br><span class="line">    <span class="keyword">new</span> ChunkManifestPlugin(&#123;</span><br><span class="line">      filename: <span class="string">"chunk-manifest.json"</span>,</span><br><span class="line">      manifestVariable: <span class="string">"webpackManifest"</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 对非确定的模块顺序的权宜之计。在通过 Webpack 的静态资源长期缓存文章中有更多介绍</span></span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.OccurenceOrderPlugin()</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>现在我们有了这个 chunk-manifest JSON 的编译，我们需要把它内联（inline）到我们的 HTML，那么 Webpack 就能实际在页面启动时真正对其有访问权。所以在 <code>&lt;script&gt;</code> 标签中加上上面的输出。</p>
<p>通过使用 <a href="https://github.com/ampedandwired/html-webpack-plugin" target="_blank" rel="external">html-webpack-plugin</a> 可以实现自动将脚本内联到 HTML 中。</p>
<p>注意：Webpack 理想上可以通过 <a href="https://jakearchibald.com/2016/caching-best-practices/" target="_blank" rel="external">no shared ID range</a> 来简化启用长期缓存的步骤（见~4–1）。</p>
<p>如果要学习更多 HTTP 的 <a href="https://jakearchibald.com/2016/caching-best-practices/" target="_blank" rel="external">缓存最佳实践</a>，可以阅读 Jake Archibald 的优秀文章。</p>
<h3 id="更多阅读">更多阅读</h3><ul>
<li><a href="https://webpack.github.io/docs/code-splitting.html" target="_blank" rel="external">Webpack 关于代码分割的文档</a></li>
<li>Formidable 的关于 Webpack 的 OSS Playbook <a href="https://formidable.com/open-source/playbook/docs/frontend/webpack-code-splitting/" target="_blank" rel="external">代码分割</a> and <a href="https://formidable.com/open-source/playbook/docs/frontend/webpack-shared-libs/" target="_blank" rel="external">shared libraries</a></li>
<li><a href="http://michalzalecki.com/progressive-web-apps-with-webpack" target="_blank" rel="external">使用 Webpack 的渐进式 Web Apps</a></li>
<li><a href="https://getpocket.com/redirect?url=http%3A%2F%2Fjonathancreamer.com%2Fadvanced-webpack-part-2-code-splitting%2F&amp;formCheck=0b0d10781e025a205b05e2941ffdc845" target="_blank" rel="external">高级 Webpack Part 2&#8202;—&#8202;代码分割</a></li>
<li><a href="https://medium.com/@lavrton/progressive-loading-for-modern-web-applications-via-code-splitting-fb43999735c6#.1965mrwlr" target="_blank" rel="external">为现代 web 应用程序通过代码分割来渐进加载</a></li>
<li><a href="https://getpocket.com/redirect?url=https%3A%2F%2Ftailordev.fr%2Fblog%2F2016%2F03%2F17%2Floading-dependencies-asynchronously-in-react-components%2F&amp;formCheck=0b0d10781e025a205b05e2941ffdc845" target="_blank" rel="external">在 React 组件中异步加载依赖</a></li>
<li><a href="https://medium.com/@soederpop/webpack-plugins-been-we-been-keepin-on-the-dll-cdfdd6cb8cd7" target="_blank" rel="external">我们继续前进在 Webpack 插件 DLL</a></li>
<li><a href="https://getpocket.com/redirect?url=https%3A%2F%2Fmedium.com%2Fmodus-create-front-end-development%2Fautomatic-code-splitting-for-react-router-w-es6-imports-a0abdaa491e9%23.twoltv57f&amp;formCheck=0b0d10781e025a205b05e2941ffdc845" target="_blank" rel="external">自动代码分割用于 React Router 和 ES6 Imports&#8202;—&#8202;Modus Create</a></li>
<li><a href="https://getpocket.com/redirect?url=http%3A%2F%2Fstackoverflow.com%2Fquestions%2F34925717%2Fusing-webpack-and-react-router-for-lazyloading-and-code-splitting-not-loading&amp;formCheck=0b0d10781e025a205b05e2941ffdc845" target="_blank" rel="external">使用 webpack 和 react-router 于懒加载和代码分割没有去加载</a></li>
<li><a href="https://reactjsnews.com/isomorphic-react-in-real-life" target="_blank" rel="external">在现实生活通过 React 同构/通用渲染/路由/数据抓取</a></li>
<li><a href="https://getpocket.com/redirect?url=http%3A%2F%2Fblog.scottlogic.com%2F2016%2F02%2F05%2Fa-lazy-isomorphic-react-experiment.html&amp;formCheck=0b0d10781e025a205b05e2941ffdc845" target="_blank" rel="external">一个懒得同构 React 实验</a></li>
<li><a href="https://getpocket.com/redirect?url=https%3A%2F%2Fgithub.com%2Fryanflorence%2Fexample-react-router-server-rendering-lazy-routes&amp;formCheck=0b0d10781e025a205b05e2941ffdc845" target="_blank" rel="external">服务端渲染懒路由</a> 基于 React Router 和代码分割</li>
<li><a href="https://scotch.io/tutorials/react-on-the-server-for-beginners-build-a-universal-react-and-node-app" target="_blank" rel="external">给初学者的 React 在服务端&#8202;—&#8202;构建一个通用的 React app</a></li>
<li><a href="https://getpocket.com/redirect?url=http%3A%2F%2Fblog.mxstbr.com%2F2016%2F01%2Freact-apps-with-pages%2F&amp;formCheck=0b0d10781e025a205b05e2941ffdc845" target="_blank" rel="external">有页面的 React.js Apps</a></li>
<li><a href="https://getpocket.com/redirect?url=https%3A%2F%2Fwiredcraft.com%2Fblog%2Fcode-splitting-single-page-app%2F&amp;formCheck=0b0d10781e025a205b05e2941ffdc845" target="_blank" rel="external">将世界银行数据网站构建为使用代码分割的快速加载单页应用</a></li>
<li><a href="https://github.com/gatsbyjs/gatsby/issues/431" target="_blank" rel="external">在 Gatsby 实现 PRPL（React.js 静态网站生成器）</a></li>
</ul>
<h4 id="高级模块打包优化读物">高级模块打包优化读物</h4><ul>
<li><a href="https://nolanlawson.com/2016/08/15/the-cost-of-small-modules/" target="_blank" rel="external">模块化的代价</a></li>
<li><a href="https://twitter.com/nolanlawson/status/768525330113925121" target="_blank" rel="external">RollUp 和 Closure Compiler 如何减轻模块的代价</a></li>
<li><a href="https://github.com/samccone/The-cost-of-transpiling-es2015-in-2016" target="_blank" rel="external">在 2016 年转译 ES2015 的代价</a></li>
</ul>
<p>在系列文章第三篇中，我们会来看看 <a href="https://medium.com/@addyosmani/progressive-web-apps-with-react-js-part-3-offline-support-and-network-resilience-c84db889162c#.tcspudthd" target="_blank" rel="external"><strong>怎么使你的 React PWA 能离线和断续的网络状态下工作</strong></a>.</p>
<p>如果你新接触 React，我发现 Wes Bos 写的 <a href="https://goo.gl/G1WGxU" target="_blank" rel="external">给新手的 React</a> 很棒。</p>
<p><strong>感谢 Gray Norton, Sean Larkin, Sunil Pai, Max Stoiber, Simon Boudrias, Kyle Mathews 和 Owen Campbell-Moore 的校对。</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>系列第二篇，来看看基于 React 路由分块的页面加载优化。</p>
<blockquote>
<ul>
<li>原文地址：<a href="https://medium.com/@addyosmani/progressive-web-apps-with-react-js-]]>
    </summary>
    
      <category term="JavaScript" scheme="http://blog.zhaiyifan.cn/tags/JavaScript/"/>
    
      <category term="PWA" scheme="http://blog.zhaiyifan.cn/tags/PWA/"/>
    
      <category term="React.js" scheme="http://blog.zhaiyifan.cn/tags/React-js/"/>
    
      <category term="前端" scheme="http://blog.zhaiyifan.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Frontend" scheme="http://blog.zhaiyifan.cn/categories/Frontend/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 React.js 的渐进式 Web 应用程序：第 1 部分 - 介绍]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/11/14/pwa-react-p1/"/>
    <id>http://blog.zhaiyifan.cn/2016/11/14/pwa-react-p1/</id>
    <published>2016-11-14T13:52:20.000Z</published>
    <updated>2016-11-15T03:06:13.000Z</updated>
    <content type="html"><![CDATA[<p>来自译者 markzhai：大家也知道最近 Web 越来越火了，如果你还以为 Web 就是 jQuery、Ajax、CSS 什么的，那你就 out 了。给大家几个链接看一看吧：</p>
<ul>
<li><a href="https://shop.polymer-project.org/" target="_blank" rel="external">https://shop.polymer-project.org/</a></li>
<li><a href="https://housing.com/" target="_blank" rel="external">https://housing.com/</a></li>
<li><a href="https://www.flipkart.com/" target="_blank" rel="external">https://www.flipkart.com/</a></li>
<li><a href="https://react-hn.appspot.com/" target="_blank" rel="external">https://react-hn.appspot.com/</a></li>
<li><a href="https://mobile.twitter.com/" target="_blank" rel="external">https://mobile.twitter.com/</a></li>
</ul>
<p>部分可能需要自备梯子，另外建议在 Chrome 下查看，毕竟该死的 X5，大家都懂得。</p>
<blockquote>
<ul>
<li>原文地址：<a href="https://medium.com/@addyosmani/progressive-web-apps-with-react-js-part-i-introduction-50679aef2b12#.g5r0gv9j5" target="_blank" rel="external">Progressive Web Apps with React.js: Part I — Introduction</a></li>
<li>原文作者：<a href="https://medium.com/@addyosmani" target="_blank" rel="external">Addy Osmani</a></li>
<li>译文出自：<a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a></li>
<li>校对者：<a href="https://github.com/Tina92" target="_blank" rel="external">Tina92</a>, <a href="https://github.com/DeadLion" target="_blank" rel="external">DeadLion</a></li>
</ul>
</blockquote>
<h1 id="使用_React-js_的渐进式_Web_应用程序：第_1_部分_-_介绍">使用 React.js 的渐进式 Web 应用程序：第 1 部分 - 介绍</h1><h3 id="渐进式_Web_应用程序利用新技术的优势带给了用户最佳的移动网站和原生应用。它们是可靠的，迅捷的，迷人的。它们来自可靠的源，而且无论网络状态如何都能加载。">渐进式 Web 应用程序利用新技术的优势带给了用户最佳的移动网站和原生应用。它们是可靠的，迅捷的，迷人的。它们来自可靠的源，而且无论网络状态如何都能加载。</h3><p><img src="https://cdn-images-1.medium.com/max/1600/1*Ms2muRzG4DHE36YU4kX_ag@2x.png" alt=""></p>
<p>在 <a href="https://infrequently.org/2015/06/progressive-apps-escaping-tabs-without-losing-our-soul/" target="_blank" rel="external">渐进式 Web 应用程序</a> (PWAs) 的世界中有很多新东西，你可能会想知道它们和现有架构是如何兼容的 —— 比如 <a href="https://facebook.github.io/react/" target="_blank" rel="external">React</a> 和 JS 模块化打包工具如 <a href="https://webpack.github.io/" target="_blank" rel="external">Webpack</a> 之间的兼容性如何。PWA 是否需要大量的重写？你需要关注哪个 Web 性能度量工具？在这系列的文章中，我将会分享将基于 React 的 web apps 转化为 PWAs 的经验。我们还将包括为什么<strong>仅</strong>加载用户路由所需要的，并抛开其他所有脚本是提高性能的好方式。</p>
<h3 id="Lighthouse">Lighthouse</h3><p>让我们从一个 PWA manifest 开始。为此我们会使用 <a href="https://github.com/GoogleChrome/lighthouse" target="_blank" rel="external"><strong>Lighthouse</strong></a> — 一个评审 <a href="https://infrequently.org/2016/09/what-exactly-makes-something-a-progressive-web-app/" target="_blank" rel="external">app 面向 PWA 特性</a> 的工具，并且检查你的 app 在模拟移动场景下是否做的足够好。Lighthouse 可以通过 <a href="https://chrome.google.com/webstore/detail/lighthouse/blipmdconlkpinefehnmjammfjpmpbjk" target="_blank" rel="external">Chrome 插件</a> (我大部分时候都用这个) 以及 <a href="https://github.com/GoogleChrome/lighthouse#install-cli" target="_blank" rel="external">CLI</a> 来使用，两者都会展示一个类似这样的报告：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/0*EI9JfoDRizcpZolA." alt=""></p>
<p>来自 Lighthouse Chrome 插件的结果</p>
<p>顶级评审工具 Lighthouse 会高效地运行一系列为移动世界精炼的现代 web 最佳实践：</p>
<ul>
<li><strong>网络连接是安全的</strong></li>
<li><strong>用户会被提醒将 app 添加到 Homescreen</strong></li>
<li><strong>安装了的 web app 启动时会带自定义的闪屏画面</strong></li>
<li><strong>App 可以在离线/断断续续的连接下加载</strong></li>
<li><strong>页面加载性能快速</strong></li>
<li><strong>设计是移动友好的</strong></li>
<li><strong>网页是渐进式增强的</strong></li>
<li><strong>地址栏符合品牌颜色</strong></li>
</ul>
<p>顺便一提，有一个 Lighthouse 的 <a href="https://developers.google.com/web/tools/lighthouse/" target="_blank" rel="external">快速入门指南</a>，而且它还能通过 <a href="https://github.com/GoogleChrome/lighthouse#lighthouse-w-mobile-devices" target="_blank" rel="external">远程调试</a> 工作。超级酷炫。</p>
<p>无论在你的技术栈中使用了什么库，我想要强调的是在上面列出的一切，在今天都只需要一点小小的工作量就能完成。然而也有一些警告。</p>
<p><strong>我们知道移动 web 是 <a href="https://www.doubleclickbygoogle.com/articles/mobile-speed-matters/" target="_blank" rel="external">慢的</a></strong>。</p>
<p>web 从一个以文档为中心的平台演变为了头等的应用平台。同时我们主要的计算能力也从强大的，拥有快速可靠的网络连接的强大桌面机器移动到了相对不给力的，连接通常<strong>慢，断断续续或者两者都存在</strong>的移动设备上。这在下一个 10 亿用户即将上网的世界尤其真实。为了解锁更快的移动 web：</p>
<ul>
<li><strong>我们需要全体转移到在真实移动设备，现实的网络连接下进行测试</strong> (e.g <a href="https://developers.google.com/web/tools/chrome-devtools/profile/network-performance/network-conditions?hl=en" target="_blank" rel="external">在 DevTools 的常规 3G</a>)。 <a href="https://developers.google.com/web/tools/chrome-devtools/debug/remote-debugging/remote-debugging?hl=en" target="_blank" rel="external">chrome://inspect</a> 和 <a href="https://www.webpagetest.org/" target="_blank" rel="external">WebPageTest</a> (<a href="https://www.youtube.com/watch?v=pOynMwTyRgQ&amp;feature=youtu.be" target="_blank" rel="external">视频</a>) 是你的好帮手。Lighthouse 模拟一台有触摸事件的 Nexus 5X 设备，以及 viewport 仿真 和 被限制的网络连接 （150毫秒延迟，1.6Mbps 吞吐量)。</li>
<li><strong>如果你使用的是设计开发时没有考虑移动设备的 JS 库，你可能会为了可交互性能打一场硬仗</strong>。我们的理想化目标是在一台响应式设备上 5 秒内变得可交互，所以我们应用代码的预算会更多是 ❤</li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*Qx7aFIAKWbn11heD--nxwg.png" alt=""></p>
<p>通过一些工作，可以写出 <a href="https://twitter.com/samccone/status/771786445015035904" target="_blank" rel="external">如 Housing.com 所展示的</a> 在有限网络环境下，真机上依然表现良好的使用 React 开发的 PWAs。我们在接下来的系列中讨论如何实现的详尽 <strong>细节</strong>。</p>
<p>话虽如此，这是一个很多库都在尽力提高的领域，你可能需要知道他们是否会继续提高在物理设备上的性能。只需要看看 <a href="https://github.com/developit/preact" target="_blank" rel="external">Preact</a> 所做的超级棒的 <a href="https://twitter.com/slightlylate/status/770652362985836544" target="_blank" rel="external">真实世界设备的性能</a>。</p>
<p><strong>开源 React 渐进式 Web App 示例</strong></p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*5tmODLoFjo8A_nnW." alt=""></p>
<p><strong>如果你想要看更复杂的使用 React 开发，并使用 Lighthouse 优化的 PWAs 例子，你可能会感兴趣于：</strong> <a href="https://github.com/insin/react-hn" target="_blank" rel="external"><em>ReactHN</em></a><strong>— 一个使用服务端渲染并支持离线的 HackerNews 客户端 或者 <a href="https://github.com/GoogleChrome/sw-precache/tree/master/app-shell-demo" target="_blank" rel="external"><em>iFixit</em></a> — 一个使用 React 开发，但使用了 Redux 进行状态管理的硬件修复指南 app。</strong></p>
<p>现在让我们梳理一遍在 Lighthouse 报告中需要清点的每一项，并在系列中继续 React.js 专用的小贴士。</p>
<h3 id="网络连接是安全的">网络连接是安全的</h3><h4 id="HTTPS_的工具和建议">HTTPS 的工具和建议</h4><p><img src="https://cdn-images-1.medium.com/max/1200/1*xRLobGG8a41wGypF9mKI-A.jpeg" alt=""></p>
<p><a href="https://support.google.com/webmasters/answer/6073543?hl=en" target="_blank" rel="external">HTTPS</a> 防止坏人篡改你的 app 和你的用户使用的浏览器之间的通信，你可能读过 Google 正在推动 <a href="http://motherboard.vice.com/read/google-will-soon-shame-all-websites-that-are-unencrypted-chrome-https" target="_blank" rel="external">羞辱</a> 那些没有加密的网站。强大的新型 web 平台 APIs，像 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API" target="_blank" rel="external">Service Worker</a>，<a href="https://www.chromium.org/Home/chromium-security/prefer-secure-origins-for-powerful-new-features" target="_blank" rel="external">require</a> 通过 HTTPS 保护来源，但是好消息是像是 <a href="https://letsencrypt.org/" target="_blank" rel="external">LetsEncrypt</a> 这样的服务商提供了免费的 <a href="https://www.globalsign.com/en/ssl-information-center/what-is-an-ssl-certificate/" target="_blank" rel="external">SSL 证书</a>，便宜的选择像是 <a href="https://www.cloudflare.com/" target="_blank" rel="external">Cloudflare</a> 可以使端到端流量 <a href="https://www.cloudflare.com/ssl/" target="_blank" rel="external">完全</a> 加密，从来没有如此简单直接地能做到现在这样。</p>
<p>作为我的个人项目，我通常会部署到 <a href="https://cloud.google.com/appengine/" target="_blank" rel="external">Google App Engine</a>，它支持通过 appspot.com 域名的 SSL 通信服务，只需要你加上 <a href="https://cloud.google.com/appengine/docs/python/config/appref" target="_blank" rel="external">‘secure’</a> 参数到你的 app.yaml 文件。对于需要 Node.js 支持 Universal 渲染的 React apps，我使用 <a href="https://cloudplatform.googleblog.com/2016/03/Node.js-on-Google-App-Engine-goes-beta.html" target="_blank" rel="external">Node on App Engine</a>。<a href="https://github.com/blog/2186-https-for-github-pages" target="_blank" rel="external">Github Pages</a> 和 <a href="https://zeit.co/blog/now-alias" target="_blank" rel="external">Zeit.co</a> 现在也支持 HTTPS。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*OzD-JvnlDlwVS8d-." alt=""></p>
<p><strong>这个</strong> <a href="https://developers.google.com/web/updates/2015/12/security-panel?hl=en" target="_blank" rel="external"><strong>Chrome DevTools Security 面板</strong></a> <strong>允许你印证安全证书和混合内容错误的问题。</strong></p>
<p>一些更多的小贴士可以使你的网站更加安全：</p>
<ul>
<li>根据需要重定向用户，升级非安全请求（“HTTP” 连接）到 “HTTPS”。可以一看 <a href="https://content-security-policy.com/" target="_blank" rel="external">内容安全策略</a> 和 <a href="https://googlechrome.github.io/samples/csp-upgrade-insecure-requests/" target="_blank" rel="external">升级非安全请求</a>。</li>
<li>更新所有引用 “http://” 的链接到 “<a href="https://”。如果你依赖第三方的脚本或者内容，跟他们商量一下让他们也支持一下" target="_blank" rel="external">https://”。如果你依赖第三方的脚本或者内容，跟他们商量一下让他们也支持一下</a> HTTPS 资源。</li>
<li>提供页面的时候，使用 <a href="https://en.wikipedia.org/wiki/HTTP_Strict_Transport_Security" target="_blank" rel="external">HTTP 严格传输安全</a> (HSTS) 头。这是一个强制浏览器只通过 HTTPS 和你的网站交流的指令。</li>
</ul>
<p>我建议去看看 <a href="https://developers.google.com/web/shows/cds/2015/deploying-https-the-green-lock-and-beyond-chrome-dev-summit-2015?hl=en" target="_blank" rel="external">Deploying HTTPS: The Green Lock and Beyond</a> 和 <a href="https://developers.google.com/web/shows/google-io/2016/mythbusting-https-squashing-securitys-urban-legends-google-io-2016?hl=en" target="_blank" rel="external">Mythbusting HTTPS: Squashing security’s urban legends</a> 来了解更多。</p>
<h3 id="用户会被提醒将_app_添加到_Homescreen">用户会被提醒将 app 添加到 Homescreen</h3><p>下一个要讲的是自定义你的 app 的 “<a href="https://developer.chrome.com/multidevice/android/installtohomescreen" target="_blank" rel="external">添加到主屏幕</a>” 体验（favicons，显示的应用名字，方向和更多）。这是通过添加一个 <a href="https://developer.mozilla.org/en-US/docs/Web/Manifest" target="_blank" rel="external">Web 应用 manifest</a> 来做的。我经常会找定制的跨浏览器（以及系统）的图标来完成这部分工作，但是像是 <a href="http://realfavicongenerator.net/" target="_blank" rel="external">realfavicongenerator.net</a> 这样的工具能解决不少麻烦的事情。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*00LlyQjpgTUPOh0g." alt=""></p>
<p>有很多关于一个网站只需要在大部分场合能工作的 “最少” favicons 的讨论。Lighthouse <a href="https://github.com/GoogleChrome/lighthouse/issues/291" target="_blank" rel="external">提议</a> 提供一个 192px 的图标给主屏幕，一个 512px 的图标给你的闪屏。我个人坚持从 realfavicongenerator 得到的输出，除了它包含更多的 metatags, 我也更倾向于它能涵盖我的所有基数。</p>
<p>一些网站可能更倾向于为每个平台提供高度定制化的 favicon。我推荐去看看 <a href="https://medium.com/dev-channel/designing-a-progressive-web-app-icon-b55f63f9ff6e#.voxq5imjg" target="_blank" rel="external">设计一个渐进式 Web App 图标</a> 以获得更多关于这个主题的指导。</p>
<p><img src="https://cdn-images-1.medium.com/max/1200/1*xdyHSM4RdSkeN3-U8O1JKg.png" alt=""></p>
<p>通过 Web App manifest 安装，你还能获得 <a href="https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/?hl=en" target="_blank" rel="external">app 安装器横幅</a>，让你有方法可以原生地提示用户来安装你的 PWA，如果他们觉得会经常使用它的话。还可以 <a href="https://developers.google.com/web/fundamentals/engage-and-retain/app-install-banners/?hl=en#deferring_or_cancelling_the_prompt" target="_blank" rel="external">延迟</a> 提示，直到用户和你的 app 进行了有意义的交互。Flipkart <a href="https://twitter.com/adityapunjani/status/782426188702633984" target="_blank" rel="external">找到</a> 最佳时间来显示这个提示是在他们的订单确认页。</p>
<p><a href="https://developers.google.com/web/tools/chrome-devtools/progressive-web-apps" target="_blank" rel="external"><strong>Chrome DevTools Application 面板</strong></a> 支持通过 Application &gt; Manifest 来查看你的 Web App manifest：</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*-UCHfo1lxUdWUKAD." alt=""></p>
<p>它会解析出列在你的 manifest 清单文件的 favicons（网站头像），还能预览像是 start URL 和 theme colors 这样的属性。顺带一提，如果感兴趣的话，这里有一个完整的关于 Web App Manfests 的工具小贴士 <a href="https://www.youtube.com/watch?v=yQhFmPExcbs&amp;index=11&amp;list=PLNYkxOF6rcIB3ci6nwNyLYNU6RDOU3YyL" target="_blank" rel="external">片段</a> 😉</p>
<h3 id="安装了的_web_app_启动时会带自定义的闪屏画面">安装了的 web app 启动时会带自定义的闪屏画面</h3><p>在旧版本的 Android Chrome 上，点击主屏幕上的 app 图标通常会花费 200 毫秒（一些慢的网站甚至要数秒）以到达文档的第一帧被渲染到屏幕上。</p>
<p>在这段时间内，用户会看到一个白屏，减少对你网站的感知到的性能。Chrome 47 和以上版本 <a href="https://developers.google.com/web/updates/2015/10/splashscreen?hl=en" target="_blank" rel="external">支持自定义闪屏</a>（基于来自 Web App manifest 的背景颜色，名字和图标）会在浏览器准备绘制一些东西前给屏幕一些颜色。这使得你的 webapp 感受上更接近 “原生”。</p>
<p><img src="https://cdn-images-1.medium.com/max/1600/0*sQHn9k-t--cNcijL." alt=""></p>
<p><a href="http://realfavicongenerator.net/" target="_blank" rel="external">Realfavicongenerator.net</a> 现在还支持根据你的清单（manifest）预览并自定义闪屏，很方便地节约时间。</p>
<p><strong>注意：Firefox for Android 和 Opera for Android 也支持 Web 应用程序清单，闪屏和添加到主屏幕的体验。在 iOS 上，Safari 也支持自定义添加到 <a href="https://developer.apple.com/library/ios/documentation/AppleApplications/Reference/SafariWebContent/ConfiguringWebApplications/ConfiguringWebApplications.html" target="_blank" rel="external">主屏幕的图标</a> 并曾经支持一个 <a href="https://gist.github.com/tfausak/2222823" target="_blank" rel="external">专有的闪屏</a> 实现，然而这个在 iOS9 上显得不能用了。我已经填了一个特性请求给 Webkit，以支持 Web App manifest，所以…希望一切顺利吧。</strong></p>
<h3 id="设计是移动友好的">设计是移动友好的</h3><p>为多种设备所优化的 Apps 必须在他们的 document 里面包括一个  <a href="https://developers.google.com/web/fundamentals/design-and-ui/responsive/fundamentals/set-the-viewport?hl=en" target="_blank" rel="external">meta-viewport</a>。这看上去非常明显，但是我看到过很多的 React 项目中，人们忘了加上这个。好在 <a href="https://github.com/facebookincubator/create-react-app/blob/master/packages/react-scripts/template/public/index.html#L5" target="_blank" rel="external">create-react-app</a> 有默认加上有效的 meta-viewport，而且如果缺失的话 Lighthouse 会标记上：</p>
<p>尽管我们非常重视渐进式 Web 应用程序在移动 web 的体验，这 <a href="https://www.justinribeiro.com/chronicle/2016/09/10/desktop-pwa-bring-the-goodness/" target="_blank" rel="external">并不意味着桌面应该被忘记</a>。一个精心设计的 PWA 应该可以在各种 viewport 尺寸、浏览器以及设备上良好运作，正如 Housing.com 所展示的：</p>
<p><img src="https://cdn-images-1.medium.com/max/2000/0*bgAmcKHWLB_DxiRC." alt=""></p>
<p>在系列第 2 部分，我们将会看看那 <a href="https://medium.com/@addyosmani/progressive-web-apps-with-react-js-part-2-page-load-performance-33b932d97cf2#.9ebqqaw8k" target="_blank" rel="external"><strong>使用 React 和 Webpack 的页面加载性能</strong></a>。我们会深入 code-splitting（代码分割），基于路由的 chunking（分块）以及 达到更快交互性 PRPL 模式。</p>
<p>如果你不熟悉 React，我发现 Wes Bos 写的 <a href="https://goo.gl/G1WGxU" target="_blank" rel="external">给新手的 React</a> 很棒。</p>
<p><strong>感谢 Gray Norton, Sean Larkin, Sunil Pai, Max Stoiber, Simon Boudrias, Kyle Mathews 和 Owen Campbell-Moore 的校对</strong></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>来自译者 markzhai：大家也知道最近 Web 越来越火了，如果你还以为 Web 就是 jQuery、Ajax、CSS 什么的，那你就 out 了。给大家几个链接看一看吧：</p>
<ul>
<li><a href="https://shop.polymer-proje]]>
    </summary>
    
      <category term="JavaScript" scheme="http://blog.zhaiyifan.cn/tags/JavaScript/"/>
    
      <category term="PWA" scheme="http://blog.zhaiyifan.cn/tags/PWA/"/>
    
      <category term="React.js" scheme="http://blog.zhaiyifan.cn/tags/React-js/"/>
    
      <category term="前端" scheme="http://blog.zhaiyifan.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Frontend" scheme="http://blog.zhaiyifan.cn/categories/Frontend/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目11 - 组件化实践（1）]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/10/20/android-new-project-from-0-p11/"/>
    <id>http://blog.zhaiyifan.cn/2016/10/20/android-new-project-from-0-p11/</id>
    <published>2016-10-20T14:03:13.000Z</published>
    <updated>2016-10-23T04:36:33.000Z</updated>
    <content type="html"><![CDATA[<p>最近更新不太频繁，一方面工作上比较忙，除了 Android 也在负责前端，另外周末和深夜也在帮人做 Go 后台、设计技术方案、管进度的事情（因为报酬不错没忍心拒绝，而且确实对个人成长还有帮助），所以实在对不住。</p>
<p>另外，文章最底下有捐款啊，最近真是都没钱吃饭了。。。</p>
<h1 id="前言">前言</h1><p>这里的组件化，指的是 MDCC 2016 上冯森林提出的《回归初心，从容器化到组件化》。</p>
<p>我个人一直是比较反感黑科技的，其中首当其冲的就是 插件化 以及 保活。作为一个开发者，除了研究技术，提高自己以外，是否应该考虑些其他东西呢？尤其是我们这些嵌入式系统（客户端）开发者，在依赖、受哺于系统生态下，是不是应该考虑一下，怎么反哺？怎么去更好地维护这个生态环境，而不是一味破坏、消耗它呢？</p>
<p>想一想那些黑科技带来的。插件化导致线上可以执行任何代码且不留下痕迹，用户安全性和信任感何在？保活导致应用长时间不释放，抢占系统资源，让用户产生 Android 越用越卡的感觉。全家桶互相唤醒，确定不是逼着用户删除应用？至少我在 Android 手机上是不敢装某些知名应用的。</p>
<p>Greenify —— 绿色守护 帮助我们解决了应用死不掉的问题。那其他的呢？作为一个 Android 开发者，我不敢在我的 Android 手机上装一些应用 —— 支付宝、淘宝、闲鱼（Web 上还不让用）、天猫、京东、百度贴吧。有朋友找我推荐手机的时候，我从不会推荐 iPhone，但给他们推荐 Android 后，又会担心他们能不能 hold 住国内生态下的 Android 手机。有一个买了 Sony Z5 的女孩子，当时问我为啥用电那么快后，我实在无言以对。只能给她指导了一些姿势和黑科技。</p>
<p><img src="/images/android-new-project-from-0-11-conversation.png" alt="Conversation"></p>
<p>幸而时至半年后的今天，她用得还挺顺手，而 iOS10 也顺利给自己抹黑了一把。</p>
<p>然而——<br>今天你在消耗这个生态，明天你就得为此承担结果。</p>
<h1 id="组件化是什么">组件化是什么</h1><p>组件化，相对于容器化（插件），是一种没有黑科技的相互隔离的并行开发方式。为了了解组件化，不得不先说一下插件化。</p>
<h2 id="为什么我们需要插件化">为什么我们需要插件化</h2><p>现代 Android 开发中，往往会堆积很多的需求进项目，超过 65535 后，MultiDex、插件化都是解决方案。但方法数不是引入插件化的唯一原因，更多的时候，引入插件化有另外几个理由：</p>
<ul>
<li>满足产品经理随时上线的需求（注意，这在国外是命令禁止的，App store 和 Google Play 都不允许这种行为，支付宝因此被 Google Play 下架过，仔细想想，如果任何应用都能在线上替换原来的行为，审查还有什么用？）。</li>
<li>团队比较有钱，愿意养人做这个。技术人员觉得不做业务简直太棒了，可以安心研究技术。</li>
<li>并行开发，常见于复杂的各种东西往里塞的大型应用，比如 —— 手Q、手空、手淘、支付宝、大众点评、携程等等。这些团队的 Android 开发动辄是数百人，并分成好几个业务组，如此要并行开发便需要解耦各个模块，避免互相依赖。而且代码一多吧，编译也会很慢（我们公司现在的工程已经需要 5 - 6 分钟了，手空使用 ant 都需要 5 分钟，而 手Q 使用 ant 则需要 10 分钟，改成 gradle 的话姑且乘个2，都是几十分钟的级别）。插件化可以加快编译速度，从而提高开发效率。</li>
</ul>
<p>其实真正的理由就只有第三个（我相信业务技术人员也不会真的想无休止地发版本，除了一些分 架构组/业务组 的地方，架构组会不考虑业务组的感受）。在知乎上，小梁也有对此作出回答：<a href="https://www.zhihu.com/question/19981105/answer/123618636" target="_blank" rel="external">怎么将 Android 程序做成插件化的形式？</a>，建议去读一下。</p>
<p>本篇里不多说插件化的工作原理，建议移步去别处学习，直接看源码也可以，像 atlas 这样 Hook 构成的插件框架可能阅读起来会有些困难，其他还好。</p>
<h2 id="插件化的恶">插件化的恶</h2><p>躺不完的坑。<br>—— 即便是一些做了很多年的插件化框架，依然在不断躺坑，更何况是使用他们的开发者，简直是花式中枪。</p>
<p>发不完的版本。<br>—— 什么？赶不上？没事，迟些可以单独发版本。这回你可真是搬砖的码农了。</p>
<p>这个在我的插件里是好的呀。<br>—— 在各自的壳里运行很完美，然而集成后各种问题不断，甚至一启动就 ANR。</p>
<p>版本带来的问题。<br>—— 因为要动态发版本，所以每个插件自然需要有各种版本。什么？那个不对？肯定是你引用的版本错啦。更何况发版本本身就是个让人很心累的事情。</p>
<p>等等等等，不赘述。垃圾插件，还我青春。</p>
<h2 id="组件化_VS_插件化">组件化 VS 插件化</h2><p>组件化带来的，是一个没有黑科技的插件化。应用了 Android 原有的技术栈以及 Gradle 的灵活性，失去的是动态发版本的能力，其他则做得比插件化更好。因为没有黑科技，所以不会有那么多黑科技和各种 hook 导致的坑，以及为了规避它们必须小心翼翼遵守的开发规范，几乎和没有使用插件化的 Android 开发一模一样。</p>
<p>而我们需要关心的，只是如何做好隔离，如何更好地设计，以及提高开发效率与产品体验。</p>
<h1 id="Take_Action">Take Action</h1><h2 id="Gradle">Gradle</h2><p>组件化的基本就是通过 gradle 脚本来做的。</p>
<p>通过在需要组件化的业务 module 中：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (isDebug.toBoolean()) &#123;</span><br><span class="line">    apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>并在业务 module 中放一个 gradle.properties：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isDebug=false</span><br></pre></td></tr></table></figure></p>
<p>如此，当我们设置 isDebug 为 true 时，则这个 module 将会作为 application module 编译为 apk，否则 为 library module 编译为 aar。</p>
<p>下面的 gradle 是我们的一个组件化业务 module 的完整 build.gralde：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">println isDebug.toBoolean()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isDebug.toBoolean()) &#123;</span><br><span class="line">    apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'me.tatarka.retrolambda'</span></span><br><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.neenbedankt.android-apt'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion rootProject.ext.compileSdkVersion</span><br><span class="line">    buildToolsVersion rootProject.ext.buildToolsVersion</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        minSdkVersion rootProject.ext.minSdkVersion</span><br><span class="line">        targetSdkVersion rootProject.ext.targetSdkVersion</span><br><span class="line">        versionCode rootProject.ext.versionCode</span><br><span class="line">        versionName rootProject.ext.versionName</span><br><span class="line">        multiDexEnabled <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isDebug.toBoolean()) &#123;</span><br><span class="line">            ndk &#123;</span><br><span class="line">                abiFilters <span class="string">"armeabi-v7a"</span>, <span class="string">"x86"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility rootProject.ext.javaVersion</span><br><span class="line">        targetCompatibility rootProject.ext.javaVersion</span><br><span class="line">    &#125;</span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        abortOnError rootProject.ext.abortOnLintError</span><br><span class="line">        checkReleaseBuilds rootProject.ext.checkLintRelease</span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dataBinding &#123;</span><br><span class="line">        enabled = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isDebug.toBoolean()) &#123;</span><br><span class="line">        splits &#123;</span><br><span class="line">            abi &#123;</span><br><span class="line">                enable <span class="literal">true</span></span><br><span class="line">                reset()</span><br><span class="line">                include <span class="string">'armeabi-v7a'</span>, <span class="string">'x86'</span></span><br><span class="line">                universalApk <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="string">dir:</span> <span class="string">'libs'</span>, <span class="string">include:</span> [<span class="string">'*.jar'</span>])</span><br><span class="line">    compile project(<span class="string">':lib_stay_base'</span>)</span><br><span class="line">    apt rootProject.ext.libGuava</span><br><span class="line">    apt rootProject.ext.libDaggerCompiler</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>各位根据实际需要参考修改即可。</p>
<p>这里另外提供一个小诀窍，为了对抗 Android Studio 的坑爹，比如有时候改了 gradle，sync 后仍然没法直接通过 IDE 启动 module app，可以修改 settings.gradle，比如：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">include <span class="string">':app'</span></span><br><span class="line">include <span class="string">':data'</span></span><br><span class="line">include <span class="string">':domain'</span></span><br><span class="line">include <span class="string">':module_setting'</span></span><br><span class="line">include <span class="string">':module_card'</span></span><br><span class="line">include <span class="string">':module_discovery'</span></span><br><span class="line">include <span class="string">':module_feed'</span></span><br><span class="line">include <span class="string">':lib_stay_base'</span></span><br><span class="line"><span class="comment">// 省略一堆 sdk 库</span></span><br></pre></td></tr></table></figure></p>
<p>可以把不需要的 module 都给先注释了（只留下需要的 module，lib_base，以及 sdk），尤其是 app module。然后基本上就没问题。</p>
<h2 id="Manifest">Manifest</h2><p>一个很常见的需求就是，当我作为独立业务运行的时候，manifest 会不同，比如会多些 activity（用来套的，或者测试调试用的），或者 application 不同，总之会有些细微的差别。</p>
<p>一个简单的做法是：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        <span class="keyword">if</span> (isDebug.toBoolean()) &#123;</span><br><span class="line">            manifest.srcFile <span class="string">'src/debug/AndroidManifest.xml'</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            manifest.srcFile <span class="string">'src/release/AndroidManifest.xml'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这样在编译时使用两个 manifest，但是这样一来，两者就有很多重复的内容，会有维护、比较的成本。</p>
<p>我们可以利用自带 flavor manifest merge，分别对应 debug/AndroidManifest.xml, main/AndroidManifest.xml, 以及 release/AndroidManifest.xml。</p>
<p>main 下的 manifest 写通用的东西，另外 2 个分别写各自独立的，通常 release 的 manifest 只是一个空的 application 标签，而 debug 的会有 application 和调试用的 activity（你总得要有个启动 activity 吧）及权限。</p>
<p>这里有一个小 tip，就是在 release 的 manifest 中，application 标签下尽量不要放任何东西，只是占个位，让上面去 merge，否则比如一个 module supportsRtl 设置为了 true，另一个 module 设置为了 false，就不得不去做 override 了。</p>
<h2 id="Wrapper">Wrapper</h2><p>看一个 debug manifest 的例子：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">manifest</span> <span class="attribute">package</span>=<span class="value">"com.amokie.stay.module.card"</span></span><br><span class="line">          <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">application</span></span><br><span class="line">        <span class="attribute">android:name</span>=<span class="value">"com.amokie.stay.base.BaseApplication"</span></span><br><span class="line">        <span class="attribute">android:allowBackup</span>=<span class="value">"true"</span></span><br><span class="line">        <span class="attribute">android:alwaysRetainTaskState</span>=<span class="value">"true"</span></span><br><span class="line">        <span class="attribute">android:hardwareAccelerated</span>=<span class="value">"true"</span></span><br><span class="line">        <span class="attribute">android:icon</span>=<span class="value">"@mipmap/ic_launcher"</span></span><br><span class="line">        <span class="attribute">android:label</span>=<span class="value">"@string/app_name"</span></span><br><span class="line">        <span class="attribute">android:largeHeap</span>=<span class="value">"true"</span></span><br><span class="line">        <span class="attribute">android:sharedUserId</span>=<span class="value">"com.amokie.stay"</span></span><br><span class="line">        <span class="attribute">android:supportsRtl</span>=<span class="value">"true"</span></span><br><span class="line">        <span class="attribute">android:theme</span>=<span class="value">"@style/AppTheme"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">".WrapActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.MAIN"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.LAUNCHER"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="title">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这里的 <code>WrapActivity</code> 就是我们所谓的 wrapper 了。</p>
<p>因为入口页可能是一个 fragment，所以就需要一个 activity 来包一下它，并作为启动类。</p>
<h2 id="Application">Application</h2><p><code>BaseApplication</code> 继承了 <code>MultiDexApplication</code>，而真正最后集成的 Application 则继承自<br><code>BaseApplication</code>，并添加了一些集成时需要做的事情（比如监控、埋点、Crash上报的初始化）。</p>
<p>但大部分的仍会放在 <code>BaseApplication</code>，比如图片库、React Native、Log 等。然后各个 Module 则直接使用 <code>BaseApplication</code>，免去各自去写初始化的代码。</p>
<p>当然，如果一定想复杂化，也可以专门搞个 library module 做初始化，但我个人不建议过度复杂的设计。</p>
<h2 id="坑">坑</h2><p>可以先阅读阿布的总结文章：<a href="http://abner-nimengbo.cn/2016/10/10/componetization/" target="_blank" rel="external">项目组件化之遇到的坑</a>，也感谢小梁抛砖引玉的 <a href="https://github.com/liangzhitao/ComponentizationApp" target="_blank" rel="external">Demo</a>。</p>
<p>我这边简单也讲一讲。</p>
<h3 id="Data_Binding">Data Binding</h3><p>见我上一篇写到的<a href="http://blog.zhaiyifan.cn/2016/10/11/data-binding-in-library-module/">记一次 Data Binding 在 library module 中遇到的大坑</a>，简单说起来就是 data binding 在 library module 的支持有一个 bug，就是不支持 get ViewModel 的方法，只能 set 进去，从而导致做好模块化的 module 在作为 application 可以独立运行后，作为 library module 无法通过编译。</p>
<p>另外碰到一个问题，就是时不时会有如下的报错（出现在集成 application 的时候，且并不是必现）：<br><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.622</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.622</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>] <span class="name">FAILURE</span>: <span class="name">Build</span> <span class="atom">completed</span> <span class="atom">with</span> <span class="number">3</span> <span class="atom">failures</span>.</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.622</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.622</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>] <span class="number">1</span>: <span class="name">Task</span> <span class="atom">failed</span> <span class="atom">with</span> <span class="atom">an</span> <span class="atom">exception</span>.</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.622</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>] -----------</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.622</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>] * <span class="name">What</span> <span class="atom">went</span> <span class="atom">wrong</span>:</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.623</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>] <span class="name">Execution</span> <span class="atom">failed</span> <span class="atom">for</span> <span class="atom">task</span> <span class="string">':module_user:dataBindingProcessLayoutsRelease'</span>.</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.623</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>] &gt; -<span class="number">1</span></span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.623</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.623</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>] * <span class="name">Exception</span> <span class="atom">is</span>:</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.624</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>] <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">api</span>.<span class="atom">tasks</span>.<span class="name">TaskExecutionException</span>: <span class="name">Execution</span> <span class="atom">failed</span> <span class="atom">for</span> <span class="atom">task</span> <span class="string">':module_user:dataBindingProcessLayoutsRelease'</span>.</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.624</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">api</span>.<span class="atom">internal</span>.<span class="atom">tasks</span>.<span class="atom">execution</span>.<span class="name">ExecuteActionsTaskExecuter</span>.<span class="atom">executeActions</span>(<span class="name">ExecuteActionsTaskExecuter</span>.<span class="atom">java</span>:<span class="number">69</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.625</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">api</span>.<span class="atom">internal</span>.<span class="atom">tasks</span>.<span class="atom">execution</span>.<span class="name">ExecuteActionsTaskExecuter</span>.<span class="atom">execute</span>(<span class="name">ExecuteActionsTaskExecuter</span>.<span class="atom">java</span>:<span class="number">46</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.625</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">api</span>.<span class="atom">internal</span>.<span class="atom">tasks</span>.<span class="atom">execution</span>.<span class="name">PostExecutionAnalysisTaskExecuter</span>.<span class="atom">execute</span>(<span class="name">PostExecutionAnalysisTaskExecuter</span>.<span class="atom">java</span>:<span class="number">35</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.626</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">api</span>.<span class="atom">internal</span>.<span class="atom">tasks</span>.<span class="atom">execution</span>.<span class="name">SkipUpToDateTaskExecuter</span>.<span class="atom">execute</span>(<span class="name">SkipUpToDateTaskExecuter</span>.<span class="atom">java</span>:<span class="number">66</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.626</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">api</span>.<span class="atom">internal</span>.<span class="atom">tasks</span>.<span class="atom">execution</span>.<span class="name">ValidatingTaskExecuter</span>.<span class="atom">execute</span>(<span class="name">ValidatingTaskExecuter</span>.<span class="atom">java</span>:<span class="number">58</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.627</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">api</span>.<span class="atom">internal</span>.<span class="atom">tasks</span>.<span class="atom">execution</span>.<span class="name">SkipEmptySourceFilesTaskExecuter</span>.<span class="atom">execute</span>(<span class="name">SkipEmptySourceFilesTaskExecuter</span>.<span class="atom">java</span>:<span class="number">52</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.627</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">api</span>.<span class="atom">internal</span>.<span class="atom">tasks</span>.<span class="atom">execution</span>.<span class="name">SkipTaskWithNoActionsExecuter</span>.<span class="atom">execute</span>(<span class="name">SkipTaskWithNoActionsExecuter</span>.<span class="atom">java</span>:<span class="number">52</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.627</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">api</span>.<span class="atom">internal</span>.<span class="atom">tasks</span>.<span class="atom">execution</span>.<span class="name">SkipOnlyIfTaskExecuter</span>.<span class="atom">execute</span>(<span class="name">SkipOnlyIfTaskExecuter</span>.<span class="atom">java</span>:<span class="number">53</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.628</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">api</span>.<span class="atom">internal</span>.<span class="atom">tasks</span>.<span class="atom">execution</span>.<span class="name">ExecuteAtMostOnceTaskExecuter</span>.<span class="atom">execute</span>(<span class="name">ExecuteAtMostOnceTaskExecuter</span>.<span class="atom">java</span>:<span class="number">43</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.628</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">execution</span>.<span class="atom">taskgraph</span>.<span class="name">DefaultTaskGraphExecuter</span>$<span class="name">EventFiringTaskWorker</span>.<span class="atom">execute</span>(<span class="name">DefaultTaskGraphExecuter</span>.<span class="atom">java</span>:<span class="number">203</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.628</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">execution</span>.<span class="atom">taskgraph</span>.<span class="name">DefaultTaskGraphExecuter</span>$<span class="name">EventFiringTaskWorker</span>.<span class="atom">execute</span>(<span class="name">DefaultTaskGraphExecuter</span>.<span class="atom">java</span>:<span class="number">185</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.628</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">execution</span>.<span class="atom">taskgraph</span>.<span class="name">AbstractTaskPlanExecutor</span>$<span class="name">TaskExecutorWorker</span>.<span class="atom">processTask</span>(<span class="name">AbstractTaskPlanExecutor</span>.<span class="atom">java</span>:<span class="number">66</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.628</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">execution</span>.<span class="atom">taskgraph</span>.<span class="name">AbstractTaskPlanExecutor</span>$<span class="name">TaskExecutorWorker</span>.<span class="atom">run</span>(<span class="name">AbstractTaskPlanExecutor</span>.<span class="atom">java</span>:<span class="number">50</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.628</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">execution</span>.<span class="atom">taskgraph</span>.<span class="name">ParallelTaskPlanExecutor</span>.<span class="atom">process</span>(<span class="name">ParallelTaskPlanExecutor</span>.<span class="atom">java</span>:<span class="number">47</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.628</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">execution</span>.<span class="atom">taskgraph</span>.<span class="name">DefaultTaskGraphExecuter</span>.<span class="atom">execute</span>(<span class="name">DefaultTaskGraphExecuter</span>.<span class="atom">java</span>:<span class="number">110</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.628</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">execution</span>.<span class="name">SelectedTaskExecutionAction</span>.<span class="atom">execute</span>(<span class="name">SelectedTaskExecutionAction</span>.<span class="atom">java</span>:<span class="number">37</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.628</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">execution</span>.<span class="name">DefaultBuildExecuter</span>.<span class="atom">execute</span>(<span class="name">DefaultBuildExecuter</span>.<span class="atom">java</span>:<span class="number">37</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.628</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">execution</span>.<span class="name">DefaultBuildExecuter</span>.<span class="atom">access</span>$<span class="number">000</span>(<span class="name">DefaultBuildExecuter</span>.<span class="atom">java</span>:<span class="number">23</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.628</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">execution</span>.<span class="name">DefaultBuildExecuter</span>$<span class="number">1.</span><span class="atom">proceed</span>(<span class="name">DefaultBuildExecuter</span>.<span class="atom">java</span>:<span class="number">43</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.628</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">execution</span>.<span class="name">DryRunBuildExecutionAction</span>.<span class="atom">execute</span>(<span class="name">DryRunBuildExecutionAction</span>.<span class="atom">java</span>:<span class="number">32</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.628</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">execution</span>.<span class="name">DefaultBuildExecuter</span>.<span class="atom">execute</span>(<span class="name">DefaultBuildExecuter</span>.<span class="atom">java</span>:<span class="number">37</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.629</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">execution</span>.<span class="name">DefaultBuildExecuter</span>.<span class="atom">execute</span>(<span class="name">DefaultBuildExecuter</span>.<span class="atom">java</span>:<span class="number">30</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.629</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">initialization</span>.<span class="name">DefaultGradleLauncher</span>$<span class="number">4.</span><span class="atom">run</span>(<span class="name">DefaultGradleLauncher</span>.<span class="atom">java</span>:<span class="number">153</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.629</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">internal</span>.<span class="name">Factories</span>$<span class="number">1.</span><span class="atom">create</span>(<span class="name">Factories</span>.<span class="atom">java</span>:<span class="number">22</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.629</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">internal</span>.<span class="atom">progress</span>.<span class="name">DefaultBuildOperationExecutor</span>.<span class="atom">run</span>(<span class="name">DefaultBuildOperationExecutor</span>.<span class="atom">java</span>:<span class="number">91</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.629</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">internal</span>.<span class="atom">progress</span>.<span class="name">DefaultBuildOperationExecutor</span>.<span class="atom">run</span>(<span class="name">DefaultBuildOperationExecutor</span>.<span class="atom">java</span>:<span class="number">53</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.629</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">initialization</span>.<span class="name">DefaultGradleLauncher</span>.<span class="atom">doBuildStages</span>(<span class="name">DefaultGradleLauncher</span>.<span class="atom">java</span>:<span class="number">150</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.629</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">initialization</span>.<span class="name">DefaultGradleLauncher</span>.<span class="atom">access</span>$<span class="number">200</span>(<span class="name">DefaultGradleLauncher</span>.<span class="atom">java</span>:<span class="number">32</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.629</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">initialization</span>.<span class="name">DefaultGradleLauncher</span>$<span class="number">1.</span><span class="atom">create</span>(<span class="name">DefaultGradleLauncher</span>.<span class="atom">java</span>:<span class="number">98</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.629</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">initialization</span>.<span class="name">DefaultGradleLauncher</span>$<span class="number">1.</span><span class="atom">create</span>(<span class="name">DefaultGradleLauncher</span>.<span class="atom">java</span>:<span class="number">92</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.629</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">internal</span>.<span class="atom">progress</span>.<span class="name">DefaultBuildOperationExecutor</span>.<span class="atom">run</span>(<span class="name">DefaultBuildOperationExecutor</span>.<span class="atom">java</span>:<span class="number">91</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.629</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">internal</span>.<span class="atom">progress</span>.<span class="name">DefaultBuildOperationExecutor</span>.<span class="atom">run</span>(<span class="name">DefaultBuildOperationExecutor</span>.<span class="atom">java</span>:<span class="number">63</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.629</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">initialization</span>.<span class="name">DefaultGradleLauncher</span>.<span class="atom">doBuild</span>(<span class="name">DefaultGradleLauncher</span>.<span class="atom">java</span>:<span class="number">92</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.629</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">initialization</span>.<span class="name">DefaultGradleLauncher</span>.<span class="atom">run</span>(<span class="name">DefaultGradleLauncher</span>.<span class="atom">java</span>:<span class="number">83</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.629</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">exec</span>.<span class="name">InProcessBuildActionExecuter</span>$<span class="name">DefaultBuildController</span>.<span class="atom">run</span>(<span class="name">InProcessBuildActionExecuter</span>.<span class="atom">java</span>:<span class="number">99</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.630</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">tooling</span>.<span class="atom">internal</span>.<span class="atom">provider</span>.<span class="name">ExecuteBuildActionRunner</span>.<span class="atom">run</span>(<span class="name">ExecuteBuildActionRunner</span>.<span class="atom">java</span>:<span class="number">28</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.630</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">exec</span>.<span class="name">ChainingBuildActionRunner</span>.<span class="atom">run</span>(<span class="name">ChainingBuildActionRunner</span>.<span class="atom">java</span>:<span class="number">35</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.630</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">exec</span>.<span class="name">InProcessBuildActionExecuter</span>.<span class="atom">execute</span>(<span class="name">InProcessBuildActionExecuter</span>.<span class="atom">java</span>:<span class="number">48</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.630</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">exec</span>.<span class="name">InProcessBuildActionExecuter</span>.<span class="atom">execute</span>(<span class="name">InProcessBuildActionExecuter</span>.<span class="atom">java</span>:<span class="number">30</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.630</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">exec</span>.<span class="name">ContinuousBuildActionExecuter</span>.<span class="atom">execute</span>(<span class="name">ContinuousBuildActionExecuter</span>.<span class="atom">java</span>:<span class="number">81</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.630</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">exec</span>.<span class="name">ContinuousBuildActionExecuter</span>.<span class="atom">execute</span>(<span class="name">ContinuousBuildActionExecuter</span>.<span class="atom">java</span>:<span class="number">46</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.630</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">exec</span>.<span class="name">ExecuteBuild</span>.<span class="atom">doBuild</span>(<span class="name">ExecuteBuild</span>.<span class="atom">java</span>:<span class="number">52</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.631</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">exec</span>.<span class="name">BuildCommandOnly</span>.<span class="atom">execute</span>(<span class="name">BuildCommandOnly</span>.<span class="atom">java</span>:<span class="number">36</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.631</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">api</span>.<span class="name">DaemonCommandExecution</span>.<span class="atom">proceed</span>(<span class="name">DaemonCommandExecution</span>.<span class="atom">java</span>:<span class="number">120</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.631</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">exec</span>.<span class="name">WatchForDisconnection</span>.<span class="atom">execute</span>(<span class="name">WatchForDisconnection</span>.<span class="atom">java</span>:<span class="number">37</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.631</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">api</span>.<span class="name">DaemonCommandExecution</span>.<span class="atom">proceed</span>(<span class="name">DaemonCommandExecution</span>.<span class="atom">java</span>:<span class="number">120</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.631</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">exec</span>.<span class="name">ResetDeprecationLogger</span>.<span class="atom">execute</span>(<span class="name">ResetDeprecationLogger</span>.<span class="atom">java</span>:<span class="number">26</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.631</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">api</span>.<span class="name">DaemonCommandExecution</span>.<span class="atom">proceed</span>(<span class="name">DaemonCommandExecution</span>.<span class="atom">java</span>:<span class="number">120</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.631</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">exec</span>.<span class="name">RequestStopIfSingleUsedDaemon</span>.<span class="atom">execute</span>(<span class="name">RequestStopIfSingleUsedDaemon</span>.<span class="atom">java</span>:<span class="number">34</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.631</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">api</span>.<span class="name">DaemonCommandExecution</span>.<span class="atom">proceed</span>(<span class="name">DaemonCommandExecution</span>.<span class="atom">java</span>:<span class="number">120</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.631</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">exec</span>.<span class="name">ForwardClientInput</span>$<span class="number">2.</span><span class="atom">call</span>(<span class="name">ForwardClientInput</span>.<span class="atom">java</span>:<span class="number">74</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.631</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">exec</span>.<span class="name">ForwardClientInput</span>$<span class="number">2.</span><span class="atom">call</span>(<span class="name">ForwardClientInput</span>.<span class="atom">java</span>:<span class="number">72</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.631</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">util</span>.<span class="name">Swapper</span>.<span class="atom">swap</span>(<span class="name">Swapper</span>.<span class="atom">java</span>:<span class="number">38</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.631</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">exec</span>.<span class="name">ForwardClientInput</span>.<span class="atom">execute</span>(<span class="name">ForwardClientInput</span>.<span class="atom">java</span>:<span class="number">72</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.632</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">api</span>.<span class="name">DaemonCommandExecution</span>.<span class="atom">proceed</span>(<span class="name">DaemonCommandExecution</span>.<span class="atom">java</span>:<span class="number">120</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.632</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">health</span>.<span class="name">DaemonHealthTracker</span>.<span class="atom">execute</span>(<span class="name">DaemonHealthTracker</span>.<span class="atom">java</span>:<span class="number">47</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.632</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">api</span>.<span class="name">DaemonCommandExecution</span>.<span class="atom">proceed</span>(<span class="name">DaemonCommandExecution</span>.<span class="atom">java</span>:<span class="number">120</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.632</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">exec</span>.<span class="name">LogToClient</span>.<span class="atom">doBuild</span>(<span class="name">LogToClient</span>.<span class="atom">java</span>:<span class="number">60</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.632</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">exec</span>.<span class="name">BuildCommandOnly</span>.<span class="atom">execute</span>(<span class="name">BuildCommandOnly</span>.<span class="atom">java</span>:<span class="number">36</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.632</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">api</span>.<span class="name">DaemonCommandExecution</span>.<span class="atom">proceed</span>(<span class="name">DaemonCommandExecution</span>.<span class="atom">java</span>:<span class="number">120</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.632</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">exec</span>.<span class="name">EstablishBuildEnvironment</span>.<span class="atom">doBuild</span>(<span class="name">EstablishBuildEnvironment</span>.<span class="atom">java</span>:<span class="number">72</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.632</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">exec</span>.<span class="name">BuildCommandOnly</span>.<span class="atom">execute</span>(<span class="name">BuildCommandOnly</span>.<span class="atom">java</span>:<span class="number">36</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.632</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">api</span>.<span class="name">DaemonCommandExecution</span>.<span class="atom">proceed</span>(<span class="name">DaemonCommandExecution</span>.<span class="atom">java</span>:<span class="number">120</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.632</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">health</span>.<span class="name">HintGCAfterBuild</span>.<span class="atom">execute</span>(<span class="name">HintGCAfterBuild</span>.<span class="atom">java</span>:<span class="number">41</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.632</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">api</span>.<span class="name">DaemonCommandExecution</span>.<span class="atom">proceed</span>(<span class="name">DaemonCommandExecution</span>.<span class="atom">java</span>:<span class="number">120</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.632</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="atom">exec</span>.<span class="name">StartBuildOrRespondWithBusy</span>$<span class="number">1.</span><span class="atom">run</span>(<span class="name">StartBuildOrRespondWithBusy</span>.<span class="atom">java</span>:<span class="number">50</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.632</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">launcher</span>.<span class="atom">daemon</span>.<span class="atom">server</span>.<span class="name">DaemonStateCoordinator</span>$<span class="number">1.</span><span class="atom">run</span>(<span class="name">DaemonStateCoordinator</span>.<span class="atom">java</span>:<span class="number">237</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.632</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">internal</span>.<span class="atom">concurrent</span>.<span class="name">ExecutorPolicy</span>$<span class="name">CatchAndRecordFailures</span>.<span class="atom">onExecute</span>(<span class="name">ExecutorPolicy</span>.<span class="atom">java</span>:<span class="number">54</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.633</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">internal</span>.<span class="atom">concurrent</span>.<span class="name">StoppableExecutorImpl</span>$<span class="number">1.</span><span class="atom">run</span>(<span class="name">StoppableExecutorImpl</span>.<span class="atom">java</span>:<span class="number">40</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.633</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>] <span class="name">Caused</span> <span class="atom">by</span>: <span class="atom">java</span>.<span class="atom">lang</span>.<span class="name">ArrayIndexOutOfBoundsException</span>: -<span class="number">1</span></span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.633</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">com</span>.<span class="atom">sun</span>.<span class="atom">xml</span>.<span class="atom">internal</span>.<span class="atom">bind</span>.<span class="atom">v2</span>.<span class="atom">util</span>.<span class="name">CollisionCheckStack</span>.<span class="atom">pushNocheck</span>(<span class="name">CollisionCheckStack</span>.<span class="atom">java</span>:<span class="number">117</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.633</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">com</span>.<span class="atom">sun</span>.<span class="atom">xml</span>.<span class="atom">internal</span>.<span class="atom">bind</span>.<span class="atom">v2</span>.<span class="atom">runtime</span>.<span class="name">XMLSerializer</span>.<span class="atom">childAsRoot</span>(<span class="name">XMLSerializer</span>.<span class="atom">java</span>:<span class="number">472</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.633</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">com</span>.<span class="atom">sun</span>.<span class="atom">xml</span>.<span class="atom">internal</span>.<span class="atom">bind</span>.<span class="atom">v2</span>.<span class="atom">runtime</span>.<span class="name">MarshallerImpl</span>.<span class="atom">write</span>(<span class="name">MarshallerImpl</span>.<span class="atom">java</span>:<span class="number">308</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.633</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">com</span>.<span class="atom">sun</span>.<span class="atom">xml</span>.<span class="atom">internal</span>.<span class="atom">bind</span>.<span class="atom">v2</span>.<span class="atom">runtime</span>.<span class="name">MarshallerImpl</span>.<span class="atom">marshal</span>(<span class="name">MarshallerImpl</span>.<span class="atom">java</span>:<span class="number">236</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.633</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">android</span>.<span class="atom">databinding</span>.<span class="atom">tool</span>.<span class="atom">store</span>.<span class="name">ResourceBundle</span>$<span class="name">LayoutFileBundle</span>.<span class="atom">toXML</span>(<span class="name">ResourceBundle</span>.<span class="atom">java</span>:<span class="number">629</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.633</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">android</span>.<span class="atom">databinding</span>.<span class="atom">tool</span>.<span class="name">LayoutXmlProcessor</span>.<span class="atom">writeXmlFile</span>(<span class="name">LayoutXmlProcessor</span>.<span class="atom">java</span>:<span class="number">252</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.633</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">android</span>.<span class="atom">databinding</span>.<span class="atom">tool</span>.<span class="name">LayoutXmlProcessor</span>.<span class="atom">writeLayoutInfoFiles</span>(<span class="name">LayoutXmlProcessor</span>.<span class="atom">java</span>:<span class="number">239</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.633</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">com</span>.<span class="atom">android</span>.<span class="atom">build</span>.<span class="atom">gradle</span>.<span class="atom">internal</span>.<span class="atom">tasks</span>.<span class="atom">databinding</span>.<span class="name">DataBindingProcessLayoutsTask</span>.<span class="atom">processResources</span>(<span class="name">DataBindingProcessLayoutsTask</span>.<span class="atom">java</span>:<span class="number">110</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.633</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">internal</span>.<span class="atom">reflect</span>.<span class="name">JavaMethod</span>.<span class="atom">invoke</span>(<span class="name">JavaMethod</span>.<span class="atom">java</span>:<span class="number">75</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.633</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">api</span>.<span class="atom">internal</span>.<span class="atom">project</span>.<span class="atom">taskfactory</span>.<span class="name">AnnotationProcessingTaskFactory</span>$<span class="name">IncrementalTaskAction</span>.<span class="atom">doExecute</span>(<span class="name">AnnotationProcessingTaskFactory</span>.<span class="atom">java</span>:<span class="number">245</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.633</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">api</span>.<span class="atom">internal</span>.<span class="atom">project</span>.<span class="atom">taskfactory</span>.<span class="name">AnnotationProcessingTaskFactory</span>$<span class="name">StandardTaskAction</span>.<span class="atom">execute</span>(<span class="name">AnnotationProcessingTaskFactory</span>.<span class="atom">java</span>:<span class="number">221</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.633</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">api</span>.<span class="atom">internal</span>.<span class="atom">project</span>.<span class="atom">taskfactory</span>.<span class="name">AnnotationProcessingTaskFactory</span>$<span class="name">IncrementalTaskAction</span>.<span class="atom">execute</span>(<span class="name">AnnotationProcessingTaskFactory</span>.<span class="atom">java</span>:<span class="number">232</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.634</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">api</span>.<span class="atom">internal</span>.<span class="atom">project</span>.<span class="atom">taskfactory</span>.<span class="name">AnnotationProcessingTaskFactory</span>$<span class="name">StandardTaskAction</span>.<span class="atom">execute</span>(<span class="name">AnnotationProcessingTaskFactory</span>.<span class="atom">java</span>:<span class="number">210</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.634</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">api</span>.<span class="atom">internal</span>.<span class="atom">tasks</span>.<span class="atom">execution</span>.<span class="name">ExecuteActionsTaskExecuter</span>.<span class="atom">executeAction</span>(<span class="name">ExecuteActionsTaskExecuter</span>.<span class="atom">java</span>:<span class="number">80</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.634</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        <span class="atom">at</span> <span class="atom">org</span>.<span class="atom">gradle</span>.<span class="atom">api</span>.<span class="atom">internal</span>.<span class="atom">tasks</span>.<span class="atom">execution</span>.<span class="name">ExecuteActionsTaskExecuter</span>.<span class="atom">executeActions</span>(<span class="name">ExecuteActionsTaskExecuter</span>.<span class="atom">java</span>:<span class="number">61</span>)</span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.634</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]        ... <span class="number">68</span> <span class="atom">more</span></span><br><span class="line"><span class="number">10</span>:<span class="number">26</span>:<span class="number">29.634</span> [<span class="name">ERROR</span>] [<span class="atom">org</span>.<span class="atom">gradle</span>.<span class="name">BuildExceptionReporter</span>]</span><br></pre></td></tr></table></figure></p>
<p>经过分析和猜测后，发现每次都是同一个 module 堵住的，进去看了看…竟然几乎是空的，是个还没有进行组件化重构的模块（只有一个 manifest 和 string.xml），然而 build.gradle 却使用了 data binding。看来又是个 Google 埋下的坑。心很累，就不去报 bug 了。</p>
<h3 id="Dagger2">Dagger2</h3><p>几个月前写过<a href="http://blog.zhaiyifan.cn/2016/03/27/android-new-project-from-0-p4/">从零开始的Android新项目4 - Dagger2篇
</a>，用了快一年时间的 Dagger2 后，越来越觉得这种注入方式很不错。</p>
<p>然而没想到在组件化改造中会这么坑，但是也不能怪 Dagger2，而是原先隔离就做的不够好。</p>
<p>从设计上来说，Component 和独有的 Module 都只能放在对应的业务 module 中。module 之间不能互相访问彼此的 Dagger Module。且 data 和 domain 两个 module 中各种业务独有的类也应该放在业务 module 中，或者至少应该分拆出来。否则在 Module A 进行组件化开发的时候，却能引用 Module B 的 Api 类以及数据 Bean，简单来说也就是知道得太多。</p>
<p>所以如果使用了 Dagger2，这里就需要把原来的 scope 更进一步做到极致，理清所有依赖的可见区域。</p>
<h3 id="最佳实践">最佳实践</h3><p>每个 module 包名都应该使用 “$packageName.module.$business” 形式，资源使用业务名开头，比如 “feed_ic_like.png”。</p>
<p>另外，在组件化实践过程中可能碰到的就是依赖的问题了，然而因为我们项目本身就设计得还算不错，所以并没有在这方面需要做任何修改，整个项目的架构图如下：</p>
<p><img src="/images/android-new-project-from-0-11-dependency.png" alt="Conversation"></p>
<p>简化了不少，有些省略了，因为实在懒得画。对模块来说，通用的东西放在底层 library（utils、widget），而只有自己用的则放在自己 module 就行了。</p>
<p>作为一个善意提醒，如果一个模块分拆为三个模块，那 clean build 的速度肯定会变慢，要有心理准备。</p>
<h2 id="模块隔离">模块隔离</h2><p>可参考上图，关键的点就是高内聚，低耦合。</p>
<p>通用的东西按照其功能性划分在不同 library 模块中。见上图（已经省略了不少了，实际 module 更多一些）。</p>
<p>改进点在于，从组件化角度来讲，data 和 domain 并不是一个 public 的 scope，也应该放在各个业务模块中，但因为目前的实现，进行重构代价太大，只能放在以后新模块进行实践。</p>
<h2 id="RPC">RPC</h2><p>RPC 在广义上指的是一种通信协议，允许运行于一台计算机的程序调用另一台计算机的子程序，而开发者无需额外地为这个交互作用编程。Android 上的 AIDL 也是一种 RPC 的实现。</p>
<p>这里指的 RPC 并没有跨进程或者机器，而是一种类似的 —— 在彼此无法互相访问的时候的接口定义和调用。</p>
<h3 id="Proxy">Proxy</h3><p>通用的 <code>Proxy</code> 抽象类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Proxy</span>&lt;<span class="title">T</span>, <span class="title">C</span>&gt; <span class="keyword">implements</span> <span class="title">IProxy</span>&lt;<span class="title">T</span>, <span class="title">C</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"Proxy"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Module&lt;T, C&gt; proxy;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> T <span class="title">getUiInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getProxy().getUiInterface();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> C <span class="title">getServiceInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getProxy().getServiceInterface();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getModuleClassName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Module&lt;T, C&gt; getDefaultModule();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Module&lt;T, C&gt; getProxy() &#123;</span><br><span class="line">        <span class="keyword">if</span> (proxy == <span class="keyword">null</span>) &#123;</span><br><span class="line">            String module = getModuleClassName();</span><br><span class="line">            <span class="keyword">if</span> (!TextUtils.isEmpty(module)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    proxy = (Module&lt;T, C&gt;) ModuleManager.LoadModule(module);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">                    LogUtils.e(TAG, module + <span class="string">" module load failed"</span>, e);</span><br><span class="line">                    proxy = getDefaultModule();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>实现类则集成并重载两个抽象方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeedProxy</span> <span class="keyword">extends</span> <span class="title">Proxy</span>&lt;<span class="title">IFeedUI</span>, <span class="title">IFeedService</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> FeedProxy g = <span class="keyword">new</span> FeedProxy();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在没有获得真实实现时候的默认实现</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Module&lt;IFeedUI, IFeedService&gt; getDefaultModule() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DefaultFeedModule();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 真实实现的类</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getModuleClassName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"com.amokie.stay.module.feed.FeedModule"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>IFeedUI 定义 Feed 模块中的 UI 相关接口，IFeedService 则是 Feed 模块的服务接口。</p>
<p>建议直接暴露 intent 或者 void 方法来提供跳转，而不是返回 activity。</p>
<h2 id="Router">Router</h2><p>最 low 的就是用 Class.forName 去拿 activity 或者 fragment 了…其他可以使用 scheme、各自注册、甚至类 RPC 的调用方式。</p>
<p>为什么说 forClass 去获取 activity 或者 fragment 很 low ？模块 A 想去模块 B 的一个页面，拿到 activity 后，难道还要自己去填 intent，还要自己去问人到底需要哪些参数，需要以什么形式过去？再者如果是要去模块 B 的某个 activity 中的某个 fragment，怎么表示？</p>
<p>性能问题就不谈了。这么定义后，以后包名类名都不敢换了。</p>
<h3 id="RPC-1">RPC</h3><p>就是上面提到的类似 <code>IFeedUI</code> 这样的类了，使用的时候</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FeedProxy.g.getUiInterface().goToUserHome(context, userId);</span><br></pre></td></tr></table></figure>
<p>根据灵活性和需要，也可以把 intent 本身作为初始参数传入。</p>
<h3 id="注册">注册</h3><p>即每个页面自行去中央 Navigator 注册自己的 Url。</p>
<p>中央 Navigator 维护一个 Hashmap 用于查询跳转。</p>
<p>如此，我们就依然可以通过 Android 原生的 Bundle/Intent 来传 Parcelable 数据。</p>
<h3 id="scheme">scheme</h3><p>Android 原生的 scheme。当我们在浏览器或者一个应用呼起另一个应用，使用的就是这个机制。</p>
<p>与上一个方法不同的是，这是 Android 原生支持的，我们需要在 manifest 进行注册：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span></span><br><span class="line">    <span class="attribute">android:name</span>=<span class="value">"com.amokie.stay.module.card.ReactCardDetailActivity"</span></span><br><span class="line">    <span class="attribute">android:screenOrientation</span>=<span class="value">"portrait"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.VIEW"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.BROWSABLE"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span></span><br><span class="line">            <span class="attribute">android:host</span>=<span class="value">"card"</span></span><br><span class="line">            <span class="attribute">android:scheme</span>=<span class="value">"stayapp"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>跳转调用更简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(url));</span><br></pre></td></tr></table></figure></p>
<p>参数可以使用类似 url param 的形式，比如：stayapp://feed-detail/?id=1234&amp;guest=true。<br>简单情况下也能直接使用 Rest 形式，即 stayapp://feed-detail/1234，但如此就只能传递一个数据过去了，毕竟 Rest 是一种资源描述。</p>
<h1 id="结">结</h1><p>Software -&gt; Peopleware，在项目逐渐变大后，团队人数变大，需求复杂度上升，组件化的开发形式可以隔绝模块间耦合，降低中大型团队的开发成本，而且编译速度也能提升（独立模块编译运行）。</p>
<p>下一节将会讲到组件化实践中的：</p>
<ul>
<li>底层 library 设计</li>
<li>SharedUserId 共享数据</li>
<li>组件间通讯（Service、EventBus）</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近更新不太频繁，一方面工作上比较忙，除了 Android 也在负责前端，另外周末和深夜也在帮人做 Go 后台、设计技术方案、管进度的事情（因为报酬不错没忍心拒绝，而且确实对个人成长还有帮助），所以实在对不住。</p>
<p>另外，文章最底下有捐款啊，最近真是都没钱吃饭了。]]>
    </summary>
    
      <category term="Gradle" scheme="http://blog.zhaiyifan.cn/tags/Gradle/"/>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="组件化" scheme="http://blog.zhaiyifan.cn/tags/%E7%BB%84%E4%BB%B6%E5%8C%96/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Vue.js 2.0 快速上手 - 基础篇]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/10/17/vue-2-quick-start/"/>
    <id>http://blog.zhaiyifan.cn/2016/10/17/vue-2-quick-start/</id>
    <published>2016-10-17T10:31:47.000Z</published>
    <updated>2016-11-14T15:27:37.000Z</updated>
    <content type="html"><![CDATA[<p>Vue 2.0 出来也有一段时间了，作为一个有志向的全面发展好青年，在征服 Vue 1.x，React，React Native 后，为了之后能更快迁移公司的项目到 Vue 2.x，于是决定先看看 Vue 2.0。</p>
<p>鉴于部分读者可能不了解 Vue，先简单看看各种特性。</p>
<p>本文假设你有一定的 HTML 基础，并熟悉一种或以上编程语言（那就能看懂 JS 了）。</p>
<h1 id="模板语法">模板语法</h1><p>Vue 提供了一堆数据绑定语法。</p>
<ul>
<li>{{ text }} 文本插值</li>
<li>`<div v-html="html"></div>` HTML 输出</li>
<li>v-bind HTML 属性插值。如<code>&lt;button v-bind:disabled=&quot;someDynamicCondition&quot;&gt;Button&lt;/button&gt;</code></li>
<li>JavaScript 表达式。直接在 mustache、属性插值里面使用各种表达式（加减乘除、三元运算、方法调用等）。</li>
<li>过滤器（有点类似 Shell 命令中的管道，可以定义过滤器来对原始值进行变化）。</li>
<li>指令。之前提到的 v-bind 也是一种指定，其他包括 v-on: 系列（dom 事件的监听）、v-for、v-model等。</li>
</ul>
<h1 id="Vue_实例">Vue 实例</h1><p>Vue 实例，实则也就是 ViewModel（数据 + 函数），都是通过构造函数 Vue 创建的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = &#123; a: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: data,</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a is: '</span> + <span class="keyword">this</span>.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.$data === data <span class="comment">// -&gt; true</span></span><br><span class="line">vm.$el === <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>) <span class="comment">// -&gt; true</span></span><br><span class="line"><span class="comment">// $watch 是一个实例方法</span></span><br><span class="line">vm.$watch(<span class="string">'a'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这个回调会在 `vm.a` 改变的时候触发</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Vue 实例都有自己的生命周期，比如 created, mounted, updated 以及 destroyed。所有方法被 called 的时候，this 都指向所在的 Vue 实例。</p>
<p>Lifecycle 图如下：<br><img src="https://vuejs.org/images/lifecycle.png" alt="lifecycle"></p>
<h1 id="计算属性和监听器">计算属性和监听器</h1><h2 id="计算属性">计算属性</h2><p>其实就是一个需要计算的 getter：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Original message: "&#123;&#123; message &#125;&#125;"<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Computed reversed message: "&#123;&#123; reversedMessage &#125;&#125;"<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// 一个 computed getter</span></span><br><span class="line">    reversedMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure>
<p>和使用 method 的区别在于，计算属性根据它的依赖被缓存，即如果 message 没有被修改，下次 get 不会进行重复计算，而 method 则每次调用都会重新计算。这也意味着如 Date.now() 这样返回的计算属性会永远得不到更新。</p>
<h3 id="Setter">Setter</h3><p>默认情况下，计算属性只有一个 getter，我们也可以给它加上 setter：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">computed: &#123;</span><br><span class="line">  fullName: &#123;</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>)</span><br><span class="line">      <span class="keyword">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如此，当我们调用 <code>vm.fullName = &#39;MarkZhai&#39;</code> 的时候，firstName 和 lastName 都会被更新。</p>
<h2 id="监听器">监听器</h2><p>Vue 的 watch 也可以用来做类似的事：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"demo"</span>&gt;</span>&#123;&#123; fullName &#125;&#125;<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Foo'</span>,</span><br><span class="line">    lastName: <span class="string">'Bar'</span>,</span><br><span class="line">    fullName: <span class="string">'Foo Bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    firstName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = val + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;,</span><br><span class="line">    lastName: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.fullName = <span class="keyword">this</span>.firstName + <span class="string">' '</span> + val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>对比一下计算属性版本：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#demo'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    firstName: <span class="string">'Foo'</span>,</span><br><span class="line">    lastName: <span class="string">'Bar'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    fullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>看上去好像简单了很多，那还要 Watcher 干啥呢。。。主要应用场景是异步或耗时操作：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://unpkg.com/axios@0.12.0/dist/axios.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"https://unpkg.com/lodash@4.13.1/lodash.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="actionscript"></span><br><span class="line"><span class="keyword">var</span> watchExampleVM = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#watch-example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    question: <span class="string">''</span>,</span><br><span class="line">    answer: <span class="string">'I cannot give you an answer until you ask a question!'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    <span class="comment">// 只要 question 改变，这个函数就会执行</span></span><br><span class="line">    question: <span class="function"><span class="keyword">function</span> <span class="params">(newQuestion)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.answer = <span class="string">'Waiting for you to stop typing...'</span></span><br><span class="line">      <span class="keyword">this</span>.getAnswer()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">// _.debounce is a function provided by lodash to limit how</span></span><br><span class="line">    <span class="comment">// often a particularly expensive operation can be run.</span></span><br><span class="line">    <span class="comment">// In this case, we want to limit how often we access</span></span><br><span class="line">    <span class="comment">// yesno.wtf/api, waiting until the user has completely</span></span><br><span class="line">    <span class="comment">// finished typing before making the ajax request. To learn</span></span><br><span class="line">    <span class="comment">// more about the _.debounce function (and its cousin</span></span><br><span class="line">    <span class="comment">// _.throttle), visit: https://lodash.com/docs#debounce</span></span><br><span class="line">    getAnswer: _.debounce(</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> vm = <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.question.indexOf(<span class="string">'?'</span>) === -<span class="number">1</span>) &#123;</span><br><span class="line">          vm.answer = <span class="string">'Questions usually contain a question mark. ;-)'</span></span><br><span class="line">          <span class="keyword">return</span></span><br><span class="line">        &#125;</span><br><span class="line">        vm.answer = <span class="string">'Thinking...'</span></span><br><span class="line">        axios.<span class="keyword">get</span>(<span class="string">'https://yesno.wtf/api'</span>)</span><br><span class="line">          .then(<span class="function"><span class="keyword">function</span> <span class="params">(response)</span> </span>&#123;</span><br><span class="line">            vm.answer = _.capitalize(response.data.answer)</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="keyword">catch</span>(<span class="function"><span class="keyword">function</span> <span class="params">(error)</span> </span>&#123;</span><br><span class="line">            vm.answer = <span class="string">'Error! Could not reach the API. '</span> + error</span><br><span class="line">          &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 等待用户停止输入后的时间（毫秒）</span></span><br><span class="line">      <span class="number">500</span></span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>如此，使用 watch 让我们可以进行异步操作（访问 API），限制操作间隔，并设置中间状态直到获得了真正的答案。</p>
<p>除了使用 watch option，也可以用 <a href="https://vuejs.org/api/#vm-watch" target="_blank" rel="external">vm.$watch</a> API。</p>
<h1 id="Class_和_Style_绑定">Class 和 Style 绑定</h1><p>除了数据绑定，常见的还有 style、class 的绑定（正如很久以前在 JQuery 中常用的）。</p>
<h2 id="对象语法">对象语法</h2><p>我们可以传递一个对象给 <code>v-bind:class</code> 来动态切换 classes：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"static"</span></span><br><span class="line">     <span class="attribute">v-bind:class</span>=<span class="value">"&#123; active: isActive, 'text-danger': hasError &#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对应的 active 和 text-danger 则通过 data 传递过来。</p>
<p>我们也可直接通过 data 把 class 传递过来</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">v-bind:class</span>=<span class="value">"classObject"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  classObject: &#123;</span><br><span class="line">    active: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'text-danger'</span>: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当然我们也能使用上面提到的 computed 来进行对应属性，如 active 的计算。</p>
<h2 id="数组语法">数组语法</h2><p>可以直接传递一个数组给 v-bind:class:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">v-bind:class</span>=<span class="value">"[activeClass, errorClass]"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  activeClass: <span class="string">'active'</span>,</span><br><span class="line">  errorClass: <span class="string">'text-danger'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也可以写成</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">v-bind:class</span>=<span class="value">"[isActive ? activeClass : '', errorClass]"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">v-bind:class</span>=<span class="value">"[&#123; active: isActive &#125;, errorClass]"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="绑定内联样式">绑定内联样式</h2><p>跟 class 差不多：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">v-bind:style</span>=<span class="value">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>或者直接绑定到 style：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div v-bind:style=<span class="string">"styleObject"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  styleObject: &#123;</span><br><span class="line">    color: 'red',</span><br><span class="line">    fontSize: '13px'</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p>类似的，也有数组绑定。</p>
<h1 id="条件绑定">条件绑定</h1><h2 id="v-if">v-if</h2><p>其实就是个标签啦</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h1</span> <span class="attribute">v-if</span>=<span class="value">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">h1</span> <span class="attribute">v-if</span>=<span class="value">"ok"</span>&gt;</span>Yes<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">h1</span> <span class="attribute">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>因为 <code>v-if</code> 必须附加到一个单一 element 上，那如果我们想切换多个元素呢？可以使用 <code>template</code> 元素：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">template</span> <span class="attribute">v-if</span>=<span class="value">"ok"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Title<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Paragraph 1<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Paragraph 2<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">template</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="v-show">v-show</h2><p>也可以用 <code>v-show</code> 来做条件显示的逻辑，</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">h1</span> <span class="attribute">v-show</span>=<span class="value">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>区别在于</p>
<ul>
<li><code>v-show</code> 不支持 <code>template</code> 和 <code>v-else</code></li>
<li><code>v-if</code> 是 <strong>lazy</strong> 的，不会渲染没有走到的条件。而 <code>v-show</code> 只是简单的基于 CSS 的切换。所以 <code>v-show</code> 的初始 render 代价较高。</li>
<li>由于 <code>v-if</code> 是真实的渲染，切换后原来的 dom 会被 destroyed，而新的 dom 会被重新创建。所以切换代价更高。</li>
</ul>
<p>所以如果切换得较为频繁可以使用 <code>v-show</code>，如果在运行时不太会改变则可以使用 <code>v-if</code>。</p>
<h1 id="列表渲染">列表渲染</h1><h2 id="v-for">v-for</h2><p>其实就是个循环标签啦:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"example-2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span> <span class="attribute">v-for</span>=<span class="value">"(item, index) in items"</span>&gt;</span></span><br><span class="line">    &#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; - &#123;&#123; item.message &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>对应的 vm 实例:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example-2'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    parentMessage: <span class="string">'Parent'</span>,</span><br><span class="line">    items: [</span><br><span class="line">      &#123; message: <span class="string">'Foo'</span> &#125;,</span><br><span class="line">      &#123; message: <span class="string">'Bar'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="模板_v-for">模板 v-for</h2><p>跟 <code>v-if</code> 类似，我们也能在 <code>template</code> 上使用 <code>v-for</code>:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">template</span> <span class="attribute">v-for</span>=<span class="value">"item in items"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span>&gt;</span>&#123;&#123; item.msg &#125;&#125;<span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span> <span class="attribute">class</span>=<span class="value">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="对象_v-for">对象 v-for</h2><p>也能使用 <code>v-for</code> 遍历对象的属性：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"repeat-object"</span> <span class="attribute">class</span>=<span class="value">"demo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">li</span> <span class="attribute">v-for</span>=<span class="value">"value in object"</span>&gt;</span></span><br><span class="line">    &#123;&#123; value &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#repeat-object'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    object: &#123;</span><br><span class="line">      FirstName: <span class="string">'John'</span>,</span><br><span class="line">      LastName: <span class="string">'Doe'</span>,</span><br><span class="line">      Age: <span class="number">30</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>看到 value，那肯定还有 key 了：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">v-for</span>=<span class="value">"(value, key) in object"</span>&gt;</span></span><br><span class="line">  &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果再加上 index:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">v-for</span>=<span class="value">"(value, key, index) in object"</span>&gt;</span></span><br><span class="line">  &#123;&#123; index &#125;&#125;. &#123;&#123; key &#125;&#125; : &#123;&#123; value &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>其他还有像是 <code>v-for=&quot;n in 10&quot;</code> 这种用法，就不加上例子了。</p>
<h2 id="组件_v-for">组件 v-for</h2><p>input 输出内容到 newTodoText，每次点击 enter 都会触发 addNewTodo，然后添加 item 到 todos，触发新的 li 添加进去:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"todo-list-example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span></span><br><span class="line">    <span class="attribute">v-model</span>=<span class="value">"newTodoText"</span></span><br><span class="line">    <span class="attribute">v-on:keyup.enter</span>=<span class="value">"addNewTodo"</span></span><br><span class="line">    <span class="attribute">placeholder</span>=<span class="value">"Add a todo"</span></span><br><span class="line">  &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span></span><br><span class="line">      <span class="attribute">is</span>=<span class="value">"todo-item"</span></span><br><span class="line">      <span class="attribute">v-for</span>=<span class="value">"(todo, index) in todos"</span></span><br><span class="line">      <span class="attribute">v-bind:title</span>=<span class="value">"todo"</span></span><br><span class="line">      <span class="attribute">v-on:remove</span>=<span class="value">"todos.splice(index, 1)"</span></span><br><span class="line">    &gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'todo-item'</span>, &#123;</span><br><span class="line">  template: <span class="string">'\</span><br><span class="line">    &lt;li&gt;\</span><br><span class="line">      &#123;&#123; title &#125;&#125;\</span><br><span class="line">      &lt;button v-on:click="$emit(\'remove\')"&gt;X&lt;/button&gt;\</span><br><span class="line">    &lt;/li&gt;\</span><br><span class="line">  '</span>,</span><br><span class="line">  props: [<span class="string">'title'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#todo-list-example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    newTodoText: <span class="string">''</span>,</span><br><span class="line">    todos: [</span><br><span class="line">      <span class="string">'Do the dishes'</span>,</span><br><span class="line">      <span class="string">'Take out the trash'</span>,</span><br><span class="line">      <span class="string">'Mow the lawn'</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addNewTodo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.todos.push(<span class="keyword">this</span>.newTodoText)</span><br><span class="line">      <span class="keyword">this</span>.newTodoText = <span class="string">''</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="key">key</h2><p>当 vue 在更新被 v-for 渲染的列表时候，会使用就地 patch 的策略，而不是根据元素改变的顺序。我们可以提供 key 来做这个排序：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">v-for</span>=<span class="value">"item in items"</span> <span class="attribute">:key</span>=<span class="value">"item.id"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- content --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如此，item 会根据 id 来做排序。</p>
<h2 id="数组改变监测">数组改变监测</h2><h3 id="替换方法（mutation）">替换方法（mutation）</h3><ul>
<li>push()</li>
<li>pop()</li>
<li>shift()</li>
<li>unshift()</li>
<li>splice()</li>
<li>sort()</li>
<li>reverse()</li>
</ul>
<p>这些方法会改变原来的 array，并自动触发 view 的更新。</p>
<h3 id="替换_array">替换 array</h3><ul>
<li>filter()</li>
<li>concat()</li>
<li>slice()</li>
</ul>
<p>这几个方法会返回新的 array，如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">example1.items = example1.items.filter(<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.message.match(<span class="regexp">/Foo/</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="附加说明">附加说明</h2><p>如果</p>
<ul>
<li>直接 set array 的值，如 vm.items[indexOfItem] = newValue</li>
<li>修改 array 的长度，如 vm.items.length = newLength</li>
</ul>
<p>都是没法触发更新的，需要使用</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.set(example1.items, indexOfItem, newValue)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Array.prototype.splice`</span></span><br><span class="line">example1.items.splice(indexOfItem, <span class="number">1</span>, newValue)</span><br><span class="line"></span><br><span class="line">example1.items.splice(newLength)</span><br></pre></td></tr></table></figure>
<h2 id="过滤/排序">过滤/排序</h2><p>配合 computed 以及 filter，或者也可以使用 v-for 的条件渲染：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;li v-for="n in even(numbers)"&gt;&#123;&#123; n &#125;&#125;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">  numbers: [ 1, 2, 3, 4, 5 ]</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">  even: function (numbers) &#123;</span><br><span class="line">    return numbers.filter(function (number) &#123;</span><br><span class="line">      return number % 2 === 0</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="事件处理">事件处理</h1><h2 id="监听事件">监听事件</h2><p>使用 <code>v-on</code> 指令监听 DOM 的各种事件，如：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"example-1"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">v-on:click</span>=<span class="value">"counter += 1"</span>&gt;</span>Add 1<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>The button above has been clicked &#123;&#123; counter &#125;&#125; times.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example1 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example-1'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    counter: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>除了直接写 JS 语句，也可以直接在 v-on 中调用 methods 中定义的事件，还可以进行传参：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"example-3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">v-on:click</span>=<span class="value">"say('hi')"</span>&gt;</span>Say hi<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">v-on:click</span>=<span class="value">"say('what')"</span>&gt;</span>Say what<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example-3'</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    say: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">      alert(message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>我们可能也希望直接把 event 给传递到方法中（比如在方法里 preventDefault 或者 stopPropagation），也很 easy，直接使用特殊的 $event 变量就行了。</p>
<h2 id="事件修饰符">事件修饰符</h2><p>除了像上面这样，在 method 里面对 event 进行操作，我们还可以使用事件修饰符（Event Modifier）：</p>
<ul>
<li>.stop</li>
<li>.prevent</li>
<li>.capture</li>
<li>.self</li>
</ul>
<p>使用如：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- the click event's propagation will be stopped --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">v-on:click.stop</span>=<span class="value">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- the submit event will no longer reload the page --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">v-on:submit.prevent</span>=<span class="value">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- modifiers can be chained --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">a</span> <span class="attribute">v-on:click.stop.prevent</span>=<span class="value">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- just the modifier --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">form</span> <span class="attribute">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- use capture mode when adding the event listener --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">v-on:click.capture</span>=<span class="value">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- only trigger handler if event.target is the element itself --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- i.e. not from a child element --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">v-on:click.self</span>=<span class="value">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Key_修饰符">Key 修饰符</h2><p>通用的有使用 keyCode 的:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">v-on:keyup.13</span>=<span class="value">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>其他 alias 别名有</p>
<ul>
<li>enter</li>
<li>tab</li>
<li>delete (captures both “Delete” and “Backspace” keys)</li>
<li>esc</li>
<li>space</li>
<li>up</li>
<li>down</li>
<li>left</li>
<li>right</li>
</ul>
<p>我们也可以自己通过全局的 config 定义其他别名，如:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// enable v-on:keyup.f1</span></span><br><span class="line">Vue.config.keyCodes.f1 = <span class="number">112</span></span><br></pre></td></tr></table></figure></p>
<h1 id="表单输入绑定">表单输入绑定</h1><h2 id="基本使用">基本使用</h2><h3 id="text">text</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">v-model</span>=<span class="value">"message"</span> <span class="attribute">placeholder</span>=<span class="value">"edit me"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如此，用户的输入会直接反映到 data 中的 message，然后更新到 </p><p>。</p>
<p>多行的用 <code>textarea</code> 替换 <code>input</code> 就行了。</p>
<h3 id="Checkbox">Checkbox</h3><p>单个的:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">id</span>=<span class="value">"checkbox"</span> <span class="attribute">v-model</span>=<span class="value">"checked"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"checkbox"</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>多个的则可以绑到一个 array :<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">id</span>=<span class="value">"jack"</span> <span class="attribute">value</span>=<span class="value">"Jack"</span> <span class="attribute">v-model</span>=<span class="value">"checkedNames"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"jack"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">id</span>=<span class="value">"john"</span> <span class="attribute">value</span>=<span class="value">"John"</span> <span class="attribute">v-model</span>=<span class="value">"checkedNames"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"john"</span>&gt;</span>John<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">id</span>=<span class="value">"mike"</span> <span class="attribute">value</span>=<span class="value">"Mike"</span> <span class="attribute">v-model</span>=<span class="value">"checkedNames"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"mike"</span>&gt;</span>Mike<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Radio">Radio</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">id</span>=<span class="value">"one"</span> <span class="attribute">value</span>=<span class="value">"One"</span> <span class="attribute">v-model</span>=<span class="value">"picked"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"one"</span>&gt;</span>One<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">id</span>=<span class="value">"two"</span> <span class="attribute">value</span>=<span class="value">"Two"</span> <span class="attribute">v-model</span>=<span class="value">"picked"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">label</span> <span class="attribute">for</span>=<span class="value">"two"</span>&gt;</span>Two<span class="tag">&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="Select">Select</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">v-model</span>=<span class="value">"selected"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span>&gt;</span>A<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span>&gt;</span>B<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span>&gt;</span>C<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line"> Selected: C</span><br></pre></td></tr></table></figure>
<p>多选的在 select 后面加个 multiple，然后对应的会绑定到数组。</p>
<p>还可以结合 <code>v-for</code> 进行动态渲染：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">v-model</span>=<span class="value">"selected"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span> <span class="attribute">v-for</span>=<span class="value">"option in options"</span> <span class="attribute">v-bind:value</span>=<span class="value">"option.value"</span>&gt;</span></span><br><span class="line">    &#123;&#123; option.text &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">span</span>&gt;</span>Selected: &#123;&#123; selected &#125;&#125;<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'...'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    selected: <span class="string">'A'</span>,</span><br><span class="line">    options: [</span><br><span class="line">      &#123; text: <span class="string">'One'</span>, value: <span class="string">'A'</span> &#125;,</span><br><span class="line">      &#123; text: <span class="string">'Two'</span>, value: <span class="string">'B'</span> &#125;,</span><br><span class="line">      &#123; text: <span class="string">'Three'</span>, value: <span class="string">'C'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="值绑定">值绑定</h2><p>默认地，像上面这样，最后 v-model 绑定到的对象，其值会是一个 静态字符串（或者 true/false），有时候我们想要将其值绑定到一个动态属性，就可以使用 <code>v-bind</code> 来达到目的。</p>
<p>比如对于 input:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span></span><br><span class="line">  <span class="attribute">type</span>=<span class="value">"checkbox"</span></span><br><span class="line">  <span class="attribute">v-model</span>=<span class="value">"toggle"</span></span><br><span class="line">  <span class="attribute">v-bind:true-value</span>=<span class="value">"a"</span></span><br><span class="line">  <span class="attribute">v-bind:false-value</span>=<span class="value">"b"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// when checked:</span></span><br><span class="line">vm.toggle === vm.a</span><br><span class="line"><span class="comment">// when unchecked:</span></span><br><span class="line">vm.toggle === vm.b</span><br></pre></td></tr></table></figure>
<p>甚至对象:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">select</span> <span class="attribute">v-model</span>=<span class="value">"selected"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- inline object literal --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">option</span> <span class="attribute">v-bind:value</span>=<span class="value">"&#123; number: 123 &#125;"</span>&gt;</span>123<span class="tag">&lt;/<span class="title">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">select</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// when selected:</span></span><br><span class="line"><span class="keyword">typeof</span> vm.selected <span class="comment">// -&gt; 'object'</span></span><br><span class="line">vm.selected.number <span class="comment">// -&gt; 123</span></span><br></pre></td></tr></table></figure>
<h2 id="修饰符">修饰符</h2><h3 id="-lazy">.lazy</h3><p>默认地，v-model 在每次 input 事件后都会同步输入到数据。加上 lazy 修饰符后就会在 change 事件后才同步:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">v-model.lazy</span>=<span class="value">"msg"</span> &gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="-number">.number</h3><p>会自动把输入转为 number:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">v-model.number</span>=<span class="value">"age"</span> <span class="attribute">type</span>=<span class="value">"number"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这还是挺有用的，因为就算限制了 input 的 type 为 number，元素的 value 仍然会返回 string。</p>
<h3 id="-trim">.trim</h3><p>好像不用多说了？大家都懂吧。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">v-model.trim</span>=<span class="value">"msg"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="组件">组件</h1><p>现代的前端框架，通常都是组件化的了。整个应用的搭建，其实就是组件的拼接。自然 Vue 也不会忘了这个。</p>
<h2 id="使用组件">使用组件</h2><h3 id="注册">注册</h3><p>注册一个全局组件，只需要 <code>Vue.component(tagName, options)</code> 即可，如:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  <span class="comment">// options</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>实际渲染出来的 dom 则定义在 template option 中，如:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注册</span></span><br><span class="line">Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 创建一个根实例</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<h3 id="局部注册">局部注册</h3><p>局部注册只需要放在 Vue 实例中:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Child = &#123;</span><br><span class="line">  template: <span class="string">'&lt;div&gt;A custom component!&lt;/div&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  components: &#123;</span><br><span class="line">    <span class="comment">// &lt;my-component&gt; 只在父亲的模板里可用</span></span><br><span class="line">    <span class="string">'my-component'</span>: Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>使用则像:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">my-component</span>&gt;</span><span class="tag">&lt;/<span class="title">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="Dom_模板解析限制">Dom 模板解析限制</h3><p>当使用 Dom 作为模板（比如使用 <code>el</code> 选项来使用已有内容加载元素），将会受到一些因为 HTML 工作原理而导致的限制，因为 Vue 只能在浏览器解析后才获取模板数据并进行处理。比如 <table> 中将不能出现自定义组件，只能通过 is 特殊属性进行规避。</table></p>
<p>可以通过以下方法使用字符串模板，就不会有这些限制：</p>
<ul>
<li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></li>
<li>JavaScript 内联模板字符串</li>
<li>.vue 组件</li>
</ul>
<p>所以，尽量使用字符串模板（string templates）吧。</p>
<h3 id="data_必须是函数">data 必须是函数</h3><p>大部分被传进 Vue 构造函数的选项都能在组件内使用，除了一个特殊情况：data 必须是函数。</p>
<p>如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    counter: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>而不能是一个在 parent context 的 var（会被多个组件实例共享）或者 object（控制台会报错）。</p>
<h3 id="组合组件">组合组件</h3><p>组件通常会被一起使用，大部分情况下会有 父——子 关系，如 组件A 在其模板中使用了 组件B。如此，就不免会有相互间的通讯，父亲需要传递数据给儿子，而儿子则需要通知父亲其内部发生的某些事件。</p>
<p>然而，为了让组件能避免耦合从而提高复用性和可维护性，又需要使它们相对隔离。</p>
<p>在 Vue.js 中，这种 父——子 组件关系可以被总结为 <strong>props down, events up</strong>，即父组件通过 props 传递数据给子组件，而子组件通过 event 发消息给父组件。</p>
<p><img src="https://vuejs.org/images/props-events.png" alt="props-events"></p>
<p>熟悉 React 的话，你可能会想到 props 和 state。</p>
<h2 id="props">props</h2><h3 id="通过_props_传递数据">通过 props 传递数据</h3><p>每个组件都是相互隔离的，所以无法在子组件的 template 中引用父组件的数据。数据只能通过 props 传递。</p>
<p>比如我们可以这么注册子组件:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'child'</span>, &#123;</span><br><span class="line">  <span class="comment">// 申明 props</span></span><br><span class="line">  props: [<span class="string">'message'</span>],</span><br><span class="line">  <span class="comment">// 跟 data 一样，可以在 vm (this.message) 和 template 中直接使用</span></span><br><span class="line">  template: <span class="string">'&lt;span&gt;&#123;&#123; message &#125;&#125;&lt;/span&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>然后如此传递 props:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">child</span> <span class="attribute">message</span>=<span class="value">"hello!"</span>&gt;</span><span class="tag">&lt;/<span class="title">child</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="camelCase_vs-_kebab-case">camelCase vs. kebab-case</h3><p>因为 HTML 属性的限制（大小写敏感），所以使用 non-string templates 时，camelCased 的属性必须使用对应的 kebab-case 版本:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'child'</span>, &#123;</span><br><span class="line">  <span class="comment">// camelCase in JavaScript</span></span><br><span class="line">  props: [<span class="string">'myMessage'</span>],</span><br><span class="line">  template: <span class="string">'&lt;span&gt;&#123;&#123; myMessage &#125;&#125;&lt;/span&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">child</span> <span class="attribute">my-message</span>=<span class="value">"hello!"</span>&gt;</span><span class="tag">&lt;/<span class="title">child</span>&gt;</span></span><br><span class="line">Again, if you’re using string templates, then this limitation does not apply.</span><br></pre></td></tr></table></figure>
<p>所以都说了，用字符串模板吧。</p>
<h3 id="动态_props">动态 props</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">v-model</span>=<span class="value">"parentMsg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">child</span> <span class="attribute">v-bind:my-message</span>=<span class="value">"parentMsg"</span>&gt;</span><span class="tag">&lt;/<span class="title">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如此，my-message 在父组件被改变的时候，都会传递更新到子组件。</p>
<h3 id="字面量语法_vs_动态语法">字面量语法 vs 动态语法</h3><p>当我们使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">comp</span> <span class="attribute">some-prop</span>=<span class="value">"1"</span>&gt;</span><span class="tag">&lt;/<span class="title">comp</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>的时候，实际传递的是一个字符串，而不是 number 2，如果要传递 JavaScript number，则需要使用 <code>v-bind</code><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">comp</span> <span class="attribute">v-bind:some-prop</span>=<span class="value">"1"</span>&gt;</span><span class="tag">&lt;/<span class="title">comp</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="单向数据流">单向数据流</h3><p>所有的 props 都是单向往下的，父组件 property 更新会影响子组件的，反过来则不会。这样避免了子组件误更改父组件状态，以及应用数据流难以理解。</p>
<p>另外，每次父组件中对应属性发生改变，子组件中的所有 props 都会被更新为最新的值。所以在子组件中，不应该对 props 进行更改。</p>
<p>你可能会辩解说传进来的只是个初始值，或者是个需要计算才能得出真正要的格式的值，但对前者你应该使用本地 data 属性来引用初始值，后者则应该通过 computed 来做。</p>
<h3 id="prop_检查">prop 检查</h3><p>可以对组件接受的 props 定义要求，如:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'example'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基本类型检查 (`null` 表示接受任何类型)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多种可能的类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 一个必须的 string</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 一个带默认值的 number</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 对象/数组的默认值须通过一个工厂方法返回</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; message: <span class="string">'hello'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义检验器函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt; <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="自定义事件">自定义事件</h2><p>我们已经学习了父组件如何传递属性给子组件，那子组件怎么向上发送数据呢？答案就是自定义事件。</p>
<h3 id="使用_v-on">使用 v-on</h3><p>所有 Vue 实例都实现了 <a href="https://vuejs.org/api/#Instance-Methods-Events" target="_blank" rel="external">Events 接口</a>，即：</p>
<ul>
<li>通过 $on(eventName) 监听事件</li>
<li>通过 $emit(eventName) 触发事件</li>
</ul>
<p>如此，我们可以这样来传递事件（定义了 2 个 button，可以发送 increment 事件给父组件触发 incrementTotal）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"counter-event-example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>&#123;&#123; total &#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button-counter</span> <span class="attribute">v-on:increment</span>=<span class="value">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="title">button-counter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button-counter</span> <span class="attribute">v-on:increment</span>=<span class="value">"incrementTotal"</span>&gt;</span><span class="tag">&lt;/<span class="title">button-counter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'button-counter'</span>, &#123;</span><br><span class="line">  template: <span class="string">'&lt;button v-on:click="increment"&gt;&#123;&#123; counter &#125;&#125;&lt;/button&gt;'</span>,</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      counter: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    increment: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.counter += <span class="number">1</span></span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'increment'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#counter-event-example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    total: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    incrementTotal: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.total += <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="表单输入">表单输入</h3><p>有时候在组件中，我们会有输入，比如 input，其实 input 中的 <code>v-model</code> 就是:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">v-bind:value</span>=<span class="value">"something"</span> <span class="attribute">v-on:input</span>=<span class="value">"something = $event.target.value"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>的一个语法糖。</p>
<p>类似地，为了让组件支持 <code>v-model</code>，它必须：</p>
<ul>
<li>接受 value prop</li>
<li>用新的值发送一个 input 事件</li>
</ul>
<p>让我们来看看实践<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"v-model-example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">my-input</span></span><br><span class="line">    <span class="attribute">label</span>=<span class="value">"Message"</span></span><br><span class="line">    <span class="attribute">v-model</span>=<span class="value">"message"</span></span><br><span class="line">  &gt;</span><span class="tag">&lt;/<span class="title">my-input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'my-input'</span>, &#123;</span><br><span class="line">  template: <span class="string">'\</span><br><span class="line">    &lt;div class="form-group"&gt;\</span><br><span class="line">      &lt;label v-bind:for="randomId"&gt;&#123;&#123; label &#125;&#125;:&lt;/label&gt;\</span><br><span class="line">      &lt;input v-bind:id="randomId" v-bind:value="value" v-on:input="onInput"&gt;\</span><br><span class="line">    &lt;/div&gt;\</span><br><span class="line">  '</span>,</span><br><span class="line">  props: [<span class="string">'value'</span>, <span class="string">'label'</span>],</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      randomId: <span class="string">'input-'</span> + <span class="built_in">Math</span>.random()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    onInput: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, event.target.value)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#v-model-example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'hello'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这个接口不仅能被用在组件内的表单输入，还能被用在你自己发明的各种组件输入，像是:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">voice-recognizer</span> <span class="attribute">v-model</span>=<span class="value">"question"</span>&gt;</span><span class="tag">&lt;/<span class="title">voice-recognizer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">webcam-gesture-reader</span> <span class="attribute">v-model</span>=<span class="value">"gesture"</span>&gt;</span><span class="tag">&lt;/<span class="title">webcam-gesture-reader</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">webcam-retinal-scanner</span> <span class="attribute">v-model</span>=<span class="value">"retinalImage"</span>&gt;</span><span class="tag">&lt;/<span class="title">webcam-retinal-scanner</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="非父子组件通讯">非父子组件通讯</h3><p>有时候两个组件可能需要互相通讯，但却不是父子关系。在简单的场景下，你可以使用一个空的 Vue 实例来作为中央事件总线（event bus）:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var bus = new Vue()</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件 A 的方法中</span></span><br><span class="line">bus.$emit(<span class="string">'id-selected'</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在组件 B 的 created 中</span></span><br><span class="line">bus.$on(<span class="string">'id-selected'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">id</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在更复杂的场景下，你可能需要考虑使用<a href="https://vuejs.org/guide/state-management.html" target="_blank" rel="external">状态管理模式</a>，其实就是 Vuex 了（Vue 版 Redux）。</p>
<h2 id="使用_Slot_分发内容">使用 Slot 分发内容</h2><p>在使用组件的时候，经常会像这样组合:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">app-header</span>&gt;</span><span class="tag">&lt;/<span class="title">app-header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">app-footer</span>&gt;</span><span class="tag">&lt;/<span class="title">app-footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">app</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>有两点需要注意的:</p>
<ul>
<li><app> 组件不知道在其挂载点内可能出现的的内容。这是由使用 <app> 父组件所决定的。</app></app></li>
<li><app> 组件很可能有它自己的模板。</app></li>
</ul>
<p>为了让组件可以组合，我们需要一种方式来混合父组件的内容与子组件自己的模板。这个处理称为内容分发。Vue.js 实现了一个内容分发 API，参照了当前 <a href="https://github.com/w3c/webcomponents/blob/gh-pages/proposals/Slots-Proposal.md" target="_blank" rel="external">Web 组件规范草稿</a> 中 Slot 的 proposal，使用特殊的 <slot> 元素作为原始内容的插槽。</slot></p>
<h3 id="单个Slot">单个Slot</h3><p>直接看例子吧:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h2</span>&gt;</span>I'm the child title<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">slot</span>&gt;</span></span><br><span class="line">    This will only be displayed if there is no content</span><br><span class="line">    to be distributed.</span><br><span class="line">  <span class="tag">&lt;/<span class="title">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>父组件这样使用它:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>I'm the parent title<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">my-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>This is some original content<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>This is some more original content<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>最后渲染出来的结果是:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span>&gt;</span>I'm the parent title<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h2</span>&gt;</span>I'm the child title<span class="tag">&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>This is some original content<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>This is some more original content<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>也就是外面的内容被插入到了slot里面。</p>
<h3 id="具名_Slot">具名 Slot</h3><p>如果你需要多个 slot，也很简单：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">slot</span> <span class="attribute">name</span>=<span class="value">"header"</span>&gt;</span><span class="tag">&lt;/<span class="title">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">slot</span>&gt;</span><span class="tag">&lt;/<span class="title">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">slot</span> <span class="attribute">name</span>=<span class="value">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="title">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>父组件这么使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">app-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">slot</span>=<span class="value">"header"</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span> <span class="attribute">slot</span>=<span class="value">"footer"</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">app-layout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>渲染出来的结果是:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>Here might be a page title<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>A paragraph for the main content.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>And another one.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">p</span>&gt;</span>Here's some contact info<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>在设计需要组合到一起的组件时，内容分发 API 是非常有用的机制。</p>
<h2 id="动态组件">动态组件</h2><p>你可以使用同一个挂载点，并动态地将其切换为其他 Component。只需要使用保留的 <component> 元素并动态绑定到它的 it 属性:</component></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    currentView: <span class="string">'home'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    home: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">    posts: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">    archive: &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">component</span> <span class="attribute">v-bind:is</span>=<span class="value">"currentView"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 当 vm.currentView 改变后 component 类型也会发生改变 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果你希望的话，也可以直接绑定到 component 对象:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Home = &#123;</span><br><span class="line">  template: <span class="string">'&lt;p&gt;Welcome home!&lt;/p&gt;'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    currentView: Home</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="keep-alive">keep-alive</h3><p>如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 keep-alive 指令参数:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">component</span> <span class="attribute">:is</span>=<span class="value">"currentView"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 非活动组件将被缓存 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>更多详情可以看 <a href="https://vuejs.org/api/#keep-alive" target="_blank" rel="external"><keep-alive> 的 API 文档</keep-alive></a>。</p>
<h2 id="其他杂项">其他杂项</h2><h3 id="编写可复用组件">编写可复用组件</h3><p>在写组件的时候，最好想好你是否会在某些其他地方再次用到它。对一些一次性的组件，紧密耦合是没有问题的，但对可复用的组件，就需要定义一个干净的 public 接口，让它上下文无关。</p>
<p>一个 Vue 组件的 API 由 3 者组成 —— props, events, 以及 slots:</p>
<ul>
<li>Props 允许外部环境传递数据到组件内。</li>
<li>Events 允许组件触发外部环境的副效应（side effects）。</li>
<li>Slots 允许外部环境来插入内容到组件的视图结构内。</li>
</ul>
<p>通过 v-bind 和 v-on 的简写语法，template 可以干净简洁地传递意图：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  :foo=<span class="string">"baz"</span></span><br><span class="line">  :bar=<span class="string">"qux"</span></span><br><span class="line">  @event-a=<span class="string">"doThis"</span></span><br><span class="line">  @event-b=<span class="string">"doThat"</span></span><br><span class="line">&gt;</span><br><span class="line">  <span class="xml"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">slot</span>=<span class="value">"icon"</span> <span class="attribute">src</span>=<span class="value">"..."</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span> <span class="attribute">slot</span>=<span class="value">"main-text"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">my-component</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>:foo 是 v-bind:foo 的简写，@event-a 则是 v-on:event-a 的简写。</p>
<h3 id="子组件引用">子组件引用</h3><p>尽管我们有 props 和 events，有时候你可能仍然需要在 JavaScript 中直接操作子组件。为此你必须使用 ref 分配一个 reference ID 给子组件。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">user-profile</span> <span class="attribute">ref</span>=<span class="value">"profile"</span>&gt;</span><span class="tag">&lt;/<span class="title">user-profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = <span class="keyword">new</span> Vue(&#123; el: <span class="string">'#parent'</span> &#125;)</span><br><span class="line"><span class="comment">// 访问子组件实例</span></span><br><span class="line"><span class="keyword">var</span> child = parent.$refs.profile</span><br></pre></td></tr></table></figure>
<p>当 ref 和 v-for 一起使用的时候，你得到的 ref 将会是一个包含了从数据源镜像的数组或者对象。</p>
<p>$refs 只有在组件被渲染后才能获得，而且它不是响应式的。也就意味着只是一个直接子组件操作的逃生口 —— 你应该避免在模板或者 computed 属性中使用 $refs。</p>
<h3 id="异步组件">异步组件</h3><p>在大型应用中，我们需要把 app 分成一个个小块，只在真正需要的时候才去加载组件。为了简化这个，Vue 允许把组件定义为一个工厂方法，并异步去解析组件定义。Vue 仅仅会在组件真正需要被渲染的时候才会去触发该工厂方法，然后把结果缓存下来给以后的再渲染。如：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'async-example'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    resolve(&#123;</span><br><span class="line">      template: <span class="string">'&lt;div&gt;I am async!&lt;/div&gt;'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;, <span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>工厂方法接受一个 resolve 回调，会在从服务器获取到组件定义后被触发。也可以使用 reject(reason) 来指出加载失败了。这里的 setTimeout 只是用来做简单的演示，如何去获取 component 完全取决于你。一个推荐的方法是和 Webpack 的 code-splitting 功能一块儿使用异步组件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'async-webpack-example'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这个特殊的 require 语法会让 Webpack 去自动把你的编译后代码分割成 通过 Ajax 请求加载的 bundles</span></span><br><span class="line">  <span class="built_in">require</span>([<span class="string">'./my-async-component'</span>], resolve)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>也可以在 resolve 方法中返回一个 Promise，比如通过 Webpack 2 + ES2015 语法可以这么做：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(</span><br><span class="line">  <span class="string">'async-webpack-example'</span>,</span><br><span class="line">  () =&gt; System.import(<span class="string">'./my-async-component'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>然后 Browserify 不支持异步组件，拥抱 Webpack 吧。</p>
<h3 id="组件命名规范">组件命名规范</h3><p>在注册的时候，使用是随意的:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">components: &#123;</span><br><span class="line">  <span class="string">'kebab-cased-component'</span>: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  <span class="string">'camelCasedComponent'</span>: &#123; <span class="comment">/* ... */</span> &#125;,</span><br><span class="line">  <span class="string">'TitleCasedComponent'</span>: &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但是在 HTML 模板中，必须使用 kebab-case 的，也就是上面的第一种。但如果是字符串模板（string template）的话，则可以随意使用。如果你的组件不使用 slot 进行属性传递，甚至可以直接写成自闭的（也仅支持字符串模板，因为浏览器不支持自闭合的自定义元素）。</p>
<h3 id="递归组件">递归组件</h3><p>组件可以在它自己的模板中递归自身。然而，他们只能通过 name 选项来这么做：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name: <span class="string">'stack-overflow'</span>,</span><br><span class="line">template: <span class="string">'&lt;div&gt;&lt;stack-overflow&gt;&lt;/stack-overflow&gt;&lt;/div&gt;'</span></span><br></pre></td></tr></table></figure>
<p>像上面这样的组件会陷入 “max stack size exceeded” 错误，所以需要让递归变成条件性的（比如使用 v-if 指令，并最终返回一个 false）。当你在全局通过 Vue.component 注册一个组件的时候，一个全局的 ID 会被自动设置为组件的 name 选项。</p>
<h3 id="内联模板">内联模板</h3><p>当子组件中存在 inline-template 这个特殊属性的时候，它会使用其内容作为模板，而不会把它当做分发内容。如此模板就变得更灵活了。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">my-component</span> <span class="attribute">inline-template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>These are compiled as the component's own template.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Not parent's transclusion content.<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>但是 inline-template 让模板的作用域难以理解，并且不能缓存模板编译结果。最佳实践是通过 template option 在组件内部定义模板，或者在 .vue 文件中的模板元素中定义。</p>
<h3 id="X-Templates">X-Templates</h3><p>另一个在 script 元素内部定义模板的方法是通过 type text/x-template，然后通过 id 引用模板。像这样：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/x-template"</span> <span class="attribute">id</span>=<span class="value">"hello-world-template"</span>&gt;</span><span class="handlebars"><span class="xml"></span><br><span class="line">  <span class="tag">&lt;<span class="title">p</span>&gt;</span>Hello hello hello<span class="tag">&lt;/<span class="title">p</span>&gt;</span></span><br><span class="line"></span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'hello-world'</span>, &#123;</span><br><span class="line">  template: <span class="string">'#hello-world-template'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>在极小的应用或者大型模板的 demo 的时候可能会有用，其他情况下应该尽量避免。因为这样会把它和其他模板定义给隔离开。</p>
<h3 id="v-once_定义简单的静态组件">v-once 定义简单的静态组件</h3><p>在 Vue 里面渲染纯净的 HTML 元素是很快的，但有时候你可能需要一个包含了很多静态内容的组件。这种情况下，你可以通过在根元素加上 v-once 指令确保它只被评估了一次然后就被缓存下来了，像是这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'terms-of-service'</span>, &#123;</span><br><span class="line">  template: <span class="string">'\</span><br><span class="line">    &lt;div v-once&gt;\</span><br><span class="line">      &lt;h1&gt;Terms of Service&lt;/h1&gt;\</span><br><span class="line">      ... 很多静态内容 ...\</span><br><span class="line">    &lt;/div&gt;\</span><br><span class="line">  '</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="Vue_1-x_TO_2-0">Vue 1.x TO 2.0</h1><p>通过使用 <a href="https://github.com/vuejs/vue-migration-helper" target="_blank" rel="external">vue-migration-helper</a> 可以快速扫出需要替换的代码。</p>
<p>主要有以下几类：</p>
<ul>
<li>官方依赖，比如 vue-resource、vue-router（这个升级完接口也改了不少，<a href="http://vuejs.org/guide/migration-vue-router.html#deactivate-deprecated" target="_blank" rel="external">迁移向导</a>）、vue-loader、vue-hot-reload-api、vue-invalidate（还在升级中）等。</li>
<li>第三方库。</li>
<li>UI组件库，比如 vux（目前计划是11月发布适配 2.0 的版本）、饿了么前端提供的那些（并没有给出更新计划）。</li>
<li>组件间通讯，不能再使用 dispatch，而需要使用全局 eventbus 或者 vuex。</li>
<li>各种 API 废弃，见 <a href="https://github.com/vuejs/vue/issues/2873" target="_blank" rel="external">issue 2873</a>，像是 attached、activated 这些生命周期 API 都被干掉了。</li>
</ul>
<p>具体一点的话，像是</p>
<h2 id="index">index</h2><p>$index 现在必须使用 index 了（在 v-for 中显示声明）</p>
<h2 id="filters">filters</h2><p>不能像以前那样到处用了，只在{{}}中生效，转而用计算属性或者方法吧。</p>
<h2 id="transition">transition</h2><p>transition 属性被废弃了。可以看看新的 <a href="https://vuejs.org/guide/transitions.html" target="_blank" rel="external">Transitions 文档</a>。</p>
<h2 id="vue_router">vue router</h2><p>加了全局和离开当前页面的钩子，router-link，router data，等等。</p>
<p>等等等等，要升级还是挺痛苦的。啊，对了 vuex 也升级到 2.0 了。更像 redux 了。心情很复杂</p>
<h1 id="尾声">尾声</h1><p>差不多也就是这样了。如果你是一个有一定经验并懂得基本 HTML 和 CSS 的高级工程师，我相信几天你就能看完并上手它了，毕竟对比 React 那一整套东西，还是相对简单的。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Vue 2.0 出来也有一段时间了，作为一个有志向的全面发展好青年，在征服 Vue 1.x，React，React Native 后，为了之后能更快迁移公司的项目到 Vue 2.x，于是决定先看看 Vue 2.0。</p>
<p>鉴于部分读者可能不了解 Vue，先简单看看各]]>
    </summary>
    
      <category term="JavaScript" scheme="http://blog.zhaiyifan.cn/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="http://blog.zhaiyifan.cn/tags/Vue-js/"/>
    
      <category term="前端" scheme="http://blog.zhaiyifan.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Frontend" scheme="http://blog.zhaiyifan.cn/categories/Frontend/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[记一次 Data Binding 在 library module 中遇到的大坑]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/10/11/data-binding-in-library-module/"/>
    <id>http://blog.zhaiyifan.cn/2016/10/11/data-binding-in-library-module/</id>
    <published>2016-10-11T08:40:10.000Z</published>
    <updated>2016-10-10T16:17:11.000Z</updated>
    <content type="html"><![CDATA[<p>使用 Data Binding 也有半年多了，从最初的 setVariable，替换 findViewById，到比较高级的双向绑定，自定义 Adapter、Component，查看源码了解编译、运行流程，也算是小有成果，且没有碰到 Data Binding 本身实现上的问题。</p>
<p>然而，最近在一次重构组件化（见 MDCC 上冯森林的《回归初心，从容器化到组件化》）的过程中，碰到了一个比较严重的 BUG。已经提交 issue（<a href="https://code.google.com/p/android/issues/detail?id=224028&amp;thanks=224028&amp;ts=1475156801" target="_blank" rel="external">#224048</a>）到了 AOSP，虽然改起来是不麻烦，但是因为是 gradle plugin，所以 - -，还是让 Google 自己来吧。希望能早日修复。</p>
<h1 id="Library_module_生成_class">Library module 生成 class</h1><p>在 library module 下启用 Data Binding 很简单，跟 application module 一样，加上: </p>
<figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">android &#123;	</span><br><span class="line">    dataBinding &#123;</span><br><span class="line">        enabled = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应生成的 binding 类会在 manifest 里面指定的 package name 下的 databinding 包下。</p>
<h1 id="坑">坑</h1><p>于是坑的地方就在这里了，编译不过了…</p>
<p>为啥呢？报错说 symbol 找不到…于是在 module 的 build 下查看生成的 Binding 类…卧槽？！怎么是 abstract 的？怎么都找不到那些 get 方法了？虽然我也不知道为什么我们会从 binding 类里面去拿之前 set 进去的 ViewModel。</p>
<p>WTF?!</p>
<h1 id="What_happened">What happened</h1><p>Fuck 归 fuck，究竟怎么回事还是要研究一下的。</p>
<p>是我们姿势错了？Dagger2 生成哪里出问题了？还是 Data Binding 的 bug 呢？</p>
<p>因为之前也研究过 data binding 生成部分的代码，所以找到问题所在没有花太多时间，这里不多啰嗦，直接看对应位置。</p>
<p>在 <code>CompilerChief</code> 的 <code>writeViewBinderInterfaces</code> 中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeViewBinderInterfaces</span><span class="params">(<span class="keyword">boolean</span> isLibrary)</span> </span>&#123;</span><br><span class="line">    ensureDataBinder();</span><br><span class="line">    mDataBinder.writerBaseClasses(isLibrary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应 <code>DataBinder</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writerBaseClasses</span><span class="params">(<span class="keyword">boolean</span> isLibrary)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (LayoutBinder layoutBinder : mLayoutBinders) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Scope.enter(layoutBinder);</span><br><span class="line">            <span class="keyword">if</span> (isLibrary || layoutBinder.hasVariations()) &#123;</span><br><span class="line">                String className = layoutBinder.getClassName();</span><br><span class="line">                String canonicalName = layoutBinder.getPackage() + <span class="string">"."</span> + className;</span><br><span class="line">                <span class="keyword">if</span> (mWrittenClasses.contains(canonicalName)) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                L.d(<span class="string">"writing data binder base %s"</span>, canonicalName);</span><br><span class="line">                mFileWriter.writeToFile(canonicalName,</span><br><span class="line">                        layoutBinder.writeViewBinderBaseClass(isLibrary));</span><br><span class="line">                mWrittenClasses.add(canonicalName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ScopedException ex)&#123;</span><br><span class="line">            Scope.defer(ex);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            Scope.exit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里调用了 <code>LayoutBinder</code>（真正的实现类会调用 <code>writeViewBinder</code>）:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">writeViewBinderBaseClass</span><span class="params">(<span class="keyword">boolean</span> forLibrary)</span> </span>&#123;</span><br><span class="line">    ensureWriter();</span><br><span class="line">    <span class="keyword">return</span> mWriter.writeBaseClass(forLibrary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到如果是 library module，我们会做特殊的编译，而不会生成真正的实现:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> fun writeBaseClass(<span class="string">forLibrary :</span> Boolean) : String =</span><br><span class="line">    kcode(<span class="string">"package $&#123;layoutBinder.`package`&#125;;"</span>) &#123;</span><br><span class="line">        Scope.reset()</span><br><span class="line">        nl(<span class="string">"import android.databinding.Bindable;"</span>)</span><br><span class="line">        nl(<span class="string">"import android.databinding.DataBindingUtil;"</span>)</span><br><span class="line">        nl(<span class="string">"import android.databinding.ViewDataBinding;"</span>)</span><br><span class="line">        nl(<span class="string">"public abstract class $baseClassName extends ViewDataBinding &#123;"</span>)</span><br><span class="line">        layoutBinder.sortedTargets.filter&#123;it.id != <span class="literal">null</span>&#125;.forEach &#123;</span><br><span class="line">            tab(<span class="string">"public final $&#123;it.interfaceClass&#125; $&#123;it.fieldName&#125;;"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        nl(<span class="string">""</span>)</span><br><span class="line">        tab(<span class="string">"protected $baseClassName(android.databinding.DataBindingComponent bindingComponent, android.view.View root_, int localFieldCount"</span>) &#123;</span><br><span class="line">            layoutBinder.sortedTargets.filter&#123;it.id != <span class="literal">null</span>&#125;.forEach &#123;</span><br><span class="line">                tab(<span class="string">", $&#123;it.interfaceClass&#125; $&#123;it.constructorParamName&#125;"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tab(<span class="string">") &#123;"</span>) &#123;</span><br><span class="line">            tab(<span class="string">"super(bindingComponent, root_, localFieldCount);"</span>)</span><br><span class="line">            layoutBinder.sortedTargets.filter&#123;it.id != <span class="literal">null</span>&#125;.forEach &#123;</span><br><span class="line">                tab(<span class="string">"this.$&#123;it.fieldName&#125; = $&#123;it.constructorParamName&#125;;"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tab(<span class="string">"&#125;"</span>)</span><br><span class="line">        nl(<span class="string">""</span>)</span><br><span class="line">        variables.forEach &#123;</span><br><span class="line">            <span class="keyword">if</span> (it.userDefinedType != <span class="literal">null</span>) &#123;</span><br><span class="line">                val type = ModelAnalyzer.getInstance().applyImports(it.userDefinedType, model.imports)</span><br><span class="line">                tab(<span class="string">"public abstract void $&#123;it.setterName&#125;($type $&#123;it.readableName&#125;);"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tab(<span class="string">"public static $baseClassName inflate(android.view.LayoutInflater inflater, android.view.ViewGroup root, boolean attachToRoot) &#123;"</span>) &#123;</span><br><span class="line">            tab(<span class="string">"return inflate(inflater, root, attachToRoot, android.databinding.DataBindingUtil.getDefaultComponent());"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        tab(<span class="string">"&#125;"</span>)</span><br><span class="line">        tab(<span class="string">"public static $baseClassName inflate(android.view.LayoutInflater inflater) &#123;"</span>) &#123;</span><br><span class="line">            tab(<span class="string">"return inflate(inflater, android.databinding.DataBindingUtil.getDefaultComponent());"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        tab(<span class="string">"&#125;"</span>)</span><br><span class="line">        tab(<span class="string">"public static $baseClassName bind(android.view.View view) &#123;"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (forLibrary) &#123;</span><br><span class="line">                tab(<span class="string">"return null;"</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tab(<span class="string">"return bind(view, android.databinding.DataBindingUtil.getDefaultComponent());"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tab(<span class="string">"&#125;"</span>)</span><br><span class="line">        tab(<span class="string">"public static $baseClassName inflate(android.view.LayoutInflater inflater, android.view.ViewGroup root, boolean attachToRoot, android.databinding.DataBindingComponent bindingComponent) &#123;"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (forLibrary) &#123;</span><br><span class="line">                tab(<span class="string">"return null;"</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tab(<span class="string">"return DataBindingUtil.&lt;$baseClassName&gt;inflate(inflater, $&#123;layoutBinder.modulePackage&#125;.R.layout.$&#123;layoutBinder.layoutname&#125;, root, attachToRoot, bindingComponent);"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tab(<span class="string">"&#125;"</span>)</span><br><span class="line">        tab(<span class="string">"public static $baseClassName inflate(android.view.LayoutInflater inflater, android.databinding.DataBindingComponent bindingComponent) &#123;"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (forLibrary) &#123;</span><br><span class="line">                tab(<span class="string">"return null;"</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tab(<span class="string">"return DataBindingUtil.&lt;$baseClassName&gt;inflate(inflater, $&#123;layoutBinder.modulePackage&#125;.R.layout.$&#123;layoutBinder.layoutname&#125;, null, false, bindingComponent);"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tab(<span class="string">"&#125;"</span>)</span><br><span class="line">        tab(<span class="string">"public static $baseClassName bind(android.view.View view, android.databinding.DataBindingComponent bindingComponent) &#123;"</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (forLibrary) &#123;</span><br><span class="line">                tab(<span class="string">"return null;"</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tab(<span class="string">"return ($baseClassName)bind(bindingComponent, view, $&#123;layoutBinder.modulePackage&#125;.R.layout.$&#123;layoutBinder.layoutname&#125;);"</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tab(<span class="string">"&#125;"</span>)</span><br><span class="line">        nl(<span class="string">"&#125;"</span>)</span><br><span class="line">    &#125;.generate()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>那么问题来了，这里的这个只是用来使 library module 编译能通过的 abstract class，只生成了所有 variable 的 setter 方法啊，getter 呢？坑爹呢？</p>
<p>看来是 Google 压根没考虑到还需要这个。写 Kotlin 的都少根筋吗？</p>
<h1 id="规避方案">规避方案</h1><p>为了让 library module 能编译通过（这样才能在 application module 生成真正的 Binding 实现），只好避免使用 getter 方法，幸而通过之前开发的 DataBindingAdapter 和 lambda presenter 确实能规避使用 getter 去拿 viewmodel。</p>
<p>不管怎么说，希望 Google 能在下个版本修复这个问题。就是 iterator 一下，写个 abstract 接口而已。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用 Data Binding 也有半年多了，从最初的 setVariable，替换 findViewById，到比较高级的双向绑定，自定义 Adapter、Component，查看源码了解编译、运行流程，也算是小有成果，且没有碰到 Data Binding 本身实现上的问]]>
    </summary>
    
      <category term="Data Binding" scheme="http://blog.zhaiyifan.cn/tags/Data-Binding/"/>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React Native 0.31 Bundle 预加载优化]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/08/20/react-native-0-31-preload-optimization/"/>
    <id>http://blog.zhaiyifan.cn/2016/08/20/react-native-0-31-preload-optimization/</id>
    <published>2016-08-20T04:41:12.000Z</published>
    <updated>2016-08-22T04:34:33.000Z</updated>
    <content type="html"><![CDATA[<p>使用 React Native 开发混合应用的过程中，我们在打完 bundle 进 release 包后，会发现第一次进入页面（React 的 Activity）会有一个短暂的白屏过程（在真机上近 <strong>1秒</strong>，在模拟器上比较快，在 <strong>200毫秒</strong> 左右），而且在完全退出后再进入，仍然会有这个白屏。</p>
<p>仔细查看加载过程（其实猜猜都能知道）后可以发现，这个过程就是在加载我们的 js bundle，通常即便是一个小的 RN 应用（混合应用中的子业务），也会动辄到 1MB 的大小，除非是完整的 RN 应用，可以把这个当做是启动速度，否则这样的加载速度都是对用户体验的很大伤害。</p>
<p>于是我们决定进行 Bundle 预加载的优化。</p>
<p>项目源码上传在：<a href="https://github.com/markzhai/react-native-preloader" target="_blank" rel="external">markzhai/react-native-preloader</a>，稍后会上传到 maven，版本号会和 rn 保持一致。</p>
<h1 id="耗时操作">耗时操作</h1><p>见 <code>ReactActivity</code> 的 <code>onCreate</code> 方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (getUseDeveloperSupport() &amp;&amp; Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">    <span class="comment">// Get permission to show redbox in dev builds.</span></span><br><span class="line">    <span class="keyword">if</span> (!Settings.canDrawOverlays(<span class="keyword">this</span>)) &#123;</span><br><span class="line">      Intent serviceIntent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</span><br><span class="line">      startActivity(serviceIntent);</span><br><span class="line">      FLog.w(ReactConstants.TAG, REDBOX_PERMISSION_MESSAGE);</span><br><span class="line">      Toast.makeText(<span class="keyword">this</span>, REDBOX_PERMISSION_MESSAGE, Toast.LENGTH_LONG).show();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  mReactRootView = createRootView();</span><br><span class="line">  mReactRootView.startReactApplication(</span><br><span class="line">    getReactNativeHost().getReactInstanceManager(),</span><br><span class="line">    getMainComponentName(),</span><br><span class="line">    getLaunchOptions());</span><br><span class="line">  setContentView(mReactRootView);</span><br><span class="line">  mDoubleTapReloadRecognizer = <span class="keyword">new</span> DoubleTapReloadRecognizer();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>打点后可以发现耗时的其实是</p>
<ul>
<li>createRootView();</li>
<li>startReactApplication();</li>
</ul>
<p>这两个操作，所以考虑只需要提前创建 <code>ReactRootView</code> 进行 render，之后直接挂载该 view 上去即可。</p>
<h1 id="预加载">预加载</h1><p>创建预加载类 <code>ReactPreLoader</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * React Native Bundle Pre-loader.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> markzhai on 16/8/20</span><br><span class="line"> * <span class="doctag">@version</span> 1.3.0</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactPreLoader</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ReactPreLoader"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, ReactRootView&gt; CACHE_VIEW_MAP =</span><br><span class="line">            <span class="keyword">new</span> ArrayMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Get &#123;<span class="doctag">@link</span> ReactRootView&#125; with corresponding &#123;<span class="doctag">@link</span> ReactInfo&#125;.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ReactRootView <span class="title">getRootView</span><span class="params">(ReactInfo reactInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CACHE_VIEW_MAP.get(reactInfo.getMainComponentName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Pre-load &#123;<span class="doctag">@link</span> ReactRootView&#125; to local &#123;<span class="doctag">@link</span> Map&#125;, you may want to</span><br><span class="line">     * load it in previous activity.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Activity activity, ReactInfo reactInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (CACHE_VIEW_MAP.get(reactInfo.getMainComponentName()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ReactRootView rootView = <span class="keyword">new</span> ReactRootView(activity);</span><br><span class="line">        rootView.startReactApplication(</span><br><span class="line">                ((ReactApplication) activity.getApplication()).getReactNativeHost().getReactInstanceManager(),</span><br><span class="line">                reactInfo.getMainComponentName(),</span><br><span class="line">                reactInfo.getLaunchOptions());</span><br><span class="line">        CACHE_VIEW_MAP.put(reactInfo.getMainComponentName(), rootView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Remove &#123;<span class="doctag">@link</span> ReactRootView&#125; from parent.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">(ReactInfo reactInfo)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ReactRootView rootView = getRootView(reactInfo);</span><br><span class="line">            ViewGroup parent = (ViewGroup) rootView.getParent();</span><br><span class="line">            <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                parent.removeView(rootView);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line">            Logger.e(TAG, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 init 操作中，我们通过 ReactInfo 缓存把 view 缓存在本地的 <code>ArrayMap</code>。</p>
<p>值得注意的是 <code>onDestroy</code>，在 ReactActivity 销毁后，我们需要把 view 从 parent 上卸载下来。</p>
<h1 id="使用预加载的_view">使用预加载的 view</h1><p>使用预加载的 View，就需要侵入 activity 的创建过程，我们无法再使用 RN 库提供的 <code>ReactActivity</code>，只能建立自己的，以下列出修改的方法，其他方法照抄 <code>ReactActivity</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Base Activity for React Native applications.</span><br><span class="line"> *</span><br><span class="line"> * <span class="doctag">@author</span> markzhai on 16/7/28</span><br><span class="line"> * <span class="doctag">@version</span> 1.3.0</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MrReactActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title">DefaultHardwareBackBtnHandler</span>, <span class="title">PermissionAwareActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (getUseDeveloperSupport() &amp;&amp; Build.VERSION.SDK_INT &gt;= <span class="number">23</span>) &#123;</span><br><span class="line">            <span class="comment">// Get permission to show redbox in dev builds.</span></span><br><span class="line">            <span class="keyword">if</span> (!Settings.canDrawOverlays(<span class="keyword">this</span>)) &#123;</span><br><span class="line">                Intent serviceIntent = <span class="keyword">new</span> Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</span><br><span class="line">                startActivity(serviceIntent);</span><br><span class="line">                FLog.w(ReactConstants.TAG, REDBOX_PERMISSION_MESSAGE);</span><br><span class="line">                Toast.makeText(<span class="keyword">this</span>, REDBOX_PERMISSION_MESSAGE, Toast.LENGTH_LONG).show();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        mReactRootView = ReactPreLoader.getRootView(getReactInfo());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mReactRootView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            Logger.i(TAG, <span class="string">"use pre-load view"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Logger.i(TAG, <span class="string">"createRootView"</span>);</span><br><span class="line">            mReactRootView = createRootView();</span><br><span class="line">            <span class="keyword">if</span> (mReactRootView != <span class="keyword">null</span>) &#123;</span><br><span class="line">                mReactRootView.startReactApplication(</span><br><span class="line">                        getReactNativeHost().getReactInstanceManager(),</span><br><span class="line">                        getMainComponentName(),</span><br><span class="line">                        getLaunchOptions());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        setContentView(mReactRootView);</span><br><span class="line"></span><br><span class="line">        mDoubleTapReloadRecognizer = <span class="keyword">new</span> DoubleTapReloadRecognizer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mReactRootView != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mReactRootView.unmountReactApplication();</span><br><span class="line">            mReactRootView = <span class="keyword">null</span>;</span><br><span class="line">            ReactPreLoader.onDestroy(getReactInfo());</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        getReactNativeHost().clear();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> ReactInfo <span class="title">getReactInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="使用">使用</h1><p>在进入该 RN activity 的上一个 activity 调用：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReactPreLoader.init(<span class="keyword">this</span>, ReactCardActivity.reactInfo);</span><br></pre></td></tr></table></figure></p>
<p>ReactCardActivity 继承我们自己的 ReactActivity：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReactCardActivity</span> <span class="keyword">extends</span> <span class="title">MrReactActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ReactInfo reactInfo = <span class="keyword">new</span> ReactInfo(<span class="string">"card"</span>, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getMainComponentName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reactInfo.getMainComponentName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ReactInfo <span class="title">getReactInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> reactInfo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>优化后可以达到瞬间加载。</p>
<h1 id="已知的坑">已知的坑</h1><p>由于进行了预加载，目前已知的问题是 <code>Modal</code> 无法显示 —— 因为 <code>Modal</code> 在 Android 的实现使用了 <code>Dialog</code>，而该 View 将创建 <code>ReactRootView</code> 的 context 作为参数传给了 <code>Dialog</code>，而不是实际运行时所在的 <code>Activity</code> context。查看源码可以验证（com.facebook.react.views.modal）。</p>
<p><code>TimePickerAndroid</code> 这类 picker 则没有问题。见 <a href="https://github.com/facebook/react-native/issues/9496" target="_blank" rel="external">issue 9496</a></p>
<p>作为规避方案，目前使用 <code>MutableContextWrapper</code> 进行 context 替换。见 GitHub 上的具体实现（感谢评论里的 Lovecraft 提供的方案）。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>使用 React Native 开发混合应用的过程中，我们在打完 bundle 进 release 包后，会发现第一次进入页面（React 的 Activity）会有一个短暂的白屏过程（在真机上近 <strong>1秒</strong>，在模拟器上比较快，在 <strong]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Optimization" scheme="http://blog.zhaiyifan.cn/tags/Optimization/"/>
    
      <category term="React Native" scheme="http://blog.zhaiyifan.cn/tags/React-Native/"/>
    
      <category term="优化" scheme="http://blog.zhaiyifan.cn/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="React Native" scheme="http://blog.zhaiyifan.cn/categories/React-Native/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目10 - React Native & Redux]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/08/04/android-new-project-from-0-p10/"/>
    <id>http://blog.zhaiyifan.cn/2016/08/04/android-new-project-from-0-p10/</id>
    <published>2016-08-04T14:03:13.000Z</published>
    <updated>2016-08-19T03:00:56.000Z</updated>
    <content type="html"><![CDATA[<p>本篇来讲讲 React Native 和 Redux，和其他一上来就啪啪啪丢上来一堆翻译的东西不同，本文会从简单的例子入手，让大家能快速地明白 React Native 是什么，Redux 和常见的 MVC、MVP 等有什么区别，怎么去组织一个 Redux 架构的 React Native 项目。</p>
<p>为避免大家还没入门就放弃，预计下一篇才会从我们项目中的实践出发，讲讲更复杂的应用场景。</p>
<h1 id="什么是React_Native">什么是React Native</h1><p><img src="http://blog.zhaiyifan.cn/images/react-native-1-reactnative.png" alt="React Native"></p>
<p>React Native 使你能够基于 JavaScript 和 React 在原生平台上构建应用，提倡的是 “learn once, write anywhere”，复用代码，提高开发效率。</p>
<p>项目由 Facebook 开源驱动，在过去的近一年中更新很活跃。文档建议直接看官网的 <a href="https://facebook.github.io/react-native/" target="_blank" rel="external">React Native</a>，中文站有点坑。</p>
<p>支持系统：Android 4.1 (API 16) 以及 &gt;= iOS 7.0。</p>
<p>关于 React，可以参见之前为掘金翻译计划翻译的 <a href="http://blog.zhaiyifan.cn/2016/04/22/trans-react-newbies-tutorial/">React.js 新手村教程</a>，简单来说 React 将应用分为一个个动态可复用的组件 —— View的渲染（JSX）、数据如何绑定到显示、状态的变更（State）、属性（Props）都包含在组件内部。</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-reactjs.png" alt="React.js"></p>
<p>整个应用由一个个组件搭积木而成（组件式开发），而每个组件则由状态驱动而变更。</p>
<p>React Native 正像它的名字，将 React 带到了原生世界，和 H5 不同的是，我们不再使用 CSS 和 HTML，而只有 js 为伴。我们也不再有那些 <code>div</code>, <code>input</code> 这些标签，而是由 <code>View</code>, <code>TextInput</code> 等等取代，更符合原生开发者们的习惯。布局上，幸而有强大的 <code>Flexbox</code> 支持，如果开发者们之前有使用或者看到过 Google 在 GitHub 发布的 Android 版 <code>FlexboxLayout</code>，相信对它会很熟悉。原生开发中的页面栈，也由 <code>Navigator</code> 进行了实现（在 Android 上还有 <code>BackAndroid</code> 的返回键支持）。</p>
<p>与 WebView 不同，React Native 运行的界面，最终会被解释映射为原生的 View，可以直接使用布局边界或者 Hierarchy Viewer 看出层级（js 文件会打包为一个bundle，位于assets下面，RN引擎会加载并进行解释映射）。</p>
<p>好处</p>
<ul>
<li>体验 web 开发的便捷，不再需要编译，重新加载一下 js 就行了</li>
<li>可以直接使用 Chrome 或者 Nuclide 调试</li>
<li>Android / iOS 两端可以共享很大一部分代码（RN 还在进行 Windows, MacOS, Node-webkit 等平台的支持）</li>
<li>热更新，JS bundle 下发一下新的就行了（当然也有一定局限性，如果是 hybrid，则 native 的 RN module 部分不能更新）</li>
</ul>
<p>坏处</p>
<ul>
<li>前端开发不会原生做不了 React Native（除非你能真只用自带的那些东西），而且理解那些 RN 提供的组件也会很头晕（需要同时了解 Android 和 iOS）。</li>
<li>原生开发需要一定成本的学习实践才能掌握 React Native。毕竟 ES6 不像过去的 JS 那么傻瓜式了。</li>
<li>React Native 目前仍然处于快速迭代开发的阶段，你永远也不知道下个版本自己升级需要修改多少原来的代码。</li>
<li>React Native 的资料较少，尤其是国内的，更尤其是 hybrid 开发的（GitHub 上的开源项目大多是纯 RN 的）。</li>
</ul>
<h1 id="什么是Redux">什么是Redux</h1><p><img src="https://camo.githubusercontent.com/f28b5bc7822f1b7bb28a96d8d09e7d79169248fc/687474703a2f2f692e696d6775722e636f6d2f4a65567164514d2e706e67" alt="Redux.js"></p>
<p><a href="http://redux.js.org/" target="_blank" rel="external">Redux</a> 本身和 React 并没有特别紧密的联系，而是 Facebook 提出的 Flux 架构的一种优秀实现，可以搭配其他任何框架一起使用。在 React 上使用，需要搭配 react-redux（如此一来 Redux 可以不局限于 React，而让社区发展出更多的 redux-* 中间件）。</p>
<p>Redux 在 React 的基础上（state 和 props），增加了 <a href="http://cn.redux.js.org//docs/basics/Store.html" target="_blank" rel="external">store</a>、<a href="http://cn.redux.js.org//docs/basics/Actions.html" target="_blank" rel="external">action</a>、<a href="http://cn.redux.js.org//docs/basics/Reducers.html" target="_blank" rel="external">reducer</a> 的概念，规范了全局一个 state，从而只需要根据这个 state 就能回朔出整个应用的状态。组件通过 dispatch 将 action 传到 store，reducer 根据原来的 state 以及 action，返回新的 state，组件根据新的 state 渲染界面。</p>
<p>Redux 是一个可预测的状态容器，即只需要有状态树，就能还原出“事发现场”。</p>
<h1 id="从例子看项目">从例子看项目</h1><p>为了避免说一大堆概念，大家一头雾水，似懂非懂，这里拿一个例子来讲讲 React Native 和 Redux 结合后的效果，尽量避免代码的出现，而以图和文字代替。</p>
<p>Counter！没错，就是 Counter，不是 TODO，TODO已经被黑的不成样了。</p>
<p>项目源码位于：<a href="https://github.com/alinz/example-react-native-redux" target="_blank" rel="external">example-react-native-redux</a>。包含了 <code>Counter</code> 和 <code>Counters</code> 两个子项目。前者是单个的计数器，后者则在前者的基础上增加了可以加减计数器个数的功能，相对更复杂一些，不过引入了一些不错的实践可以参考。</p>
<h2 id="运行效果">运行效果</h2><p>先看看最后的效果，方便对应后面的解说。<br>第一个 Counter 项目很简单，就是一个文本框加上两个按钮，一个加1，一个减1。<br>第二个 Counters 项目在前者的基础上（使用了 Counter 组件），可以增加任意个计数器，还添加了带延迟的加1功能，来模拟耗时操作。</p>
<h2 id="Counter">Counter</h2><p>先看看Counter，我们从物理架构和动作流两个角度来进行观察。</p>
<p>目录下，有以下文件：</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-files.png" alt="Counter List Files"></p>
<p>index.android.js 和 index.ios.js 分别是 android 和 iOS 的 rn 入口，通常内容是相同的。<br>android 为 Android 的工程目录，下面有我们熟悉的 build.gralde。<br>ios 为 iOS 的工程目录，包含了 xcode 的项目。<br>app 就是 rn 的目录，包含了 Android 和 iOS 项目共享的 js 源码。<br>node_modules 是 node 通过解析 package.json 下载的依赖。</p>
<h3 id="物理结构">物理结构</h3><p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-structure.png" alt="Counter物理结构"></p>
<p>CounterApp.js 则是整个应用的实际入口。</p>
<h3 id="动作流">动作流</h3><p>且不谈那些具体的 bind 和 createStore 操作，我们来看看当发生交互的时候，整个动作的分发，拿点击加号为例：</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-flow.png" alt="Counter活动图"></p>
<p>onPress 事件触发了后续的一系列活动，而 Counter Component 的 action function 则由外部通过 props 传入（在这里，是 CounterApp 的 render 函数，如下）。</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-counterapp.png" alt="counterApp.js"></p>
<p>再看看 store 的创建，在 App.js 入口：</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-app.png" alt="app.js"></p>
<p>而 Component 也不是直接调用 action 的 function，而是通过 bindActionCreators 注入到组件props中（这里是通过 react-redux 进行的，不是 redux 自身的东西，可以理解为 react 和 redux 之间的胶水）：</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counter-action-bind.png" alt="action bind"></p>
<p>通常我们会在智能组件的末尾使用：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(mapStateToProps, mapDispatchToProps)(CardDetail);</span><br></pre></td></tr></table></figure>
<p>这样来把 state 以及 action 注入。</p>
<h2 id="Counters">Counters</h2><p>接着我们来看看更为复杂的 Counters 项目，顶层目录结构类似，不再赘述。</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counters-demo.gif" alt="demo"></p>
<p>看完上面的 demo 动图后，相信大家对下面的解说会更容易理解。</p>
<h3 id="物理结构-1">物理结构</h3><p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counters-structure.png" alt="Counters物理结构"></p>
<p>我们来详细讲一下 modules 下的 app 目录中的文件组织。</p>
<p>actions.js 和刚才一样，定义了一个个的 action，略有不同的是由于这次有异步的操作，所以涉及到了 dispatch 函数，关于 dispatch 可以查看<a href="http://cn.redux.js.org/docs/api/Store.html#dispatch" target="_blank" rel="external">官方文档</a>。</p>
<p>constants.js 定义了所有 action 的 type，以及 App 的名字。</p>
<p>reducers.js 一样根据 action（payload 和 type）以及原来的 state 返回新的 state，另外，这里还进行了 initial state 即初始状态的定义（我们也可以把它放到单独的文件中）。</p>
<p>App.js 定义了页面的布局（渲染和 action），导出了 connect 生成的 container。我们简单看一下 render 部分是怎么做的。</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counters-app-render.png" alt="Counters render"></p>
<p>怎么样，JSX 是不是挺容易理解的？</p>
<h3 id="动作流-1">动作流</h3><p>Counter 本身的动作流上面我们已经举例过了，本工程中增减计数类似，唯一的区别是 action 不只有 type，还带了 payload（id）来标示不同的计数器。</p>
<p>所以这里我们拿增加计数器的点击事件来做例子。</p>
<p><img src="http://blog.zhaiyifan.cn/images/react-native-1-counters-add-counter.png" alt="Add Counter"></p>
<p>看上去是不是跟上面的差不多？剩下的那个 incrementWithDelay 其实也差不多，只不过返回的是一个function，在 setTimeOut 回调中才进行 dispatch（thunk middleware 会帮我们进行处理）。</p>
<h2 id="总结">总结</h2><p>上面我们通过物理结构和活动图大致了解了 React Native 上的 Redux 架构 app 是如何工作的。具体的细节，建议大家还是去查看 GitHub 上的源代码，通过上面的讲解后，应该不难理解。</p>
<h1 id="技术栈">技术栈</h1><p>我们目前实践的React Nataive技术栈：</p>
<ul>
<li>immutable.js</li>
<li>react</li>
<li>redux</li>
<li>react-redux</li>
<li>redux-thunk</li>
<li>redux-logger</li>
<li>redux-mock-store</li>
<li>react-native-router-flux</li>
<li>react-native-simple-store</li>
<li>regenerator</li>
<li>undefined</li>
<li>jest</li>
</ul>
<h1 id="更多阅读">更多阅读</h1><ul>
<li>React<ul>
<li><a href="https://daveceddia.com/react-es5-createclass-vs-es6-classes/" target="_blank" rel="external">React: ES5 (createClass) or ES6 (class)?</a></li>
</ul>
</li>
</ul>
<ul>
<li>Redux<ul>
<li><a href="http://redux.js.org/" target="_blank" rel="external">Redux.js</a></li>
<li><a href="https://egghead.io/courses/getting-started-with-redux" target="_blank" rel="external">Get Started with Redux</a></li>
<li><a href="http://div.io/topic/1309" target="_blank" rel="external">深入到源码：解读 redux 的设计思路与用法</a></li>
<li><a href="https://github.com/gaearon/redux-thunk" target="_blank" rel="external">redux-thunk (Redux的thunk中间件)</a></li>
</ul>
</li>
</ul>
<ul>
<li>React Native<ul>
<li><a href="https://facebook.github.io/react-native/docs/" target="_blank" rel="external">Facebook React Native Docs</a></li>
<li><a href="https://reactnatve.wordpress.com/2016/05/20/mapping-uicomponent-ios-android-react-native/" target="_blank" rel="external">Mapping UIComponent (iOS, Android, React Native)</a></li>
</ul>
</li>
</ul>
<ul>
<li>JavaScript<ul>
<li><a href="http://redux.js.org/docs/advanced/Middleware.html" target="_blank" rel="external">中间件Middleware</a></li>
<li><a href="https://babeljs.io/docs/learn-es2015/" target="_blank" rel="external">ES6</a></li>
</ul>
</li>
</ul>
<ul>
<li>项目<ul>
<li><a href="https://github.com/fbsamples/f8app" target="_blank" rel="external">https://github.com/fbsamples/f8app</a></li>
<li><a href="http://f8-app.liaohuqiu.net/" target="_blank" rel="external">http://f8-app.liaohuqiu.net/</a></li>
<li><a href="https://github.com/bartonhammond/snowflake" target="_blank" rel="external">https://github.com/bartonhammond/snowflake</a></li>
<li><a href="https://github.com/jondot/awesome-react-native" target="_blank" rel="external">https://github.com/jondot/awesome-react-native</a></li>
<li><a href="https://rnplay.org/apps/picks" target="_blank" rel="external">https://rnplay.org/apps/picks</a></li>
</ul>
</li>
</ul>
<ul>
<li>工具<ul>
<li><a href="https://nuclide.io/" target="_blank" rel="external">https://nuclide.io/</a></li>
<li><a href="https://github.com/infinitered/ignite" target="_blank" rel="external">https://github.com/infinitered/ignite</a></li>
</ul>
</li>
</ul>
<ul>
<li>八卦<ul>
<li><a href="https://www.zhihu.com/question/37636296" target="_blank" rel="external">如何看待阿里无线前端发布的Weex?</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/21677103" target="_blank" rel="external">weex&amp;ReactNative对比</a>，大头鬼对两者的对比，下面还有阿里P8的评论，评论很精彩，记得一页页看过去哦，哈哈。</li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>本篇来讲讲 React Native 和 Redux，和其他一上来就啪啪啪丢上来一堆翻译的东西不同，本文会从简单的例子入手，让大家能快速地明白 React Native 是什么，Redux 和常见的 MVC、MVP 等有什么区别，怎么去组织一个 Redux 架构的 Reac]]>
    </summary>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="React Native" scheme="http://blog.zhaiyifan.cn/tags/React-Native/"/>
    
      <category term="Redux" scheme="http://blog.zhaiyifan.cn/tags/Redux/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目9 - 前端用后台接口设计]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/07/23/android-new-project-from-0-p9/"/>
    <id>http://blog.zhaiyifan.cn/2016/07/23/android-new-project-from-0-p9/</id>
    <published>2016-07-23T08:39:19.000Z</published>
    <updated>2016-07-27T07:58:45.000Z</updated>
    <content type="html"><![CDATA[<p>这回来讲讲后台接口的设计。</p>
<p>可能有同学会觉得后台的接口和我们大前端开发有什么关系？试想一下，在碰到一些不合理的接口设计的时候，你们开发是否觉得很别扭——需要为了坑爹的接口写很多脏代码引坑？甚至，这么开发出来的页面，体验也会很差？我们不是说硬无理要求后端接口按照前端业务去封装，而是说为了项目更好地发展，为了用户能有更棒的体验，应该有讨论商量的空间。一些差劲的设计，应该被拒绝。</p>
<p>本文使用前端来指代 Android、iOS 以及 Web。</p>
<p>本文不是教大家撕逼的（赶紧撇清关系）。</p>
<h1 id="全局">全局</h1><p>全局指所有接口统一的规范。</p>
<h2 id="请求头">请求头</h2><p>应该使用http header来放置通用性的参数，比如：</p>
<ul>
<li>APPID（Android/iOS/H5）</li>
<li>APPVER（版本号）</li>
<li>APP-BUILD-NUM（内部小版本号）</li>
<li>TOKEN</li>
<li>NETWORK（网络环境）</li>
<li>LANGUAGE（语言）</li>
<li>等等</li>
</ul>
<p>前端使用 <code>POST</code> 键值对方式提交给后端，可以使用 <code>RawJSON</code> 格式。<br><code>Content-Type</code> 设为 <code>application/x-www-form-urlencoded</code> 或者 <code>application/json</code>。</p>
<h2 id="全局响应格式">全局响应格式</h2><p>响应格式应该统一，方便前端做统一的处理，尤其是数据字段，应该统一放在一个map里面。</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>类型</th>
<th>详细描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>status_no</td>
<td>INT</td>
<td>状态码</td>
</tr>
<tr>
<td>status_msg</td>
<td>STRING</td>
<td>状态信息</td>
</tr>
<tr>
<td>data</td>
<td>MAP</td>
<td>响应内容</td>
</tr>
<tr>
<td>time</td>
<td>INT</td>
<td>响应时间戳</td>
</tr>
</tbody>
</table>
<h2 id="状态码">状态码</h2><p>全局应该定义统一的状态码（status_code），而不应该每个接口单独去定义。</p>
<p>具体规则可以自行定义，比如0为正确，负数为错误。</p>
<p>常见的错误状态码有</p>
<ul>
<li>普通异常</li>
<li>token不合法，需要重新登录</li>
<li>重复登录</li>
<li>需要完善个人信息</li>
<li>第三方账号登陆，需要绑定官方账号</li>
<li>请求头不合法（版本号，APPID等）</li>
<li>数据解密错误</li>
</ul>
<p>可以根据错误类型划分使用的区域段，如登陆系列使用 -1000 到 -1999 区域。</p>
<p>如此定义后，前端可以进行全局的统一处理，如重复登陆则踢出用户。</p>
<h2 id="错误信息">错误信息</h2><p>除了特殊的错误信息——如重复登录、token不合法这些状态码对应的，以及无网、没数据这些，对于通用的异常，应该由后台返回错误信息。</p>
<h2 id="统一data字段">统一data字段</h2><p>data 字段应该统一放在一个 map 内，里面存放具体的响应信息。</p>
<h2 id="Scheme">Scheme</h2><p>全局定义统一的 scheme（Deeplink），方便前端进行跳转。</p>
<p>前端只需要定义自己唯一的 Deeplink 并进行注册即可（scheme 和 host）。</p>
<p>具体使用 REST 风格（如 markzhai://article/XXX），还是普通的 urlencode (如 markzhai://article/?id=XXX&amp;redirect_url=XXX）可以根据自身需求定义。</p>
<p>使用 REST 风格的一个顾虑是可能 scheme 本身并不是基于资源的，而是基于类型、行为等，所以 urlencode 可能更通用，但相应地基于 Deeplink 的资源索引会希望你是无状态的 REST 风格。</p>
<h1 id="回传_or_状态码">回传 or 状态码</h1><p>应该使用回传还是状态码呢？比如点赞消息，是应该回传一个 status_code，0则表示点赞成功，还是应该回传现在的赞状态呢？</p>
<p>其实这两者对于后台的性能来说，是几乎没有影响的，因为取得的只是修改的字段的最后结果。但是对前端来说，差别就有了——需要维护状态。</p>
<p>举一个例子：<br>A 和 B 是两个用户，B 关注了 A，A 没有关注 B。<br>A 看 B 的主页的时候，显示关系是 <em>未关注</em>，此时 A 点击了关注，如果没有回传信息，那么我们只能把关系刷新为 <em>已关注</em>，而没有足够的信息去刷新为 <em>互相关注</em>。否则就需要前端去做恶心的逻辑（后端一开始用户关系就需要传 B 关注了 A），根据原来的关系去做切换，还要在失败的时候刷回原来的状态。</p>
<p>一些有丰富经验的后端会在这种接口使用回传，因为他们知道区别。</p>
<h1 id="模块vs页面">模块vs页面</h1><p>在后台的接口设计上，又分为了按页面以及按模块。</p>
<p>按页面的接口<em>尽可能</em>让前端一个页面只请求一次，一次返回所需要的全部信息；按模块的接口在后端定义自己的业务模块如用户、Feed、标签、搜索等，并尽量避免模块间的耦合。</p>
<p>从后端角度来说，按模块当然是更好的（只需要划分地够细就好），到时候需求有什么变更，让前端自己去改变接口的组合就好，自己高枕无忧。但从前端的角度来说，接口的组合涉及到异步之间的关系，尽管RxJava这样的响应式编程框架让异步简单了很多，但仍然希望可以避免，更严重的是，多次接口请求会让前端的体验变差，并行接口的影响稍小，而一些有前置后置关系的接口则麻烦比较大，一个接着一个请求，会让用户等很久。即便是并行接口，有时候页面的渲染仍然需要所有接口数据返回后才可以进行。</p>
<p>但如果让后端按照页面去套，这样在后端其实一样有性能的损耗，需要一个页面接口去单独调用各个模块的接口，然后进行组合。</p>
<p>究竟如何选择呢？笔者认为在服务器性能足够的前提下，后端应该尽量减少页面请求次数，尤其是有依赖关系的串行请求。另一方面，在一些影响不那么大的页面，则可以由前端自行进行接口组合（比如上面是用户主页的用户展示，下面是该用户的 feed 列表）。</p>
<p>另外，如果你们有一个好的设计师，那么他应该会贯彻一个地方只应该以一样东西为主体，而不应该去把乱七八糟的东西拼凑在一起。</p>
<h1 id="分页信息">分页信息</h1><p>现代的前端交互上，已经很少会有页码显示了，所以很多后端的列表页接口中，就没有带上了分页的信息，而改让客户端去维护请求的页码。</p>
<p>那么，分页信息在接口中，真的就没有存在的必要了吗？其实未必。</p>
<h2 id="为什么需要分页信息">为什么需要分页信息</h2><p>页面大小（pageSize）可能改变（无论是前端自己的配置亦或是后台修改），如果仅由客户端维护页码，那么下次请求下一页就会出错，除非客户端带上自己上次的页面大小。</p>
<p>如果客户端不知道当前页码和总页数，就无法在请求完判断底部应该显示<em>上拉加载更多</em>还是<em>没数据</em>了，导致必须再请求一次，根据是否返回 list 以及数据是否为空去进行判断。</p>
<p>另外，由后端返回页码也避免了客户端修改页码出错的可能。</p>
<p>但对后端来说，这些信息的获取却意味着更大的计算和I/O资源损耗。</p>
<h2 id="折中办法">折中办法</h2><p>折中地，可以让后端返回一个 <code>has_more</code> 字段，这样可以避免最后一次不必要的请求（尤其是数据都不够显示满一页的情况下），体验会好很多。尽管这样仍然无法避免页面大小改变的问题。</p>
<h1 id="配置">配置</h1><p>一些后台喜欢让让前端写限制逻辑，比如搜索的关键字限制，各种过滤逻辑。</p>
<p>咱们先不提让前端写死这些逻辑的灵活性问题（客户端和网页不同，不能那么方便地发版本，即便是网页，改代码发版本就不用测试了吗？出了问题你背？）。前端的输入真的可以信任吗？且不谈代码可能写的不够严谨导致输入跳过了检查，用户还能root、越狱，甚至可以反编译客户端或者直接模拟请求。</p>
<p>所以良好的配置检查应该有两种</p>
<ul>
<li>后端下发配置字段，前端根据字段去做对应检查。好处是减少后台压力，坏处是无法保证安全性。</li>
<li>后端收到请求自行检查过滤，如果出错则返回错误信息给前端显示。</li>
</ul>
<p>毋庸置疑，后者更好。</p>
<p>另外，再说说灵活性。今天可能限制3个字，明天产品需求可能就是4个字，现在产品/运营说不会改，到时候难道就真的一定不会改吗？</p>
<h1 id="空字段">空字段</h1><p>一些空字段，如果没有，服务端应该返回一个空的默认字段 比如 String 用””，int 用 0，Object 用 {}，Array 用 []，这样减小前端校验某些校验漏了出现错误的情况。</p>
<pre><code><span class="comment">---- 由三帅泥阿布补充</span>
</code></pre><p>我个人认为这样本身对流量损耗不大，且确实避免了很多可能的异常，是个很好的意见。当然了，正如后端不应该相信前端的输入一样，前端也不能相信后端数据的完备性，仍然还是需要悲剧地去校验。</p>
<h1 id="教训">教训</h1><ul>
<li><p>不要相信什么以后重构，接口现在这么说，以后他会告诉你，没法兼容老版本所以只能这样了（甚至搞出两套规则让你同时兼容）。</p>
</li>
<li><p>不是说后端就是老大。大家的目标都是为了项目能做好，而现在通常前端的压力比后端更大（前端写得头昏脑花，后端网上东逛西逛），所以在不会很大影响性能的前提下，应该满足前端的合理需求。体验为先。（硬气一点，老大应该挺你，甚至亲自去撕逼，大不了找CTO）</p>
</li>
<li><p>接口的频繁修改要向上反馈，测试数据不满足要求也要及时提出。咱们不做背锅侠。</p>
</li>
<li><p>灵活，灵活。做各种需求的时候，想一想，这儿会不会改变？就算现在不会变，以后就不会变吗？比如抽屉里的入口，是不是要做成可配置的？多问问，实现上尽量灵活。</p>
</li>
</ul>
<h1 id="总结">总结</h1><p>本篇讲了很多通用的后端接口设计问题。帮助大家在面对一些不合理的接口设计时，能进行友善的讨论（撕逼），让项目能做得更好。欢迎各位在评论里或者通过邮件（zhaiyifan56@gmail.com）补充其他点，我会标注出来源。</p>
<hr>
<p>欢迎加入QQ群：568863373。</p>
<p>欢迎关注我们的公众号：<code>魔都三帅</code>，欢迎大家来投稿~只需要是未在微信平台上发布过的技术相关类文章都可以哦（不局限于任何语言和平台）。</p>
<p><img src="http://7xvy2g.com1.z0.glb.clouddn.com/qrcode_for_gh_2e738d2eb3b5_430.jpg" alt="公众号"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这回来讲讲后台接口的设计。</p>
<p>可能有同学会觉得后台的接口和我们大前端开发有什么关系？试想一下，在碰到一些不合理的接口设计的时候，你们开发是否觉得很别扭——需要为了坑爹的接口写很多脏代码引坑？甚至，这么开发出来的页面，体验也会很差？我们不是说硬无理要求后端接口按照]]>
    </summary>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="接口设计" scheme="http://blog.zhaiyifan.cn/tags/%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Data Binding Component详解 - 换肤什么的只是它的一个小应用！]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/07/21/data-binding-component/"/>
    <id>http://blog.zhaiyifan.cn/2016/07/21/data-binding-component/</id>
    <published>2016-07-21T08:40:10.000Z</published>
    <updated>2016-07-25T02:15:00.000Z</updated>
    <content type="html"><![CDATA[<p>上一篇<a href="http://blog.zhaiyifan.cn/2016/07/06/android-new-project-from-0-p8/">从零开始的Android新项目8 - Data Binding高级篇</a>中，我们提到了使用Component来进行注入，以方便进行测试的功能，有一些朋友说写的不够清楚，还有些疑惑，所以本篇就来详细说说Component。</p>
<p>作为例子，我们的实现目标是使用Data Binding Component，让应用全局的TextView的文本都能随时变成test，还能进行全局换肤。</p>
<p>代码位于<a href="https://github.com/markzhai/DataBindingSample" target="_blank" rel="external">DataBindingSample</a>里面的component包下。</p>
<h1 id="DataBindingComponent接口">DataBindingComponent接口</h1><p>在<code>build/intermediates/classes</code>下面，可以找到<code>DataBindingComponent</code>类，包名为<code>android.databinding</code>，全局只会有一个该类——此接口在编译时生成，包含了所有用到的实例BindingAdapters的getter方法。</p>
<p>当一个BindingAdapter是一个实例方法（instance method），一个实现该方法的类的实例必须被实例化。这个生成的接口会包含每个声明BindingAdapter的类/接口的get方法。命名冲突会简单地加一个数字前缀到get方法前来解决。</p>
<p>如果使用Dagger 2，开发者可以继承这个接口，并把继承的接口注解为Component。</p>
<p>对应的接口有：</p>
<ul>
<li><a href="https://developer.android.com/reference/android/databinding/DataBindingUtil.html#setDefaultComponent(android.databinding.DataBindingComponent" target="_blank" rel="external">setDefaultComponent(DataBindingComponent)</a>)</li>
<li><a href="https://developer.android.com/reference/android/databinding/DataBindingUtil.html#inflate(android.view.LayoutInflater, int, android.view.ViewGroup, boolean, android.databinding.DataBindingComponent" target="_blank" rel="external">inflate(LayoutInflater, int, ViewGroup, boolean, DataBindingComponent)</a>), inflate一个binding layout并返回新创建的binding</li>
<li><a href="https://developer.android.com/reference/android/databinding/DataBindingUtil.html#bind(android.view.View, android.databinding.DataBindingComponent" target="_blank" rel="external">bind(View, DataBindingComponent)</a>), 根据给定的layout root返回binding，如果没有则创建</li>
</ul>
<p>第一个接口全局起作用，后两个接口仅对该语句inflate的布局起作用。</p>
<h1 id="创建Component">创建Component</h1><h2 id="声明抽象adapter">声明抽象adapter</h2><p>如果不需要实现多个Component，可以直接跳过这一步。</p>
<p>我们声明一个抽象的adapter，在其中写上抽象方法来设置我们想要做data binding的属性，这里我们直接干掉了TextView的android命名空间下的text和textColor两个属性。</p>
<p>这里的<code>@BindingAdapter</code>注解会让data binding在component中生成我们这个adapter的get方法（必须是非静态的）。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBindingAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@BindingAdapter</span>(<span class="string">"android:text"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, String value)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@BindingAdapter</span>(<span class="string">"android:textColor"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(TextView view, <span class="keyword">int</span> value)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="实现adapter">实现adapter</h2><p>我们继承<code>MyBindingAdapter</code>分别实现两个adapter:</p>
<p><code>ProductionBindingAdapter.java</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductionBindingAdapter</span> <span class="keyword">extends</span> <span class="title">MyBindingAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, String value)</span> </span>&#123;</span><br><span class="line">        TextViewBindingAdapter.setText(view, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(TextView view, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        view.setTextColor(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>TestBindingAdapter.java:</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBindingAdapter</span> <span class="keyword">extends</span> <span class="title">MyBindingAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, String value)</span> </span>&#123;</span><br><span class="line">        view.setText(value + <span class="string">" test"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTextColor</span><span class="params">(TextView view, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value == view.getContext()</span><br><span class="line">                .getResources()</span><br><span class="line">                .getColor(R.color.textColorDay)) &#123;</span><br><span class="line">            view.setTextColor(view.getContext()</span><br><span class="line">                    .getResources()</span><br><span class="line">                    .getColor(R.color.textColorNight));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>前者使用的是原来的设置，后者则分别给text加上了” test”后缀，并做了color的转换，实现了字体颜色的“换肤”功能。</p>
<h2 id="实现component">实现component</h2><p>在写了上面的代码后，再看看<code>DataBindingComponent</code>，会发现里面多了一个接口方法，遂实现之:</p>
<p>生产环境Component:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductionComponent</span> <span class="keyword">implements</span> <span class="title">DataBindingComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyBindingAdapter mAdapter = <span class="keyword">new</span> ProductionBindingAdapter();</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyBindingAdapter <span class="title">getMyBindingAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAdapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试环境Component:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComponent</span> <span class="keyword">implements</span> <span class="title">DataBindingComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MyBindingAdapter mAdapter = <span class="keyword">new</span> TestBindingAdapter();</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyBindingAdapter <span class="title">getMyBindingAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAdapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="使用">使用</h1><h2 id="layout">layout</h2><p>原先的text和textColor属性并没有通过data binding设置，我们要给它们套上<code>@{}</code>:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">Button</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"50dp"</span></span><br><span class="line">    <span class="attribute">android:onClick</span>=<span class="value">"@&#123;presenter.onClickSimpleDemo&#125;"</span></span><br><span class="line">    <span class="attribute">android:text</span>=<span class="value">"@&#123;@string/demo_simple&#125;"</span></span><br><span class="line">    <span class="attribute">android:textColor</span>=<span class="value">"@&#123;@color/textColorDay&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="注入component">注入component</h2><p>注入Component很简单，我们做全局的注入只需要调用:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (DemoApplication.isTest) &#123;</span><br><span class="line">    DataBindingUtil.setDefaultComponent(<span class="keyword">new</span> ProductionComponent());</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    DataBindingUtil.setDefaultComponent(<span class="keyword">new</span> TestComponent());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="重新创建activity">重新创建activity</h2><p>由于点击事件在<code>MainActivity</code>创建后才触发，所以这个activity上并不会起作用，我们需要重新创建它:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickInjectDemo</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (DemoApplication.isTest) &#123;</span><br><span class="line">        DataBindingUtil.setDefaultComponent(<span class="keyword">new</span> ProductionComponent());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        DataBindingUtil.setDefaultComponent(<span class="keyword">new</span> TestComponent());</span><br><span class="line">    &#125;</span><br><span class="line">    DemoApplication.isTest = !DemoApplication.isTest;</span><br><span class="line">    recreate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>设置后<code>recreate()</code>即可。可以看demo工程的效果，点击最后的按钮后，字体颜色发生变化，textview的text后面都加上了test字符串。</p>
<h1 id="静态adapter方法">静态adapter方法</h1><p>那么静态的BindingAdapter方法怎么去和Component做关联呢？很简单，只需要作为方法的第一个参数就可以了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(<span class="string">"android:src"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(TestComponent component,</span><br><span class="line">                             ImageView view, String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="结">结</h1><p>本篇我们实践了Data Binding中比较高级的特性：Component。</p>
<p>其使用场景很多，如：</p>
<ul>
<li>换肤</li>
<li>打点</li>
<li>替换原生属性</li>
<li>等等</li>
</ul>
<p>欢迎大家发挥自己的想象力，补充更多的使用场景。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>上一篇<a href="http://blog.zhaiyifan.cn/2016/07/06/android-new-project-from-0-p8/">从零开始的Android新项目8 - Data Binding高级篇</a>中，我们提到了使用Component来]]>
    </summary>
    
      <category term="Data Binding" scheme="http://blog.zhaiyifan.cn/tags/Data-Binding/"/>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/categories/Android/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目8 - Data Binding高级篇]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/07/06/android-new-project-from-0-p8/"/>
    <id>http://blog.zhaiyifan.cn/2016/07/06/android-new-project-from-0-p8/</id>
    <published>2016-07-06T02:59:39.000Z</published>
    <updated>2016-07-21T08:55:34.000Z</updated>
    <content type="html"><![CDATA[<p>承接<a href="http://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/">上篇</a>，本篇继续讲解一些Data Binding更加进阶的内容，包括：列表绑定、自定义属性、双向绑定、表达式链、Lambda表达式、动画、Component注入（测试）等。</p>
<p>Demo源码库：<a href="https://github.com/markzhai/DataBindingSample" target="_blank" rel="external">DataBindingSample</a>。</p>
<h1 id="列表绑定">列表绑定</h1><p>App中经常用到列表展示，Data Binding在列表中一样可以扮演重要的作用，直接绑定数据和事件到每一个列表的item。</p>
<h2 id="RecyclerView">RecyclerView</h2><p>过去我们往往会使用ListView、GridView、或者GitHub上一些自定义的View来做瀑布流。自从RecyclerView出现后，我们有了新选择，只需要使用LayoutManager就可以。RecyclerView内置的垃圾回收，ViewHolder、ItemDecoration装饰器机制都让我们可以毫不犹豫地替换掉原来的ListView和GridView。</p>
<p>所以本篇仅拿RecyclerView做例子。</p>
<h2 id="Generic_Binding">Generic Binding</h2><p>我们只需要定义一个基类ViewHolder，就可以方便地使用上Data Binding:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BindingViewHolder</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">ViewDataBinding</span>&gt; <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> T mBinding;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BindingViewHolder</span><span class="params">(T binding)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(binding.getRoot());</span><br><span class="line">        mBinding = binding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBinding;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Adapter可以直接使用该ViewHolder，或者再继承该ViewHolder，T使用具体Item的Binding类（以便直接访问内部的View）。至于Listener，可以在<code>onBindViewHolder</code>中进行绑定，做法类似于普通View，不做赘述。</p>
<p>由于同一个adapter未必只有一种ViewHolder，可能有好几种View type，所以在<code>onBindViewHolder</code>中，我们只能获取基类的ViewHolder类型，也就是<code>BindingViewHolder</code>，所以无法去做具体的set操作，如setEmployee。这时候就可以使用<code>setVariable</code>接口，然后通过BR来指定variable的name。</p>
<p>又比如我们可能有多重view type对应的xml，可以将对应的variable name全都写为item，这样可以避免强制转换Binding类去做set操作。类似地，监听器也能都统一取名为listener或者presenter。</p>
<h2 id="开源方案及其局限性">开源方案及其局限性</h2><p><a href="https://github.com/evant/binding-collection-adapter" target="_blank" rel="external">evant / binding-collection-adapter</a><br><a href="https://github.com/radzio/android-data-binding-recyclerview" target="_blank" rel="external">radzio / android-data-binding-recyclerview</a></p>
<p>均提供了简化的RV data binding方案。</p>
<p>前者可以直接在layout的RV上，设置对应的items和itemView进去，也支持多种view type，还能直接设定对应的LayoutManager。</p>
<p>后者类似地，提供了xml中直接绑定RV的items和itemView的功能。</p>
<p>相比来说前者的功能更强大一些。但这些开源库对应地都丧失了灵活性，ViewModel需要遵循规范，事件的绑定也比较死板，不如自己继承Adapter来得强大。唯一的好处也就是可以少写点代码了。</p>
<h1 id="自定义属性">自定义属性</h1><p>默认的android命名空间下，我们会发现并不是所有的属性都能直接通过data binding进行设置，比如margin，padding，还有自定义View的各种属性。</p>
<p>遇到这些属性，我们就需要自己去定义它们的绑定方法。</p>
<h2 id="Setter">Setter</h2><p>就像Data Binding会自动去查找get方法一下，在遇到属性绑定的时候，它也会去自动寻找对应的set方法。</p>
<p>拿DrawerLayout举一个例子:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">android.support.v4.widget.DrawerLayout</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">“wrap_content”</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">“wrap_content”</span></span><br><span class="line">    <span class="attribute">app:scrimColor</span>=<span class="value">“@&#123;@color</span>/<span class="attribute">scrimColor</span>&#125;”/&gt;</span></span><br></pre></td></tr></table></figure>
<p>如此，通过使用app命名空间，data binding就会去根据属性名字找对应的set方法，scrimColor -&gt; setScrimColor:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setScrimColor</span><span class="params">(@ColorInt <span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">    mScrimColor = color;</span><br><span class="line">    invalidate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果找不到的话，就会在编译期报错。</p>
<p>利用这种特性，对一些第三方的自定义View，我们就可以继承它，来加上我们的set函数，以对其使用data binding。</p>
<p>比如Fresco的<code>SimpleDraweeView</code>，我们想要直接在xml指定url，就可以加上：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">    view.setImageURI(TextUtils.isEmpty(url) ? <span class="keyword">null</span> : Uri.parse(url));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这般，就能直接在xml中去绑定图片的url。这样是不是会比较麻烦呢，而且有一些系统的View，难道还要继承它们然后用自己实现的类？其实不然，我们还有其他方法可以做到自定义属性绑定。</p>
<h2 id="BindingMethods">BindingMethods</h2><p>如果View本身就支持这种属性的set，只是xml中的属性名字和java代码中的方法名不相同呢？难道就为了这个，我们还得去继承View，使代码产生冗余？</p>
<p>当然没有这么笨，这时候我们可以使用BindingMethods注释。</p>
<p>android:tint是给ImageView加上着色的属性，可以在不换图的前提下改变图标的颜色。如果我们直接对android:tint使用data binding，由于会去查找setTint方法，而该方法不存在，则会编译出错。而实际对应的方法，应该是<code>setImageTintList</code>。</p>
<p>这时候我们就可以使用BindingMethod指定属性的绑定方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingMethods</span>(&#123;</span><br><span class="line">       <span class="annotation">@BindingMethod</span>(type = “android.widget.ImageView”,</span><br><span class="line">                      attribute = “android:tint”,</span><br><span class="line">                      method = “setImageTintList”),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<p>我们也可以称BindingMethod为Setter重命名。</p>
<h2 id="BindingAdapter">BindingAdapter</h2><p>如果没有对应的set方法，或者方法签名不同怎么办？BindingAdapter注释可以帮我们来做这个。</p>
<p>比如View的android:paddingLeft属性，是没有对应的直接进行设置的方法的，只有setPadding(left, top, right, bottom)，而我们又不可能为了使用Data Binding去继承修改这种基础的View（即便修改了，还有一堆继承它的View呢）。又比如那些margin，需要修改必须拿到LayoutParams，这些都无法通过简单的set方法去做。</p>
<p>这时候我们可以使用BindingAdapter定义一个静态方法:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(<span class="string">"android:paddingLeft"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPaddingLeft</span><span class="params">(View view, <span class="keyword">int</span> padding)</span> </span>&#123;</span><br><span class="line">    view.setPadding(padding,</span><br><span class="line">                    view.getPaddingTop(),</span><br><span class="line">                    view.getPaddingRight(),</span><br><span class="line">                    view.getPaddingBottom());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>事实上这个Adapter已经由Data Binding实现好了，可以在android.databinding.adapters.ViewBindingAdapter看到有很多定义好的适配器，还有BindingMethod。如果需要自己再写点什么，仿照这些来写就好了。</p>
<p>我们还可以进行多属性绑定，比如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(&#123;<span class="string">"bind:imageUrl"</span>, <span class="string">"bind:error"</span>&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(ImageView view, String url, Drawable error)</span> </span>&#123;</span><br><span class="line">   Picasso.with(view.getContext()).load(url).error(error).into(view);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>来使用Picasso读取图片到ImageView。</p>
<h2 id="BindingConversion">BindingConversion</h2><p>有时候我们想在xml中绑定的属性，未必是最后的set方法需要的，比如我们想用color（int），但是view需要Drawable，比如我们想用String，而view需要的是Url。这时候我们就可以使用<code>BindingConversion</code>:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">View</span></span><br><span class="line">    <span class="attribute">android:background</span>=<span class="value">“@&#123;isError</span> ? @<span class="attribute">color</span>/<span class="attribute">red</span> <span class="attribute">:</span> @<span class="attribute">color</span>/<span class="attribute">white</span>&#125;”</span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">“wrap_content”</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">“wrap_content”</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingConversion</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ColorDrawable <span class="title">convertColorToDrawable</span><span class="params">(<span class="keyword">int</span> color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ColorDrawable(color);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="双向绑定">双向绑定</h1><h2 id="自定义Listener">自定义Listener</h2><p>过去，我们需要自己定义Listener来做双向绑定:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">EditText</span> <span class="attribute">android:text</span>=<span class="value">“@&#123;user.name&#125;”</span></span><br><span class="line">    <span class="attribute">android:afterTextChanged</span>=<span class="value">“@&#123;callback.change&#125;”</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Editable s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> String text = s.toString();</span><br><span class="line">    <span class="keyword">if</span> (!text.equals(name.get()) &#123;</span><br><span class="line">        name.set(text);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要自己绑定afterTextChanged方法，然后检测text是否有改变，有改变则去修改observable。</p>
<h2 id="新方式_-_@=">新方式 - @=</h2><p>现在可以直接使用@=（而不是@）来进行双向绑定了，使用起来十分简单</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">EditText</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:inputType</span>=<span class="value">"textNoSuggestions"</span></span><br><span class="line">    <span class="attribute">android:text</span>=<span class="value">"@=&#123;model.name&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样，我们对这个EditText的输入，就会自动set到对应model的name字段上。</p>
<h2 id="原理">原理</h2><h3 id="InverseBindingListener">InverseBindingListener</h3><p><code>InverseBindingListener</code>是事件发生时触发的监听器:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">InverseBindingListener</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onChange</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所有双向绑定，最后都是通过这个接口来observable改变的，各种监听，比如TextWatcher、OnCheckedChange，都是间接通过这个接口来通知的，以上面的EditText为例子，最后生成的InverseBindingListener:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> android.databinding.InverseBindingListener mboundView1androidTe = <span class="keyword">new</span> android.databinding.InverseBindingListener() &#123;</span><br><span class="line">     <span class="annotation">@Override</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         <span class="comment">// Inverse of model.name</span></span><br><span class="line">         <span class="comment">//         is model.setName((java.lang.String) callbackArg_0)</span></span><br><span class="line">         java.lang.String callbackArg_0 = android.databinding.adapters.TextViewBindingAdapter.getTextString(mboundView1);</span><br><span class="line">         <span class="comment">// localize variables for thread safety</span></span><br><span class="line">         <span class="comment">// model != null</span></span><br><span class="line">         <span class="keyword">boolean</span> modelObjectnull = <span class="keyword">false</span>;</span><br><span class="line">         <span class="comment">// model</span></span><br><span class="line">         com.github.markzhai.sample.FormModel model = mModel;</span><br><span class="line">         <span class="comment">// model.name</span></span><br><span class="line">         java.lang.String nameModel = <span class="keyword">null</span>;</span><br><span class="line">         modelObjectnull = (model) != (<span class="keyword">null</span>);</span><br><span class="line">         <span class="keyword">if</span> (modelObjectnull) &#123;</span><br><span class="line">             model.setName((java.lang.String) (callbackArg_0));</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p>
<h3 id="InverseBindingMethod_&amp;_InverseBindingAdapter">InverseBindingMethod &amp; InverseBindingAdapter</h3><p>上面的生成代码中，我们可以看到代码通过<code>TextViewBindingAdapter.getTextString(mboundView1)</code>去获得EditText中的字符串，查看源码可以看到</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@InverseBindingAdapter</span>(attribute = <span class="string">"android:text"</span>, event = <span class="string">"android:textAttrChanged"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTextString</span><span class="params">(TextView view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view.getText().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>原来跟上面的BindingMethod和BindingAdapter做set操作类似，双向绑定通过注解进行get操作。</p>
<p>完整的逻辑又是:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(<span class="string">"android:text"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, CharSequence text)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> CharSequence oldText = view.getText();</span><br><span class="line">    <span class="keyword">if</span> (text == oldText || (text == <span class="keyword">null</span> &amp;&amp; oldText.length() == <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (text <span class="keyword">instanceof</span> Spanned) &#123;</span><br><span class="line">        <span class="keyword">if</span> (text.equals(oldText)) &#123;</span><br><span class="line">            <span class="keyword">return</span>; <span class="comment">// No change in the spans, so don't set anything.</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!haveContentsChanged(text, oldText)) &#123;</span><br><span class="line">        <span class="keyword">return</span>; <span class="comment">// No content changes, so don't set anything.</span></span><br><span class="line">    &#125;</span><br><span class="line">    view.setText(text);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@InverseBindingAdapter</span>(attribute = <span class="string">"android:text"</span>, event = <span class="string">"android:textAttrChanged"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getTextString</span><span class="params">(TextView view)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> view.getText().toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@BindingAdapter</span>(value = &#123;<span class="string">"android:beforeTextChanged"</span>, <span class="string">"android:onTextChanged"</span>,</span><br><span class="line">        <span class="string">"android:afterTextChanged"</span>, <span class="string">"android:textAttrChanged"</span>&#125;, requireAll = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setTextWatcher</span><span class="params">(TextView view, <span class="keyword">final</span> BeforeTextChanged before,</span><br><span class="line">        <span class="keyword">final</span> OnTextChanged on, <span class="keyword">final</span> AfterTextChanged after,</span><br><span class="line">        <span class="keyword">final</span> InverseBindingListener textAttrChanged)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> TextWatcher newValue;</span><br><span class="line">    <span class="keyword">if</span> (before == <span class="keyword">null</span> &amp;&amp; after == <span class="keyword">null</span> &amp;&amp; on == <span class="keyword">null</span> &amp;&amp; textAttrChanged == <span class="keyword">null</span>) &#123;</span><br><span class="line">        newValue = <span class="keyword">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newValue = <span class="keyword">new</span> TextWatcher() &#123;</span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (before != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    before.beforeTextChanged(s, start, count, after);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (on != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    on.onTextChanged(s, start, before, count);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (textAttrChanged != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    textAttrChanged.onChange();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="annotation">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (after != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    after.afterTextChanged(s);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> TextWatcher oldValue = ListenerUtil.trackListener(view, newValue, R.id.textWatcher);</span><br><span class="line">    <span class="keyword">if</span> (oldValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">        view.removeTextChangedListener(oldValue);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newValue != <span class="keyword">null</span>) &#123;</span><br><span class="line">        view.addTextChangedListener(newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>我们也可以使用InverseBindingMethod做到一样的效果:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@InverseBindingMethods</span>(&#123;</span><br><span class="line">    <span class="annotation">@InverseBindingMethod</span>(</span><br><span class="line">    type=android.widget.TextView.class,</span><br><span class="line">    attribute=“android:text”,</span><br><span class="line">    method=“getText”,                   <span class="comment">// 默认会根据attribute name获取get</span></span><br><span class="line">    event=“android:textAttrChanged”)&#125;)  <span class="comment">// 默认根据attribute增加AttrChanged</span></span><br></pre></td></tr></table></figure></p>
<p>data binding通过<code>textAttrChanged</code>的event找到<code>setTextWatcher</code>方法，而<code>setTextWatcher</code>通知<code>InverseBindingListener</code>的<code>onChange</code>方法，onChange方法则使用找到的get和set方法去进行检查和更新。</p>
<h2 id="解决死循环">解决死循环</h2><p>如果仔细想想双向绑定的逻辑，用户输入导致实例事件发生，更新了实例的属性，实例的属性改变又会触发这个View的notify，从而变成了一个不断互相触发刷新的死循环。</p>
<p>为了解决死循环，我们需要做一个简单的检查，在上面的setText方法我们可以看到，如果两次的text没有改变，则会直接return，这样就杜绝了无限循环调用的可能。在自己做自定义双向绑定的时候，需要注意这点。</p>
<p>目前双向绑定仅支持如text，checked，year，month，hour，rating，progress等绑定。</p>
<h2 id="属性改变监听">属性改变监听</h2><p>如果除了更新Observable，我们还想做一些其他事情怎么办？比如根据输入内容更新标志位？<br>我们可以直接使用observable上的addOnPropertyChangedCallback方法:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mModel.addOnPropertyChangedCallback(<span class="keyword">new</span> Observable.OnPropertyChangedCallback() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPropertyChanged</span><span class="params">(Observable observable, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i == BR.name) &#123;</span><br><span class="line">            Toast.makeText(TwoWayActivity.<span class="keyword">this</span>, <span class="string">"name changed"</span>,</span><br><span class="line">                    Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == BR.password) &#123;</span><br><span class="line">            Toast.makeText(TwoWayActivity.<span class="keyword">this</span>, <span class="string">"password changed"</span>,</span><br><span class="line">                    Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h1 id="表达式链">表达式链</h1><h2 id="重复的表达式">重复的表达式</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ImageView</span> <span class="attribute">android:visibility</span>=<span class="value">“@&#123;user.isAdult</span> ? <span class="attribute">View.VISIBLE</span> <span class="attribute">:</span> <span class="attribute">View.GONE</span>&#125;”/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">android:visibility</span>=<span class="value">“@&#123;user.isAdult</span> ? <span class="attribute">View.VISIBLE</span> <span class="attribute">:</span> <span class="attribute">View.GONE</span>&#125;”/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">CheckBox</span> <span class="attribute">android:visibility</span>=<span class="value">"@&#123;user.isAdult ? View.VISIBLE : View.GONE&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>可以简化为:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ImageView</span> <span class="attribute">android:id</span>=<span class="value">“@+id</span>/<span class="attribute">avatar</span>”</span><br><span class="line"> <span class="attribute">android:visibility</span>=<span class="value">“@&#123;user.isAdult</span> ? <span class="attribute">View.VISIBLE</span> <span class="attribute">:</span> <span class="attribute">View.GONE</span>&#125;”/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span> <span class="attribute">android:visibility</span>=<span class="value">“@&#123;avatar.visibility&#125;”</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">CheckBox</span> <span class="attribute">android:visibility</span>=<span class="value">"@&#123;avatar.visibility&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="隐式更新">隐式更新</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">CheckBox</span> <span class="attribute">android:id</span>=<span class="value">”@+id</span>/<span class="attribute">seeAds</span>“/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ImageView</span> <span class="attribute">android:visibility</span>=<span class="value">“@&#123;seeAds.checked</span> ?</span><br><span class="line">  <span class="attribute">View.VISIBLE</span> <span class="attribute">:</span> <span class="attribute">View.GONE</span>&#125;”/&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样CheckBox的状态变更后ImageView会自动改变visibility。</p>
<h1 id="Lambda表达式">Lambda表达式</h1><p>除了直接使用方法引用，在Presenter中写和OnClickListener一样参数的方法，我们还能使用Lambda表达式:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android:onClick=“@&#123;(view)-&gt;presenter.save(view, item)&#125;”</span><br><span class="line">android:onClick=“@&#123;()-&gt;presenter.save(item)&#125;”</span><br><span class="line">android:onFocusChange=“@&#123;(v, fcs)-&gt;presenter.refresh(item)&#125;”</span><br></pre></td></tr></table></figure>
<p>我们还可以在lambda表达式引用view id（像上面表达式链那样），以及context。</p>
<h1 id="动画">动画</h1><h2 id="transition">transition</h2><p>使用data binding后，我们还能自动去做transition动画:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">binding.addOnRebindCallback(<span class="keyword">new</span> OnRebindCallback() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onPreBind</span><span class="params">(ViewDataBinding binding)</span> </span>&#123;</span><br><span class="line">        ViewGroup sceneRoot = (ViewGroup) binding.getRoot();</span><br><span class="line">        TransitionManager.beginDelayedTransition(sceneRoot);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p>这样，当我们的view发生改变，比如visibility变化的时候，就能看到一些transition动画。</p>
<h1 id="Component注入">Component注入</h1><p>如果我们想要利用data binding做一些测试功能怎么办？比如打点，记录一下东西:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBindingAdapter</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@BindingAdapter</span>(“android:text”)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, String value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isTesting) &#123;</span><br><span class="line">            doTesting(view, value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            TextViewBindingAdapter.setText(view, value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>但如此一来，我们就要给所有的方法都写上if/else，维护起来很困难，也影响美感。</p>
<p>那么我们就可以使用component:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBindingAdapter</span> <span class="keyword">extends</span> <span class="title">MyBindingAdapter</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setText</span><span class="params">(TextView view, String value)</span> </span>&#123;</span><br><span class="line">        doTesting(view, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DataBindingComponent</span> </span>&#123;</span><br><span class="line">    <span class="function">MyBindingAdapter <span class="title">getMyBindingAdapter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComponent</span> <span class="keyword">implements</span> <span class="title">DataBindingComponent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyBindingAdapter mAdapter = <span class="keyword">new</span> TestBindingAdapter();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MyBindingAdapter <span class="title">getMyBindingAdapter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mAdapter;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>静态的adapter怎么办呢，我们只需要把component作为第一个参数:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@BindingAdapter</span>(“android:src”)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">loadImage</span><span class="params">(TestComponent component, ImageView view, String url)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>最后通过<code>DataBindingUtil.setDefaultComponent(new TestComponent());</code>就能让data binding使用该Component提供的adapter方法。</p>
<h1 id="学习和使用建议">学习和使用建议</h1><h2 id="学习建议">学习建议</h2><ul>
<li>尽量在项目中进行尝试，只有在不断碰到业务的需求时，才会在真正的场景下使用并发现Data Binding的强大之处。</li>
<li>摸索xml和java的界限，不要以为Data Binding是万能的，而想尽办法把逻辑写在xml中，如果你的同事没法一眼看出这个表达式是做什么的，那可能它就应该放在Java代码中，以ViewModel的形式去承担部分逻辑。</li>
<li>Lambda表达式/测试时注入等Data Binding的高级功能也可以自己多试试，尤其是注入，相当强大。</li>
</ul>
<h2 id="使用建议">使用建议</h2><ul>
<li>对新项目，不要犹豫，直接上。</li>
<li>对于老的项目，可以替换ButterKnife这种库，从findViewById开始改造，逐渐替换老代码。</li>
<li>callback绑定只做事件传递，NO业务逻辑，比如转账</li>
<li>保持表达式简单（不要做过于复杂的字符串、函数调用操作）</li>
</ul>
<p>对于老项目，可以进行以下的逐步替换:</p>
<h3 id="Level_1_-_No_more_findViewById">Level 1 - No more findViewById</h3><p>逐步替换findViewById，取而代之地，使用binding.name, binding.age直接访问View。</p>
<h3 id="Level_2_-_SetVariable">Level 2 - SetVariable</h3><p>引入variable，把手动在代码对View进行set替换为xml直接引用variable。</p>
<h3 id="Level_3_-_Callback">Level 3 - Callback</h3><p>使用Presenter/Handler类来做事件的绑定。</p>
<h3 id="Level_4_-_Observable">Level 4 - Observable</h3><p>创建ViewModel类来进行即时的属性更新触发UI刷新。</p>
<h3 id="Level_5_-_双向绑定">Level 5 - 双向绑定</h3><p>运用双向绑定来简化表单的逻辑，将form data变成ObservableField。这样我们还可以在xml做一些酷炫的事情，比如button仅在所有field非空才为enabled（而过去要做到这个得加上好几个EditText的OnTextChange监听）。</p>
<h1 id="总结">总结</h1><p>本文上下两篇介绍了大部分data binding现存的特性及部分的实现原理，大家如果纯看而不实践的话，可能会觉得有些头大，建议还是通过项目进行一下实践，才能真正体会到data binding的强大之处。欢迎加入我们的QQ群（568863373）进行讨论，你也可以加我的微信（shin_87224330）一起学习。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>承接<a href="http://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/">上篇</a>，本篇继续讲解一些Data Binding更加进阶的内容，包括：列表绑定、自定义属性、双向绑定、表达式链]]>
    </summary>
    
      <category term="Data Binding" scheme="http://blog.zhaiyifan.cn/tags/Data-Binding/"/>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目7 - Data Binding入门篇]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/"/>
    <id>http://blog.zhaiyifan.cn/2016/06/16/android-new-project-from-0-p7/</id>
    <published>2016-06-15T16:19:00.000Z</published>
    <updated>2016-07-08T08:04:59.000Z</updated>
    <content type="html"><![CDATA[<h1 id="引">引</h1><p>Data Binding自从去年的Google I/O发布到至今，也有近一年的时间了。这一年来，从Beta到如今比较完善的版本，从Android Studio 1.3到如今2.1.2的支持，可以说Data Binding已经是一个可用度较高，也能带来实际生产力提升的技术了。</p>
<p>然而事实上，真正使用到Data Binding的公司、项目仍然是比较少的。可能是出于稳定性考虑，亦或是对Data Binding技术本身不够熟悉，又或许对新技术没什么追求。</p>
<p>我司在新的产品中就全面使用了Data Binding技术，无论是我，还是新来直接面对Data Binding上手的工程师也好，都对其爱不释手，用惯了后简直停不下来。</p>
<p>希望在看完本文的介绍后，会有更多的朋友产生兴趣，来使用Data Binding，参与它的讨论。</p>
<p>Demo源码库：<a href="https://github.com/markzhai/DataBindingSample" target="_blank" rel="external">DataBindingSample</a></p>
<h2 id="什么是Data_Binding">什么是Data Binding</h2><p>Data Binding，顾名思义，数据绑定，是Google对MVVM在Android上的一种实现，可以直接绑定数据到xml中，并实现自动刷新。现在最新的版本还支持双向绑定，尽管使用场景不是那么多。</p>
<p>Data Binding可以提升开发效率（节省很多以往需要手写的java代码），性能高（甚至超越手写代码），功能强（强大的表达式支持）。</p>
<h2 id="用途">用途</h2><ul>
<li>去掉Activities &amp; Fragments内的大部分UI代码（setOnClickListener, setText, findViewById, etc.)</li>
<li>XML变成UI的唯一真实来源</li>
<li>减少定义view id的主要用途（数据绑定直接发生在xml）</li>
</ul>
<h2 id="开源方案">开源方案</h2><ul>
<li><a href="https://github.com/JakeWharton/butterknife" target="_blank" rel="external">ButterKnife</a>, Jake大神的知名库了，可以少些很多findViewById，setOnClickListener，取而代之地用annotation去生成代码。</li>
<li><a href="http://androidannotations.org/" target="_blank" rel="external">Android Annotations</a>，同样通过annotation，大量的annotation，侵入性较强，需要遵循其规范写一些代码，像是@AfterViews注释中才能对View进行操作。</li>
<li><a href="http://robobinding.github.io/RoboBinding" target="_blank" rel="external">RoboBinding</a>，和Data Binding最相似的一个方案，同样很多事情放在xml去做了，使用了aspectJ去做生成。</li>
</ul>
<p>除了这些比较有名的，还有很多各不相同的方案，但自从data binding发布后，可以说它们都再也没有用武之地了，因为无论从性能、功能，还是ide的支持上，data binding都更好。</p>
<h2 id="优势">优势</h2><ul>
<li>UI代码放到了xml中，布局和数据更紧密</li>
<li>性能超过手写代码</li>
<li>保证执行在主线程</li>
</ul>
<h2 id="劣势">劣势</h2><ul>
<li>IDE支持还不那么完善（提示、表达式）</li>
<li>报错信息不那么直接</li>
<li>重构支持不好（xml中进行重构，java代码不会自动修改）</li>
</ul>
<h1 id="使用">使用</h1><p>使用起来实在很简单，在app模块的build.gradle中加上几行代码就行了。</p>
<h2 id="Gradle">Gradle</h2><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    …</span><br><span class="line">    dataBinding &#123;</span><br><span class="line">        enabled = <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="layout_tag">layout tag</h2><p>把一个普通的layout变成data binding layout也只要几行的修改:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">layout</span>&gt;</span></span><br><span class="line">	// 原来的layout</span><br><span class="line"><span class="tag">&lt;/<span class="title">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在xml的最外层套上layout标签即可，修改后就可以看到生成了该布局对应的*Binding类。</p>
<h2 id="Binding生成规则">Binding生成规则</h2><p>默认生成规则：xml通过文件名生成，使用下划线分割大小写。<br>比如activity_demo.xml，则会生成ActivityDemoBinding，item_search_hotel则会生成ItemSearchHotelBinding。</p>
<p>view的生成规则类似，只是由于是类变量，首字母不是大写，比如有一个TextView的id是first_name，则会生成名为firstName的TextView。</p>
<p>我们也可以自定义生成的class名字，只需要：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span> <span class="attribute">class</span>=<span class="value">“ContactItem”</span>&gt;</span></span><br><span class="line">…</span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>这样生成的类就会变成<code>ContactItem</code>。</p>
<h1 id="基础用法">基础用法</h1><h2 id="生成Binding实例">生成Binding实例</h2><p>所有Binding实例的生成都可以通过<code>DataBindingUtil</code>进行，方法名与该view的原inflate方法一致，如activity仍然为setContentView，只是增加了参数因为需要获得activity。</p>
<h2 id="去除findViewById">去除findViewById</h2><p>使用了Data Binding后，我们再也不需要findViewById，因为一切有id的view，都已经在Binding类中被初始化完成了，只需要直接通过binding实例访问即可。</p>
<h2 id="变量绑定">变量绑定</h2><p>使用data标签，我们就可以在xml中申明变量，在其中使用该变量的field，并通过binding实例set进来。</p>
<p>如:</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span></span><br><span class="line">        <span class="attribute">name</span>=<span class="value">"employee"</span></span><br><span class="line">        <span class="attribute">type</span>=<span class="value">"com.github.markzhai.databindingsample.Employee"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">    <span class="attribute">android:gravity</span>=<span class="value">"center_horizontal"</span></span><br><span class="line">    <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">    <span class="attribute">tools:context</span>=<span class="value">".DemoActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">        <span class="attribute">android:text</span>=<span class="value">"@&#123;employee.lastName&#125;"</span></span><br><span class="line">        <span class="attribute">android:layout_marginLeft</span>=<span class="value">"5dp"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>然后我们就可以在java代码中使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">binding.setEmployee(employee);</span><br><span class="line"><span class="comment">// 或者直接通过setVariable</span></span><br><span class="line">binding.setVariable(BR.employee, employee);</span><br></pre></td></tr></table></figure></p>
<h2 id="事件绑定">事件绑定</h2><p>严格意义上来说，事件绑定也是一种变量绑定。我们可以在xml中直接绑定</p>
<ul>
<li>android:onClick</li>
<li>android:onLongClick</li>
<li>android:onTextChanged</li>
<li>…</li>
</ul>
<h3 id="方法引用">方法引用</h3><p>通常会在java代码中定义一个名为Handler或者Presenter的类，然后set进来，方法签名需和对应listener方法一致。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">layout</span></span><br><span class="line">    <span class="attribute">xmlns:android</span>=<span class="value">"http://schemas.android.com/apk/res/android"</span></span><br><span class="line">    <span class="attribute">xmlns:tools</span>=<span class="value">"http://schemas.android.com/tools"</span></span><br><span class="line">    <span class="attribute">xmlns:bind</span>=<span class="value">"http://schemas.android.com/apk/res-auto"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"android.view.View"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">variable</span></span><br><span class="line">            <span class="attribute">name</span>=<span class="value">"employee"</span></span><br><span class="line">            <span class="attribute">type</span>=<span class="value">"com.github.markzhai.databindingsample.Employee"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">variable</span></span><br><span class="line">            <span class="attribute">name</span>=<span class="value">"presenter"</span></span><br><span class="line">            <span class="attribute">type</span>=<span class="value">"com.github.markzhai.databindingsample.DemoActivity.Presenter"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="title">LinearLayout</span></span><br><span class="line">        <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:layout_height</span>=<span class="value">"match_parent"</span></span><br><span class="line">        <span class="attribute">android:gravity</span>=<span class="value">"center_horizontal"</span></span><br><span class="line">        <span class="attribute">android:orientation</span>=<span class="value">"vertical"</span></span><br><span class="line">        <span class="attribute">tools:context</span>=<span class="value">".DemoActivity"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">EditText</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"match_parent"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:hint</span>=<span class="value">"输入 First Name"</span></span><br><span class="line">            <span class="attribute">android:onTextChanged</span>=<span class="value">"@&#123;presenter::onTextChanged&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">            <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">            <span class="attribute">android:onClick</span>=<span class="value">"@&#123;presenter.onClick&#125;"</span></span><br><span class="line">            <span class="attribute">android:text</span>=<span class="value">"@&#123;employee.firstName&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="title">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在Java代码中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    binding.setPresenter(<span class="keyword">new</span> Presenter());</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Presenter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        employee.setFirstName(s.toString());</span><br><span class="line">        employee.setFired(!employee.isFired.get());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(DemoActivity.<span class="keyword">this</span>, <span class="string">"点到了"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="监听器绑定（lambda）">监听器绑定（lambda）</h3><p>可以不遵循默认的方法签名：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">    <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span></span><br><span class="line">    <span class="attribute">android:layout_margin</span>=<span class="value">"5dp"</span></span><br><span class="line">    <span class="attribute">android:visibility</span>=<span class="value">"@&#123;employee.isFired ? View.GONE : View.VISIBLE&#125;"</span></span><br><span class="line">    <span class="attribute">android:onClick</span>=<span class="value">"@&#123;() -&gt; presenter.onClickListenerBinding(employee)&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Presenter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClickListenerBinding</span><span class="params">(Employee employee)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(DemoActivity.<span class="keyword">this</span>, employee.getLastName(),</span><br><span class="line">                Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Data_Binding原理">Data Binding原理</h1><h2 id="狭义原理">狭义原理</h2><p>狭义上，我们可以直接通过调用的接口以及生成的一些类，来观察其工作原理。</p>
<p>作为切入口，我们来看看DataBindingUtil的接口:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">setContentView</span><span class="params">(Activity activity, <span class="keyword">int</span> layoutId,</span><br><span class="line">        DataBindingComponent bindingComponent)</span> </span>&#123;</span><br><span class="line">    activity.setContentView(layoutId);</span><br><span class="line">    View decorView = activity.getWindow().getDecorView();</span><br><span class="line">    ViewGroup contentView = (ViewGroup) decorView.findViewById(android.R.id.content);</span><br><span class="line">    <span class="keyword">return</span> bindToAddedViews(bindingComponent, contentView, <span class="number">0</span>, layoutId);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends ViewDataBinding&gt; <span class="function">T <span class="title">bindToAddedViews</span><span class="params">(DataBindingComponent component,</span><br><span class="line">        ViewGroup parent, <span class="keyword">int</span> startChildren, <span class="keyword">int</span> layoutId)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> endChildren = parent.getChildCount();</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> childrenAdded = endChildren - startChildren;</span><br><span class="line">    <span class="keyword">if</span> (childrenAdded == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">final</span> View childView = parent.getChildAt(endChildren - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> bind(component, childView, layoutId);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> View[] children = <span class="keyword">new</span> View[childrenAdded];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childrenAdded; i++) &#123;</span><br><span class="line">            children[i] = parent.getChildAt(i + startChildren);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> bind(component, children, layoutId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可以看到，然后会跑到具体Binding类中:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ItemFeedRecommendUserBinding</span><span class="params">(android.databinding.DataBindingComponent bindingComponent, View root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>(bindingComponent, root, <span class="number">9</span>);</span><br><span class="line">    <span class="keyword">final</span> Object[] bindings = mapBindings(bindingComponent, root, <span class="number">5</span>, sIncludes, sViewsWithIds);</span><br><span class="line">    <span class="keyword">this</span>.mboundView0 = (android.widget.LinearLayout) bindings[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">this</span>.mboundView0.setTag(<span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">this</span>.recommendUserFirst = (com.amokie.stay.databinding.IncludeRecommendUserBinding) bindings[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">this</span>.recommendUserFourth = (com.amokie.stay.databinding.IncludeRecommendUserBinding) bindings[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">this</span>.recommendUserSecond = (com.amokie.stay.databinding.IncludeRecommendUserBinding) bindings[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">this</span>.recommendUserThird = (com.amokie.stay.databinding.IncludeRecommendUserBinding) bindings[<span class="number">3</span>];</span><br><span class="line">    setRootTag(root);</span><br><span class="line">    <span class="comment">// listeners</span></span><br><span class="line">    invalidateAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到所有view是一次完成的初始化，比起一个个进行findViewById，显然这样一次性会更快。</p>
<p>除了view的初始化，在<code>executeBindings</code>中，会通过<code>mDirtyFlags</code>去判断各个field是否需要更新，而其置位则通过各个set函数去更新。</p>
<h2 id="流程原理">流程原理</h2><p><img src="/images/android-new-project-from-0-db-1.png" alt="data binding"></p>
<p>处理layout文件 -&gt; 变为没有data binding的layout文件<br>解析表达式 -&gt; 确保表达式语法正确<br>解析依赖 -&gt; user.isAdmin, isAdmin是field还是method…<br>Setter -&gt; 如visibility</p>
<h2 id="性能">性能</h2><ul>
<li>0反射</li>
<li>findViewById需要遍历整个viewgroup，而现在只需要做一次就可以初始化所有需要的view</li>
<li>使用位标记来检验更新（dirtyFlags）</li>
<li>数据改变在下一次批量更新才会触发操作</li>
<li>表达式缓存，同一次刷新中不会重复计算</li>
</ul>
<h1 id="进阶用法">进阶用法</h1><h2 id="表达式">表达式</h2><ul>
<li>算术 + - / * %</li>
<li>字符串合并 +</li>
<li>逻辑 &amp;&amp; ||</li>
<li>二元 &amp; | ^</li>
<li>一元 + - ! ~</li>
<li>移位 &gt;&gt; &gt;&gt;&gt; &lt;&lt;</li>
<li>比较 == &gt; &lt; &gt;= &lt;=</li>
<li>Instanceof</li>
<li>Grouping ()</li>
<li>文字 - character, String, numeric, null</li>
<li>Cast</li>
<li>方法调用</li>
<li>Field 访问</li>
<li>Array 访问 []</li>
<li>三元 ?:</li>
</ul>
<p>尚且不支持this, super, new, 以及显示的泛型调用。</p>
<p>值得一提的是还有空合并运算符，如<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:text=“@&#123;user.displayName ?? user.lastName&#125;”</span><br></pre></td></tr></table></figure></p>
<p>会取第一个非空值作为结果。</p>
<p>这里举一个常见的例子，某个view的margin是其左侧ImageView的margin加上该ImageView的宽度，以往我们可能需要再定义一个dimension来放这两个值的合，现在只需要<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android:marginLeft="@&#123;@dimen/margin + @dimen/avatar_size&#125;"</span><br></pre></td></tr></table></figure></p>
<p>就搞定了。</p>
<p>我们甚至还可以直接组合字符串，如:<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">android:text="@&#123;@string/nameFormat(firstName, lastName)&#125;"</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">string</span> <span class="attribute">name</span>=<span class="value">"nameFormat"</span>&gt;</span>%s, %s<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="避免空指针">避免空指针</h2><p>data binding会自动帮助我们进行空指针的避免，比如说@{employee.firstName}，如果employee是null的话，employee.firstName则会被赋默认值（null）。int的话，则是0。</p>
<p>需要注意的是数组的越界，毕竟这儿是xml而不是java，没地方让你去判断size的。</p>
<h2 id="include">include</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">include</span> <span class="attribute">layout</span>=<span class="value">“@layout</span>/<span class="attribute">name</span>” <span class="attribute">bind:user</span>=<span class="value">"@&#123;user&#125;"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>对于include的布局，使用方法类似，不过需要在里面绑定两次，外面include该布局的layout使用<code>bind:user</code>给set进去。</p>
<p>这里需要注意的一点是，被include的布局必须顶层是一个ViewGroup，目前Data Binding的实现，如果该布局顶层是一个View，而不是ViewGroup的话，binding的下标会冲突（被覆盖），从而产生一些预料外的结果。</p>
<h2 id="ViewStubs">ViewStubs</h2><p>ViewStub比较特殊，在被实际inflate前是不可见的，所以使用了特殊的方案，用了final的<code>ViewStubProxy</code>来代表它，并监听了<code>ViewStub.OnInflateListener</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> OnInflateListener mProxyListener = <span class="keyword">new</span> OnInflateListener() &#123;</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onInflate</span><span class="params">(ViewStub stub, View inflated)</span> </span>&#123;</span><br><span class="line">        mRoot = inflated;</span><br><span class="line">        mViewDataBinding = DataBindingUtil.bind(mContainingBinding.mBindingComponent,</span><br><span class="line">                inflated, stub.getLayoutResource());</span><br><span class="line">        mViewStub = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mOnInflateListener != <span class="keyword">null</span>) &#123;</span><br><span class="line">            mOnInflateListener.onInflate(stub, inflated);</span><br><span class="line">            mOnInflateListener = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mContainingBinding.invalidateAll();</span><br><span class="line">        mContainingBinding.forceExecuteBindings();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>在onInflate的时候才会进行真正的初始化。</p>
<h2 id="Observable">Observable</h2><p>一个纯净的Java ViewModel类被更新后，并不会让UI去更新。而数据绑定后，我们当然会希望数据变更后UI会即时刷新，Observable就是为此而生的概念。</p>
<h3 id="BaseObservable">BaseObservable</h3><p>类继承BaseObservable:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">BaseObservable</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> String firstName;</span><br><span class="line">   <span class="keyword">private</span> String lastName;</span><br><span class="line">   <span class="annotation">@Bindable</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getFirstName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.firstName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="annotation">@Bindable</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getLastName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">this</span>.lastName;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFirstName</span><span class="params">(String firstName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">       notifyPropertyChanged(BR.firstName);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLastName</span><span class="params">(String lastName)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">       notifyPropertyChanged(BR.lastName);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>BaseObservable提供了一系列notify函数（其实就是notifyChange和notifyPropertyChanged），前者会刷新所有的值域，后者则只更新对应BR的flag，该BR的生成通过注释@Bindable生成，在上面的实例代码中，我们可以看到两个get方法被注释上了，所以我们可以通过BR访问到它们并进行特定属性改变的notify。</p>
<h3 id="Observable_Fields">Observable Fields</h3><p>如果所有要绑定的都需要创建Observable类，那也太麻烦了。所以Data Binding还提供了一系列Observable，包括 ObservableBoolean, ObservableByte, ObservableChar, ObservableShort, ObservableInt, ObservableLong, ObservableFloat, ObservableDouble, 和ObservableParcelable。我们还能通过ObservableField泛型来申明其他类型，如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; firstName =</span><br><span class="line">       <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> ObservableField&lt;String&gt; lastName =</span><br><span class="line">       <span class="keyword">new</span> ObservableField&lt;&gt;();</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">final</span> ObservableInt age = <span class="keyword">new</span> ObservableInt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而在xml中，使用方法和普通的String，int一样，只是会自动刷新，但在java中访问则会相对麻烦：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">user.firstName.set(<span class="string">"Google"</span>);</span><br><span class="line"><span class="keyword">int</span> age = user.age.get();</span><br></pre></td></tr></table></figure></p>
<p>相对来说，每次要get/set还是挺麻烦，私以为还不如直接去继承BaseObservable。</p>
<h3 id="Observable_Collections">Observable Collections</h3><p>有一些应用使用更动态的结构来保存数据，这时候我们会希望使用Map来存储数据结构。Observable提供了<code>ObservableArrayMap</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObservableArrayMap&lt;String, Object&gt; user = <span class="keyword">new</span> ObservableArrayMap&lt;&gt;();</span><br><span class="line">user.put(<span class="string">"firstName"</span>, <span class="string">"Google"</span>);</span><br><span class="line">user.put(<span class="string">"lastName"</span>, <span class="string">"Inc."</span>);</span><br><span class="line">user.put(<span class="string">"age"</span>, <span class="number">17</span>);</span><br></pre></td></tr></table></figure></p>
<p>而在xml中，我们可以直接通过下标key访问它们：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">import</span> <span class="attribute">type</span>=<span class="value">"android.databinding.ObservableMap"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">variable</span> <span class="attribute">name</span>=<span class="value">"user"</span> <span class="attribute">type</span>=<span class="value">"ObservableMap&amp;lt;String, Object&gt;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">data</span>&gt;</span></span><br><span class="line">…</span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">   <span class="attribute">android:text</span>=<span class="value">'@&#123;user["lastName"]&#125;'</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">TextView</span></span><br><span class="line">   <span class="attribute">android:text</span>=<span class="value">'@&#123;String.valueOf(1 + (Integer)user["age"])&#125;'</span></span><br><span class="line">   <span class="attribute">android:layout_width</span>=<span class="value">"wrap_content"</span></span><br><span class="line">   <span class="attribute">android:layout_height</span>=<span class="value">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>当我们不想定义key的时候，可以使用<code>ObservableArrayList</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ObservableArrayList&lt;Object&gt; user = <span class="keyword">new</span> ObservableArrayList&lt;&gt;();</span><br><span class="line">user.add(<span class="string">"Google"</span>);</span><br><span class="line">user.add(<span class="string">"Inc."</span>);</span><br><span class="line">user.add(<span class="number">17</span>);</span><br></pre></td></tr></table></figure>
<p>layout中直接通过数字下标进行访问。</p>
<h2 id="动态变量">动态变量</h2><p>有时候，我们并不知道具体生成的binding类是什么。比如在RecyclerView中，可能有多种ViewHolder，而我们拿到的holder只是一个基类（这个基类具体怎么写下篇中会提到），这时候，我们可以在这些item的layout中都定义名字同样的variable，比如item，然后直接调用<code>setVariable</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(BindingHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">final</span> T item = mItems.get(position);</span><br><span class="line">   holder.getBinding().setVariable(BR.item, item);</span><br><span class="line">   holder.getBinding().executePendingBindings();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>executePendingBindings会强制立即刷新绑定的改变。</p>
<h1 id="参考资料">参考资料</h1><p><a href="https://developer.android.com/topic/libraries/data-binding/index.html" target="_blank" rel="external">https://developer.android.com/topic/libraries/data-binding/index.html</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="引">引</h1><p>Data Binding自从去年的Google I/O发布到至今，也有近一年的时间了。这一年来，从Beta到如今比较完善的版本，从Android Studio 1.3到如今2.1.2的支持，可以说Data Binding已经是一个可用度较高]]>
    </summary>
    
      <category term="Data Binding" scheme="http://blog.zhaiyifan.cn/tags/Data-Binding/"/>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目6 - Repository层(下) Realm、缓存、异常处理]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/05/15/android-new-project-from-0-p6/"/>
    <id>http://blog.zhaiyifan.cn/2016/05/15/android-new-project-from-0-p6/</id>
    <published>2016-05-15T07:32:55.000Z</published>
    <updated>2016-05-19T02:35:42.000Z</updated>
    <content type="html"><![CDATA[<p>承接上篇 <a href="http://blog.zhaiyifan.cn/2016/04/30/android-new-project-from-0-p5/">从零开始的Android新项目5 - Repository层(上) Retrofit、Repository组装</a>，本文继续介绍Realm、缓存，以及统一的异常处理设计。</p>
<h1 id="Realm">Realm</h1><p><a href="https://realm.io/" target="_blank" rel="external">Realm</a>在移动端数据库中也算是比较有名的一款了，以其跨平台和惊人的速度而闻名。啊，对了，还有文档多。</p>
<p>这里要黑的就是文档问题，Realm虽然乍一看文档很多，但是老实说，写的挺乱的。不过总体来说，实践和应用中感觉还不错，性能好，也比较方便，比起不稳定的DBFlow和麻烦至极的GreenDao来好了太多了，唯一的美中不足就是so比较大，会增大包的体积1MB。</p>
<h2 id="引入">引入</h2><p>从Realm 0.90开始，用法与之前有了改变：</p>
<p>在root的build.gralde中:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">buildscript</span> &#123;</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">dependencies</span> &#123;</span><br><span class="line">        <span class="keyword">classpath</span> <span class="string">"io.realm:realm-gradle-plugin:0.90.1"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后在对应需要应用到Realm的，比如data module的build.gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply plugin: <span class="string">'realm-android'</span></span><br></pre></td></tr></table></figure></p>
<p>即可使用Realm。</p>
<h2 id="使用">使用</h2><p>使用起来也很方便，比如我们想要缓存用户的信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPo</span> <span class="keyword">extends</span> <span class="title">RealmObject</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@PrimaryKey</span></span><br><span class="line">    <span class="keyword">public</span> String id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String headerUrl;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">long</span> updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样就对应了一个表，其主键为id，另外有3列name, headerUrl, 以及updateTime。</p>
<p>如果想要查询，只需要：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">UserPo user = getRealm().where(UserPo.class)</span><br><span class="line">        .equalTo(<span class="string">"id"</span>, userId)</span><br><span class="line">        .findFirst();</span><br></pre></td></tr></table></figure>
<p>如果要写入一条记录：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">User user = <span class="keyword">new</span> UserPo();</span><br><span class="line">user.setName(userInfoEntity.getNickName());</span><br><span class="line">user.setId(userInfoEntity.getUserId());</span><br><span class="line">user.setHeaderUrl(userInfoEntity.getHeaderImageUrl());</span><br><span class="line">user.setUpdateTime(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">getRealm().beginTransaction();</span><br><span class="line">getRealm().copyToRealmOrUpdate(user);</span><br><span class="line">getRealm().commitTransaction();</span><br></pre></td></tr></table></figure></p>
<p>就是这么简单。</p>
<p>如果想要直接和Retrofit一起应用，去进行串行化，可以参考该<a href="https://gist.github.com/cmelchior/ddac8efd018123a1e53a" target="_blank" rel="external">Gist</a>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 结合 Realm, Retrofit 和 RxJava (使用了Retrolambda以简化符号)的例子。</span></span><br><span class="line"><span class="comment">// 读取所有Person，然后与从GitHub获取的最新状态merge到一起</span></span><br><span class="line">Realm realm = Realm.getDefaultInstance();</span><br><span class="line">GitHubService api = retrofit.create(GitHubService.class);</span><br><span class="line">realm.where(Person.class).isNotNull(<span class="string">"username"</span>).findAllAsync().asObservable()</span><br><span class="line">    .filter(persons.isLoaded)</span><br><span class="line">    .flatMap(persons -&gt; Observable.from(persons))</span><br><span class="line">    .flatMap(person -&gt; api.user(person.getGithubUserName())</span><br><span class="line">    .observeOn(AndroidSchedulers.mainThread())</span><br><span class="line">    .subscribe(user -&gt; showUser(user));</span><br></pre></td></tr></table></figure>
<p>更多详情可以去<a href="https://realm.io/docs/java/latest/" target="_blank" rel="external">官网</a>看，migration/relationship等等支持应有尽有，我只能说，文档实在太长太长了。</p>
<h1 id="内存">内存</h1><p>内存，也就是直接使用变量存储在对应repository中，如果非空则优先直接返回内存中的变量。</p>
<h2 id="LruCache">LruCache</h2><p>LruCache限定了最大的entry数量，近期最少使用算法保证了淘汰机制的合理性。使用场景如用户信息缓存，会淘汰那些最近没有访问过的用户的信息缓存。使用可参考Google官网：<a href="https://developer.android.com/reference/android/util/LruCache.html" target="_blank" rel="external">LruCache</a>。</p>
<h2 id="变量存储">变量存储</h2><p>变量存储很简单，直接在Repository实现类中直接变量存储上一次的返回结果，在下一次请求的时候优先使用内存缓存。使用场景如请求后直接刷新本地的变量，下次调用repository方法使用啊concat先返回内存里的变量，然后再使用网络数据进行刷新。</p>
<h1 id="统一异常处理">统一异常处理</h1><p>作为Repository层，本身不会，也不应该去处理任何异常和错误（比如请求的错误码），一切都将作为Exception异常抛给上层去做统一处理，而RxJava的onError机制也帮助我们能优雅地去做这件事。</p>
<h2 id="Observable-error">Observable.error</h2><p>类似在上一篇中提到的方法，我们可以使用Observable.error返回异常，供上层根据该异常做对应处理。无论是网络异常，数据库异常，亦或是服务器response异常等等，都可以进行分类创建对应的Exception类，抛给上层。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">extractData</span><span class="params">(Observable&lt;MrResponse&gt; observable, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> observable.flatMap(response -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (response == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> NetworkConnectionException());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.getStatusCode() == ResponseException.STATUS_CODE_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.just(mGson.fromJson(mGson.toJson(response.data), clazz));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Logger.e(TAG, response.data);</span><br><span class="line">            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> ResponseException(response));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Subscriber-onError">Subscriber.onError</h2><p>我们使用Subscriber的基类来处理通用错误，其他所有Subscriber继承它:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MrSubscriber</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">DefaultSubscriber</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onError(e);</span><br><span class="line">       <span class="keyword">if</span> (!handleCommonResponseError((Exception) e)) &#123;</span><br><span class="line">           <span class="keyword">if</span> (e != <span class="keyword">null</span> &amp;&amp; e.getMessage() != <span class="keyword">null</span>) &#123;</span><br><span class="line">               Logger.w(TAG, e.getMessage());</span><br><span class="line">           &#125;</span><br><span class="line">           showErrorMessage(<span class="keyword">new</span> DefaultErrorBundle((Exception) e));</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">showErrorMessage</span><span class="params">(ErrorBundle errorBundle)</span> </span>&#123;</span><br><span class="line">    String errorMessage = ErrorMessageFactory.create(<span class="keyword">this</span>, errorBundle.getException());</span><br><span class="line">    showErrorMessage(errorMessage);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">showErrorMessage</span><span class="params">(String errorMessage)</span> </span>&#123;</span><br><span class="line">    ToastUtils.show(<span class="keyword">this</span>, errorMessage);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>DefaultErrorBundle</code>是exception的wrapper，管理了其错误。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultErrorBundle</span> <span class="keyword">implements</span> <span class="title">ErrorBundle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_ERROR_MSG = <span class="string">"Unknown error"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Exception exception;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DefaultErrorBundle</span><span class="params">(Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.exception = exception;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Exception <span class="title">getException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> exception;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getErrorMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (exception != <span class="keyword">null</span>) ? <span class="keyword">this</span>.exception.getMessage() : DEFAULT_ERROR_MSG;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ErrorMessageFactory</code>是错误消息工厂，根据exception创建对应的错误消息提示，让用户不至于碰到错误莫名其妙。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span><br><span class="line"> * Factory used to create error messages from an Exception as a condition.</span><br><span class="line"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorMessageFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"ErrorMessageFactory"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">ErrorMessageFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//empty</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Creates a String representing an error message.</span><br><span class="line">     *</span><br><span class="line">     * <span class="doctag">@param</span> context   Context needed to retrieve string resources.</span><br><span class="line">     * <span class="doctag">@param</span> exception An exception used as a condition to retrieve the correct error message.</span><br><span class="line">     * <span class="doctag">@return</span> &#123;<span class="doctag">@link</span> String&#125; an error message.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">create</span><span class="params">(Context context, Exception exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotEmpty(exception.getMessage())) &#123;</span><br><span class="line">            Logger.e(TAG, exception.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String message = context.getString(R.string.exception_message_generic);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> NetworkConnectionException) &#123;</span><br><span class="line">            message = context.getString(R.string.exception_message_no_connection);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> NotFoundException) &#123;</span><br><span class="line">            message = context.getString(R.string.exception_message_not_found);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ResponseException) &#123;</span><br><span class="line">            message = exception.getMessage();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> HttpException) &#123;</span><br><span class="line">            message = exception.getMessage();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="handleCommonResponseError">handleCommonResponseError</h3><p>通常，服务器会返回错误信息，我们需要根据一些code进行对应处理，MrSubscriber的onError就调用了<code>handleCommonResponseError</code>来处理这些通用错误：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">handleCommonResponseError</span><span class="params">(Exception exception)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> handled = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (exception <span class="keyword">instanceof</span> ResponseException) &#123;</span><br><span class="line">        ResponseException responseException = (ResponseException) exception;</span><br><span class="line">        <span class="keyword">switch</span> (responseException.getStatusCode()) &#123;</span><br><span class="line">            <span class="keyword">case</span> ResponseException.ERROR_CODE_NEED_LOGIN:</span><br><span class="line">                handled = <span class="keyword">true</span>;</span><br><span class="line">                getUserSystem().setVuser(<span class="string">""</span>);</span><br><span class="line">                getNavigator().navigateToLoginPage(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ResponseException.ERROR_CODE_NEED_PERFECT_PROFILE:</span><br><span class="line">                handled = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">if</span> (responseException.getVuser() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    getUserSystem().setVuser(responseException.getVuser().getVuser());</span><br><span class="line">                &#125;</span><br><span class="line">                getNavigator().navigateToPerfectProfile(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> ResponseException.ERROR_CODE_NEED_THIRD_PARTY_BIND:</span><br><span class="line">                handled = <span class="keyword">true</span>;</span><br><span class="line">                getNavigator().navigateToThirdPartyBind(<span class="keyword">this</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> handled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Log_&amp;_上报">Log &amp; 上报</h3><p>出错了当然要上报啦，bugly、友盟，本地写文件打zip包上传，Logger做的就是写文件log了，这些常见的app都会去做，这里就不赘述了。</p>
<h1 id="总结和下集预告">总结和下集预告</h1><p>本系列两篇文章描述了Android项目中，Repository层的设计与实现，也可以理解它为data或者model层。一个好的Repository层和上层相对独立，内聚完成业务逻辑的数据部分，即便内部有修改，比如添加了缓存，对外仍然保持一致。而好的异常处理设计一方面让代码中不会充斥着杂七杂八的 try &amp; catch，另一方，恰当的错误展示也让用户知道究竟出了什么错，不至于莫名其妙。</p>
<p>下一次不知是何时相见，希望能为大家带来我们项目中使用React Native进行混合开发的苦与甜。</p>
<p><strong>另外，打个小广告，本司的新产品Crew已经在各大Android应用市场上线，专注于职场垂直社交。一搜和兴趣相投的人聊天。iOS版本正在审核中。</strong></p>
<p><em>2个字找到志趣相投的职场伙伴，秒搜陌生人同类，智能自动破冰。多关键字叠加，高效率锁定职场同僚。精准匹配兴趣对象，超轻聊天，更能一键组建群聊，加入一群人的狂欢。</em></p>
<p>demo没空写了，反正我也没混淆，直接反编译来黑我吧。哈哈。有bug或者功能上的意见建议欢迎直接反馈给我。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>承接上篇 <a href="http://blog.zhaiyifan.cn/2016/04/30/android-new-project-from-0-p5/">从零开始的Android新项目5 - Repository层(上) Retrofit、Repository组装]]>
    </summary>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Realm" scheme="http://blog.zhaiyifan.cn/tags/Realm/"/>
    
      <category term="Repository" scheme="http://blog.zhaiyifan.cn/tags/Repository/"/>
    
      <category term="异常处理" scheme="http://blog.zhaiyifan.cn/tags/%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目5 - Repository层(上) Retrofit、Repository组装]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/04/30/android-new-project-from-0-p5/"/>
    <id>http://blog.zhaiyifan.cn/2016/04/30/android-new-project-from-0-p5/</id>
    <published>2016-04-30T03:14:49.000Z</published>
    <updated>2016-07-06T09:42:51.000Z</updated>
    <content type="html"><![CDATA[<p>如期而至的Repository篇，内部实现则由Realm、Retrofit，以及内存级LruCache组成。<br>Repository，顾名思义，即仓库，向上层屏蔽了数据来源和内部实现细节，不需要了解货物来源，只需要拿走就行了。</p>
<p>由于篇幅问题，将分为上下两篇，本篇主要介绍Retrofit的应用和Repository层组装，下篇会讲解本地缓存（包括Realm和内存缓存）以及基于异常的设计。</p>
<h1 id="Why_Repository">Why Repository</h1><p>首先，为什么我们需要Repository层呢？一言以蔽之，屏蔽细节。</p>
<p>上层（activity/fragment/presenter）不需要知道数据的细节（或者说 - 数据源），来自于网络、数据库，亦或是内存等等。如此，一来上层可以不用关心细节，二来底层可以根据需求修改，不会影响上层，两者的分离用可以帮助协同开发。</p>
<p>举些例子：</p>
<ul>
<li>当现在是无网状态，我希望列表能直接显示上一次的数据，而不会是空页面。</li>
<li>除非好友的用户数据过期（比如超过一天），否则希望直接使用本地缓存中的，但如果缓存没有，或者过期，则需要拉取并更新。</li>
<li>点赞后，即便请求还没发送或者没有收到response，仍然希望显示点赞后的状态。<br>等等。</li>
</ul>
<p>如果这些需求，我们都要实现在View或者Presenter中，就会导致充斥大量数据逻辑，目的不单一，难以维护。而Repository层就是来封装这些逻辑的。</p>
<h1 id="Overview">Overview</h1><p>如图，业务层只能看到repository接口。</p>
<p><img src="http://blog.zhaiyifan.cn/images/android-new-project-from-0-repository-1.png" alt="Repository Overview"></p>
<h1 id="Retrofit">Retrofit</h1><p><a href="https://github.com/square/retrofit" target="_blank" rel="external">Retrofit</a>是Android界网红公司<a href="https://squareup.com/" target="_blank" rel="external">Square</a>所开发维护的一个HTTP网络库，目前最新版本是2.0.2（截止2016年4月30日）。其内部使用了自家的<a href="https://github.com/square/okhttp" target="_blank" rel="external">OkHttp</a>。</p>
<p>关于Retrofit的实现机制啊简介的，网上已经很多了，这里我就不啰嗦了，官方文档见<a href="http://square.github.io/retrofit/" target="_blank" rel="external">项目主页</a>。这里主要讲讲实际项目中的应用实践。</p>
<h2 id="import">import</h2><p>root build.gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> retrofitVersion = <span class="string">"2.0.2"</span></span><br><span class="line"><span class="keyword">def</span> okHttpVersion = <span class="string">'3.2.0'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>.ext &#123;</span><br><span class="line">    libRetrofit = <span class="string">"com.squareup.retrofit2:retrofit:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libRetrofitConverterGson = <span class="string">"com.squareup.retrofit2:converter-gson:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libRetrofitAdapterRxJava = <span class="string">"com.squareup.retrofit2:adapter-rxjava:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libOkHttpLoggingInterceptor = <span class="string">"com.squareup.okhttp3:logging-interceptor:$&#123;okHttpVersion&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>repository module的build.gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> rootProject.ext.libRetrofit</span><br><span class="line">    <span class="keyword">compile</span> rootProject.ext.libRetrofitConverterGson</span><br><span class="line">    <span class="keyword">compile</span> rootProject.ext.libRetrofitAdapterRxJava</span><br><span class="line">    <span class="keyword">compile</span> rootProject.ext.libOkHttpLoggingInterceptor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="OkHttpClient">OkHttpClient</h2><p>自底向上地，我们需要一个OkHttpClient来设置给Retrofit，这里作为实例，放出一段包含大部分你可能会用到的功能的Client创建代码，可以根据需要进行调整。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> OkHttpClient <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// log用拦截器</span></span><br><span class="line">    HttpLoggingInterceptor logging = <span class="keyword">new</span> HttpLoggingInterceptor();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开发模式记录整个body，否则只记录基本信息如返回200，http协议版本等</span></span><br><span class="line">    <span class="keyword">if</span> (IS_DEV) &#123;</span><br><span class="line">        logging.setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logging.setLevel(HttpLoggingInterceptor.Level.BASIC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果使用到HTTPS，我们需要创建SSLSocketFactory，并设置到client</span></span><br><span class="line">    SSLSocketFactory sslSocketFactory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这里直接创建一个不做证书串验证的TrustManager</span></span><br><span class="line">        <span class="keyword">final</span> TrustManager[] trustAllCerts = <span class="keyword">new</span> TrustManager[]&#123;</span><br><span class="line">                <span class="keyword">new</span> X509TrustManager() &#123;</span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span></span><br><span class="line">                            <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span></span><br><span class="line">                            <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[]&#123;&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Install the all-trusting trust manager</span></span><br><span class="line">        <span class="keyword">final</span> SSLContext sslContext = SSLContext.getInstance(<span class="string">"SSL"</span>);</span><br><span class="line">        sslContext.init(<span class="keyword">null</span>, trustAllCerts, <span class="keyword">new</span> java.security.SecureRandom());</span><br><span class="line">        <span class="comment">// Create an ssl socket factory with our all-trusting manager</span></span><br><span class="line">        sslSocketFactory = sslContext.getSocketFactory();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Logger.e(TAG, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">            <span class="comment">// HeadInterceptor实现了Interceptor，用来往Request Header添加一些业务相关数据，如APP版本，token信息</span></span><br><span class="line">            .addInterceptor(<span class="keyword">new</span> HeadInterceptor())</span><br><span class="line">            .addInterceptor(logging)</span><br><span class="line">            <span class="comment">// 连接超时时间设置</span></span><br><span class="line">            .connectTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">            <span class="comment">// 读取超时时间设置</span></span><br><span class="line">            .readTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">            .sslSocketFactory(sslSocketFactory)</span><br><span class="line">            <span class="comment">// 信任所有主机名</span></span><br><span class="line">            .hostnameVerifier((hostname, session) -&gt; <span class="keyword">true</span>)</span><br><span class="line">            <span class="comment">// 这里我们使用host name作为cookie保存的key</span></span><br><span class="line">            .cookieJar(<span class="keyword">new</span> CookieJar() &#123;</span><br><span class="line">                <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;HttpUrl, List&lt;Cookie&gt;&gt; cookieStore = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveFromResponse</span><span class="params">(HttpUrl url, List&lt;Cookie&gt; cookies)</span> </span>&#123;</span><br><span class="line">                    cookieStore.put(HttpUrl.parse(url.host()), cookies);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> List&lt;Cookie&gt; <span class="title">loadForRequest</span><span class="params">(HttpUrl url)</span> </span>&#123;</span><br><span class="line">                    List&lt;Cookie&gt; cookies = cookieStore.get(HttpUrl.parse(url.host()));</span><br><span class="line">                    <span class="keyword">return</span> cookies != <span class="keyword">null</span> ? cookies : <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上包含了大部分你可能需要的特性，可以自由进行组合。</p>
<h2 id="RxJava异步请求">RxJava异步请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MrService <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (MrService.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mInstance = <span class="keyword">new</span> MrService();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">MrService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">MrService</span><span class="params">(<span class="keyword">boolean</span> useRxJava)</span> </span>&#123;</span><br><span class="line">    Retrofit.Builder builder = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">            .baseUrl(IS_DEV ? API_DEV_URL : API_PRODUCT_URL)</span><br><span class="line">            .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">            .client(getClient());</span><br><span class="line">    <span class="keyword">if</span> (useRxJava) &#123;</span><br><span class="line">        builder.addCallAdapterFactory(RxJavaCallAdapterFactory.create());</span><br><span class="line">    &#125;</span><br><span class="line">    mRetrofit = builder.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应API请求类如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SystemApi</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="annotation">@FormUrlEncoded</span></span><br><span class="line">    <span class="annotation">@POST</span>(<span class="string">"user/feedback"</span>)</span><br><span class="line">    <span class="function">Observable&lt;MrResponse&gt; <span class="title">feedback</span><span class="params">(@Field(<span class="string">"content"</span>)</span> String content,</span><br><span class="line">                                    @<span class="title">Field</span><span class="params">(<span class="string">"model_name"</span>)</span> String modelName,</span><br><span class="line">                                    @<span class="title">Field</span><span class="params">(<span class="string">"system_version"</span>)</span> String systemVersion,</span><br><span class="line">                                    @<span class="title">Field</span><span class="params">(<span class="string">"img_keys"</span>)</span> List&lt;String&gt; imageKeyList)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="同步请求">同步请求</h2><p>有时候我们需要做同步请求，比如提供结果给一些第三方库，它们可能需要直接返回对应数据（像我最近碰到的融云….），而我们只需要拉数据同步返回，对其所在线程和调用事件均一脸懵逼。</p>
<p>这时候就需要创建一个同步的retrofit客户端，其实就是不要去使用RxJava的adapter啦。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MrService <span class="title">getSynchronousInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mSyncInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (MrService.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mSyncInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mSyncInstance = <span class="keyword">new</span> MrService(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mSyncInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应地，我们需要定义请求类，这里我们需要使用Call&lt;&gt;去包一下最终解析对象的类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RongCloudApi</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@FormUrlEncoded</span></span><br><span class="line">    <span class="annotation">@POST</span>(<span class="string">"im/getGroupInfo"</span>)</span><br><span class="line">    <span class="function">Call&lt;MrResponse&gt; <span class="title">getGroupInfoSynchronous</span><span class="params">(@Field(<span class="string">"group_id"</span>)</span> String groupId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@FormUrlEncoded</span></span><br><span class="line">    <span class="annotation">@POST</span>(<span class="string">"user/nameCardLite"</span>)</span><br><span class="line">    <span class="function">Call&lt;MrResponse&gt; <span class="title">getNameCardLiteSynchronous</span><span class="params">(@Field(<span class="string">"uid"</span>)</span> String userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="数据格式解析">数据格式解析</h2><p>数据的解析当然是必不可少的一环了，常用格式对应的序列化库以retrofit官网为例:</p>
<ul>
<li>Gson: com.squareup.retrofit2:converter-gson</li>
<li>Jackson: com.squareup.retrofit2:converter-jackson</li>
<li>Moshi: com.squareup.retrofit2:converter-moshi</li>
<li>Protobuf: com.squareup.retrofit2:converter-protobuf</li>
<li>Wire: com.squareup.retrofit2:converter-wire</li>
<li>Simple XML: com.squareup.retrofit2:converter-simplexml</li>
<li>Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars</li>
</ul>
<p>部分高大上公司可能自己使用内部的二进制格式，自己实现ConverterFactory去解析就行了。</p>
<p>这里以最常用的json为例，使用GsonConverterFactory，良好的数据结构通常都会带有状态码和对应信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@SerializedName</span>(<span class="string">"status_no"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> statusCode;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@SerializedName</span>(<span class="string">"status_msg"</span>)</span><br><span class="line"><span class="keyword">private</span> String statusMessage;</span><br></pre></td></tr></table></figure>
<p>根据statusCode可以快速判断是否出现错误，通常0或者某个正数为正确，负数则根据和服务器的协定做不同处理。<br>这里对Gson的bean，推荐使用插件GsonFormat，生成起来很方便。</p>
<p>至于具体的数据，则有两种方案，一是使用data作为key把具体数据套起来，内部则使用K/V进行存储，保证不存在不规范的直接丢一个array在data里面的情形。</p>
<h3 id="二次的组合解析">二次的组合解析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"status_no"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> statusCode;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"status_msg"</span>)</span><br><span class="line">    <span class="keyword">private</span> String statusMessage;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"time"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"data"</span>)</span><br><span class="line">    <span class="keyword">public</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter and getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二次组合的解析通过将创建一个通用的Response Bean来做泛解析，如果statusCode表明接口请求成功，则继续解析data:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">extractData</span><span class="params">(Observable&lt;MrResponse&gt; observable, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> observable.flatMap(response -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (response == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> NetworkConnectionException());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.getStatusCode() == ResponseException.STATUS_CODE_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.just(mGson.fromJson(mGson.toJson(response.data), clazz));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Logger.e(TAG, response.data);</span><br><span class="line">            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> ResponseException(response));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用则如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Observable&lt;AlbumApiResult&gt; <span class="title">listPhoto</span><span class="params">(String uid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RepositoryUtils.extractData(mAlbumApi.listPhoto(uid), AlbumApiResult.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所有接口都可以通过<code>RepositoryUtils.extractData()</code>进行泛型调用。</p>
<p>如此一来，如果response为空，我们仅在statusCode正确时才会去解析具体的数据，否则抛出对应的异常（基于异常的数据层设计在下面会具体讲）。</p>
<h3 id="单次的继承处理">单次的继承处理</h3><p>上一种处理方式尽管看起来很优雅，但是存在一个问题，就是会重复解析，当statusCode正确时，会对data的object再次进行json处理。如果确实是error，比如statusCode为-1、-2这种，确实节省了开销，因为gson会去反射构造对应类的adapter，解析所有字段，创建对应的BoundField。</p>
<p>但考虑到大部分情况下还是正确的response居多，所以也可以使用继承的结构，我们创建<code>BaseResponse</code>存放通用字段，其他所有Gson Bean则继承该<code>BaseResponse</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"status_no"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> statusCode;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"status_msg"</span>)</span><br><span class="line">    <span class="keyword">private</span> String statusMessage;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"time"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter and getter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteResponse</span> <span class="keyword">extends</span> <span class="title">BaseResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"other_fields"</span>)</span><br><span class="line">    <span class="keyword">private</span> String otherFields;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的判断和error抛出可以参照上小节的，这里就不赘述了。</p>
<h1 id="Repository层组装实现">Repository层组装实现</h1><p>组装即根据组合各个数据源，如此又分为直接在实现方法中组合结果，亦或是通过DataStoreFactory进行封装。根据复杂度和个人喜好而定，毕竟使用后者需要新增好多类，相对来说有一点重。</p>
<h2 id="基于接口的设计实现">基于接口的设计实现</h2><p>拿一个最简单的repository，七牛Repository来作例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QiniuRepository</span> </span>&#123;</span><br><span class="line">    <span class="function">Observable&lt;QiniuToken&gt; <span class="title">getQiniuUploadToken</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiniuDataRepository</span> <span class="keyword">implements</span> <span class="title">QiniuRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="keyword">protected</span> QiniuApi mQiniuApi;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QiniuDataRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;QiniuToken&gt; <span class="title">getQiniuUploadToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RepositoryUtils.extractData(mQiniuApi.getQiniuUploadToken(), QiniuToken.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="DataStoreFactory">DataStoreFactory</h2><p>使用DataStoreFactory封装数据来源：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDataStoreFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserCache mUserCache;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="keyword">protected</span> UserApi mUserApi;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDataStoreFactory</span><span class="params">(Context context, UserCache userCache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (context == <span class="keyword">null</span> || userCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Constructor parameters cannot be null!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mContext = context.getApplicationContext();</span><br><span class="line">        mUserCache = userCache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Create &#123;<span class="doctag">@link</span> UserDataStore&#125; from a user id.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDataStore <span class="title">create</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        UserDataStore userDataStore;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!mUserCache.isExpired() &amp;&amp; mUserCache.isCached(userId)) &#123;</span><br><span class="line">            userDataStore = <span class="keyword">new</span> DiskUserDataStore(mUserCache);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userDataStore = createCloudDataStore();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userDataStore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Create &#123;<span class="doctag">@link</span> UserDataStore&#125; to retrieve data from the Cloud.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDataStore <span class="title">createCloudDataStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CloudUserDataStore(mUserApi, mUserCache);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>老实说这样的话，一来要写很多方法和接口，二来通过Factory判断创建哪种DataStore还是挺麻烦的，比如用户主页数据我们可以判断，但登陆登出这些，就需要直接指定<code>createCloudDataStore()</code>了，所以个人认为意义不大。</p>
<h2 id="在实现方法中组合">在实现方法中组合</h2><p>如下是使用DBFlow和网络Api进行组合的一个list获取接口。</p>
<p>我们使用RxJava的concat组合2个Observable，前者从cache(数据库)获取数据，后者从网络Api获取数据，通常数据库当然会更快。我们还保留了一个参数isForceRefresh来保证在某些情况下可以强制从网络获取数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> Observable&lt;List&lt;OperationPositionWrapper&gt;&gt; getHome(<span class="keyword">final</span> <span class="keyword">boolean</span> isForceRefresh) &#123;</span><br><span class="line">    <span class="keyword">final</span> Observable&lt;List&lt;OperationPositionWrapper&gt;&gt; fromCache = Observable.create(</span><br><span class="line">            <span class="keyword">new</span> Observable.OnSubscribe&lt;List&lt;OperationPosition&gt;&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> List&lt;OperationPosition&gt;&gt; subscriber)</span> </span>&#123;</span><br><span class="line">                    List&lt;OperationPosition&gt; dbCache = <span class="keyword">new</span> Select().from(OperationPosition.class).queryList();</span><br><span class="line">                    <span class="keyword">if</span> (dbCache != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        subscriber.onNext(dbCache);</span><br><span class="line">                    &#125;</span><br><span class="line">                    subscriber.onCompleted();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .map(<span class="keyword">new</span> Func1&lt;List&lt;OperationPosition&gt;, List&lt;OperationPositionWrapper&gt;&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> List&lt;OperationPositionWrapper&gt; <span class="title">call</span><span class="params">(List&lt;OperationPosition&gt; operationPositions)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> OperationPositionMapper.wrap(operationPositions);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .filter(<span class="keyword">new</span> Func1&lt;List&lt;OperationPositionWrapper&gt;, Boolean&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(List&lt;OperationPositionWrapper&gt; operationPositionWrappers)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> ListUtils.isNotEmpty(operationPositionWrappers);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Observable&lt;List&lt;OperationPositionWrapper&gt;&gt; fromNetwork = RepositoryUtils.observableWithApi(<span class="keyword">new</span> GetOperationPositionsForYouleHomeApi())</span><br><span class="line">            .map(<span class="keyword">new</span> Func1&lt;List&lt;OperationPositionPO&gt;, List&lt;OperationPositionWrapper&gt;&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> List&lt;OperationPositionWrapper&gt; <span class="title">call</span><span class="params">(List&lt;OperationPositionPO&gt; operationPositionList)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> OperationPositionMapper.transform(operationPositionList);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .doOnNext(<span class="keyword">new</span> Action1&lt;List&lt;OperationPositionWrapper&gt;&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(List&lt;OperationPositionWrapper&gt; operationPositionWrappers)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (ListUtils.isNotEmpty(operationPositionWrappers)) &#123;</span><br><span class="line">                        <span class="keyword">new</span> Delete().from(OperationPosition.class).queryClose();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (OperationPositionWrapper wrapper : operationPositionWrappers) &#123;</span><br><span class="line">                        wrapper.getOperationPosition().save();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isForceRefresh) &#123;</span><br><span class="line">        <span class="keyword">return</span> fromNetwork;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.concat(fromCache, fromNetwork);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1><p>本篇为Repository层的上篇，主要介绍了组合及Retrofit的应用。下篇将会讲述数据库，内存Cache，以及统一的异常处理设计。</p>
<p><strong>另外，打个小广告，本司的新产品Crew已经在各大Android应用市场上线，专注于职场垂直社交。一搜和兴趣相投的人聊天。iOS版本正在审核中。</strong></p>
<p><em>2个字找到志趣相投的职场伙伴，秒搜陌生人同类，智能自动破冰。多关键字叠加，高效率锁定职场同僚。精准匹配兴趣对象，超轻聊天，更能一键组建群聊，加入一群人的狂欢。</em></p>
<p>demo没空写了，反正我也没混淆，直接反编译来黑我吧。哈哈。有bug或者功能上的意见建议欢迎直接反馈给我。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如期而至的Repository篇，内部实现则由Realm、Retrofit，以及内存级LruCache组成。<br>Repository，顾名思义，即仓库，向上层屏蔽了数据来源和内部实现细节，不需要了解货物来源，只需要拿走就行了。</p>
<p>由于篇幅问题，将分为上下两篇]]>
    </summary>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Repository" scheme="http://blog.zhaiyifan.cn/tags/Repository/"/>
    
      <category term="Retrofit" scheme="http://blog.zhaiyifan.cn/tags/Retrofit/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算机从业者的技术成长学习之路]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/04/28/about-learning/"/>
    <id>http://blog.zhaiyifan.cn/2016/04/28/about-learning/</id>
    <published>2016-04-28T07:25:06.000Z</published>
    <updated>2016-05-02T02:33:01.000Z</updated>
    <content type="html"><![CDATA[<p>最近因为在学习一些新的东西，所以Android的东西没有怎么更新。趁着有些闲工夫，简单说说技术上的学习，也算是自己对这几年工作来的一个小结和经验吧。</p>
<p>希望这篇东西可以给那些在校的，亦或是才踏入工作没多久的程序员同伴们一些帮助。毕竟我自己也曾经止步不前，不知所措迷茫过。</p>
<h1 id="英语">英语</h1><p>老实说，没有比英语性价比更高的，需要学习的东西了。靠着别人的翻译，或者机翻，终究不是办法的。笔者自己日语英语姑且算是熟练掌握的地步，但在初期直接看那些全英文的书籍，仍然会觉得头痛（谢谢HKUST虐我），但坚持下来就会发现其实计算机的英语还是有一个范围的，多看看熟悉起来，就会觉得并没有什么难，甚至比起很多翻译来说更容易看懂。</p>
<p>混迹GitHub就会发现国内的很多开发者英语上欠缺还是很大的，尤其是一些description和readme直接就上中文的。即便你英语渣，机翻也行啊。毕竟是计算机社区，英语才是通用语言。用中文去一些国外开发者的仓库里提issue或者回复也是一种很粗鲁的行为。</p>
<p>如果让我说一种对技术帮助做大的语言，那必然就是英语。有了英语，才能真正地独立学习。</p>
<h1 id="Google">Google</h1><p>问小白问题之前，你Google过吗？如果让我看到一个开发动不动去搜百度，那我估计会武断地认定他很菜。其实Google是我们最好的老师，只要能正确把握问题的关键字，几乎没有找不到的答案，大部分会在StackOverflow上，其他散落在GitHub、博客等等地方。</p>
<p>如果你要找的知识实在冷门，比如react native的一些深入用法，android上的视频so阉割这种，那恐怕只能找找做这块的朋友或者自己研究了，国内有一些好心的开发者或许会分享在自己的博客。</p>
<p>至于科学上网，这个话题相关的技术太多了，请自行找方法，VPN也好，SS也好，都很简单，相对的投入和产出对程序员来说性价比是很高的。实在不想花钱的去用AWS的免费云服务器搭SS也行。</p>
<h1 id="实践">实践</h1><p>看是没有用的。比如看一篇关于Hybrid App原理的文章，或许它写得很好，但其实就算看完了，让我自己去写一个，或者讲讲怎么去做一个我们应用的版本，Android/iOS端通用的方案，最后也是支支吾吾说的不知所以。最后还是要去实践做一些Hybrid页面才能真正掌握，能说清楚这里面的原理和应用场景。</p>
<p>纸上谈兵终觉浅。</p>
<h1 id="警惕体力劳动">警惕体力劳动</h1><p>当你的工作成为一种体力劳动，而自己无法从中获得新的体验和知识的时候，需要警惕究竟发生了什么。</p>
<h2 id="想得太少">想得太少</h2><p>对做的内容停留在完成的阶段，而不对更好的方案，实现细节去思考更多，比如用了某个API，会不会去仔细看看其究竟是怎么做的。或许你知道Handler，Looper，那你知不知道主线程的一切，四大组件的生命周期，各种View的触摸事件都是消息驱动，在mainLooper里面进行处理的呢？</p>
<h2 id="工作内容重复">工作内容重复</h2><p>当Focus在一块上太久之后，难免会碰到这种瓶颈，这时候可以看看是不是能换一块做，比如做做缓存、Hybrid、启动优化、视频等等。可以做的领域很多，实在发现兴趣不在此，换着做后台或者前端也行。倘若因为个人原因，比如公司不让换或者可能工资会低很多，挤一挤时间在side project里面搞搞也可以，只是有没有心的问题罢了。</p>
<p>我面试过一些做Android 5-6年的程序员，但大部分真的连一些优秀的2-3年经验的开发者都远远不如，问设计不懂设计，问流行的开源项目回答就是“好像听说过”。我不希望我认识的开发者以后变成这样的人。但你若是总是重复劳动，难免像这样1年的工作经验重复了5年。</p>
<p>在额外学习的时候，更多关注的应该是不同的地方，而不是说这个学Python，下个月去学Go，想想语言的差异性在哪里，自己试试看做一些项目，培养全栈工程师的底子。还在念大学的时候，我学了C、C++、Java、Python、Ruby、PHP、HTML、Perl、SQL/Redis/HBase等等等等，但对每个的理解都不够深刻，现在想来那时候是做错了的。</p>
<p>你应该有自己的专长，但也要能从全局的角度思考问题，一个不懂前端的后端老大会导致前端过重不灵活，反正只要自己这儿的模块清晰就好，一个不懂前端的前端老大也会让下面的人不要抱怨，做出来就好。</p>
<h2 id="公司问题">公司问题</h2><p>发生在一些项目经理逼得特别紧，老大又比较无能的地方。项目经理为了向上面交待，对工程师说“这个进度能不能再压一下呀”，或者干脆直接不听工程师的意见强行缩短工期，导致没有时间去深入学习。老大明知这种情况，却睁一只眼闭一只眼。这种公司，还是离开为妙。</p>
<p>一个合格的leader，或者说mentor应该做些什么？至少从我的角度来看，尽管对公司他需要对项目负责，但对团队内的开发者，他更应该做的是观察和指导，看清楚那些团队毒瘤，营造团队氛围，而不是一味Push催进度和表现自己。</p>
<h1 id="记录和总结">记录和总结</h1><p>写博客是为了什么？</p>
<p>至少对我来说，写下的东西更多是对自己的一个总结和交待。如果我能写下来，至少能证明我有信心自己确实是这么去理解的，没有去坑人。另外，姑且也算是一种成长的足迹吧，偶尔自己还会去看看笔记。</p>
<p>分享也是目的之一，希望大家能互相进步，这样才能促进发展。</p>
<p>写博客也好，写一些笔记也好，点点滴滴也是对自己的一种整理。</p>
<h1 id="问自己">问自己</h1><p>想清楚自己要的究竟是什么。</p>
<p>做全还是钻？想做一个超强并发量的后台？想黑别人的系统？想做出精准有效的推荐算法？还是想做别人能实际用到的产品？</p>
<p>笔者正是因为想要的是后者，所以成为了Android开发（为什么没有选iOS，大约是Android的开放性吸引了我）。而现在，因为发现自己欠缺的（对前端驾轻就熟，大部分的事情对我来说只是体力活，而自己想承担一个完整的项目却又不行），所以又重新拾起了Node.js，看起了ES6，思考设计和产品的问题。</p>
<hr>
<p>希望大家都能想清楚自己想做的，要成为的样子。能自主地去学习。毕竟师傅带进门，修行靠个人。我不想鸡汤，大家各自走好，望来日可并肩一起，彼此说一句“很高兴遇见你”。</p>
<p>原文发布于：<a href="http://blog.zhaiyifan.cn/2016/04/28/about-learning/">http://blog.zhaiyifan.cn/2016/04/28/about-learning/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近因为在学习一些新的东西，所以Android的东西没有怎么更新。趁着有些闲工夫，简单说说技术上的学习，也算是自己对这几年工作来的一个小结和经验吧。</p>
<p>希望这篇东西可以给那些在校的，亦或是才踏入工作没多久的程序员同伴们一些帮助。毕竟我自己也曾经止步不前，不知所措]]>
    </summary>
    
      <category term="Work" scheme="http://blog.zhaiyifan.cn/tags/Work/"/>
    
      <category term="闲言闲语" scheme="http://blog.zhaiyifan.cn/categories/%E9%97%B2%E8%A8%80%E9%97%B2%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Centos7安装Node.js并搭建Server]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/04/25/node-web-server-build-1/"/>
    <id>http://blog.zhaiyifan.cn/2016/04/25/node-web-server-build-1/</id>
    <published>2016-04-25T02:53:52.000Z</published>
    <updated>2016-04-28T10:00:55.000Z</updated>
    <content type="html"><![CDATA[<p><strong>未完</strong></p>
<h1 id="安装Node">安装Node</h1><p>我们选择使用<code>nvm</code>安装Node.js:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 使用cnpm的nvm mirror</span><br><span class="line">curl -o- https://raw.githubusercontent.com/cnpm/nvm/master/install.sh | bash</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">nvm list-remote</span><br><span class="line">nvm install v4.<span class="number">4.3</span></span><br><span class="line">nvm use v4.<span class="number">4.3</span></span><br><span class="line">nvm <span class="built_in">alias</span> default v4.<span class="number">4.3</span></span><br></pre></td></tr></table></figure></p>
<p>安装cnpm:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry=https://registry.npm.taobao.org install -g cnpm</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>未完</strong></p>
<h1 id="安装Node">安装Node</h1><p>我们选择使用<code>nvm</code>安装Node.js:<br><figure class="highlight bash"><table><tr><td c]]>
    </summary>
    
      <category term="Node.js" scheme="http://blog.zhaiyifan.cn/tags/Node-js/"/>
    
      <category term="Server" scheme="http://blog.zhaiyifan.cn/tags/Server/"/>
    
      <category term="Node.js" scheme="http://blog.zhaiyifan.cn/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React.js 新手村教程]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/04/22/trans-react-newbies-tutorial/"/>
    <id>http://blog.zhaiyifan.cn/2016/04/22/trans-react-newbies-tutorial/</id>
    <published>2016-04-22T02:54:01.000Z</published>
    <updated>2016-11-14T15:27:14.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="http://www.leanpanda.com/blog/2016/04/06/react-newbies-tutorial/" target="_blank" rel="external">HOMEBLOG React JS: newbies tutorial</a></li>
<li>原文作者 : Elise Cicognani</li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a></li>
<li>校对者: <a href="https://github.com/JasinYip" target="_blank" rel="external">JasinYip</a>, <a href="https://github.com/malcolmyu" target="_blank" rel="external">malcolmyu</a>, <a href="https://github.com/antonia0912" target="_blank" rel="external">羊羊羊</a></li>
</ul>
</blockquote>
<p>正如你能从标题猜到的，这篇文章的目标是给那些有很少编程经验的读者的。比如，像我这样的人：因为迄今为止，我才探索了编程世界6个月。<strong>所以，这将是一篇新手村教程！</strong> 你只需要拥有对 HTML 和 CSS 的理解，以及基本的 JavaScript（JS）知识就能看懂本文。</p>
<p>注意：在接下来的例子中，我们将会利用 ES6 提供的新能力，来简化写 JS 代码的过程。然而，你也能完全使用 ES5 来写 React。</p>
<p>预计阅读时间9分钟</p>
<h1 id="什么是_React_？">什么是 React ？</h1><p>React 是一个 JS 库，由 Facebook 和 Instagram 创建(<a href="https://facebook.github.io/react/" target="_blank" rel="external">https://facebook.github.io/react/</a>)。它通过将应用分为一些动态的、可复用的 <strong>组件</strong>，来使我们可以创建单页应用(<a href="http://www.leanpanda.com/blog/2015/05/25/single-page-application-development/" target="_blank" rel="external">Single Page Applications (SPA)</a>)。</p>
<p>一个 React 组件是一个继承了由 React 提供的 <strong>Component</strong> 的 JS 类。一个组件代表并定义了一块 HTML 代码，以及任何与这块代码相关的行为，比如点击事件。组件就像是乐高积木，可以用来组建成所需的复杂应用。完全由 JS 代码构成的组件，可以被隔离和复用。基本方法是 <strong>render()</strong>，它简单地返回一片HTML代码。</p>
<p>这种用来定义 React 组件的语法被称为 <strong>JSX</strong>。该语法由 React 的创建者们所开发，被用来简化 JS-HTML 代码的组件内交互。使用该语法写的代码在变成实际 JS 代码前必须被编译。</p>
<h1 id="创建一个组件（component）">创建一个组件（component）</h1><p>为了创建我们的组件并将它渲染为一页 HTML，我们首先在我们的 HTML 文件里需要定义一个有唯一 id 的 div。接着，我们将要在 JSX 文件里写代码，以连接 React 组件到使用其 id 的 div，如下面的例子所示。这样做将会指导浏览器在相关 DOM 标签所在的页面渲染组件。</p>
<iframe height="266" scrolling="no" src="//codepen.io/makhenzi/embed/XXdmvL/?height=266&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen &lt;a href=”<a href="http://codepen.io/makhenzi/pen/XXdmvL/&quot;&gt;Start&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi/pen/XXdmvL/&quot;&gt;Start&lt;/a&amp;gt</a>; by Makhenzi (&lt;a href=”<a href="http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt</a>;) on &lt;a href=”<a href="http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt</a>;.</iframe>

<p>See the Pen <a href="http://codepen.io/makhenzi/pen/XXdmvL/" target="_blank" rel="external">Start</a> by Makhenzi (<a href="http://codepen.io/makhenzi" target="_blank" rel="external">@makhenzi</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>JSX 内的 HTML 标签属性和普通 HTML 内的是几乎一样的；唯一不同的是“class”，在 JSX 里面变成了“className”。类 HTML 语法使用圆括号闭合，而包含 JS 的块则使用尖括号闭合。正如你将看到的。render() <em>总</em> 会返回一个 div，而在其中开发者可以自由引入他们认为合适的任意多的标签和元素。</p>
<h2 id="例子：海盗的灭绝">例子：海盗的灭绝</h2><p><img src="http://ww4.sinaimg.cn/large/a490147fjw1f2x94p1ev2j20m80etjtt.jpg" alt=""></p>
<p>如果我们选择使用 React 来创建这张图，我们可以对屏幕上各个日期进行可视化，并在那些日期被点击的时候，才显示对应的温度和海盗数量。</p>
<p>为此我们需要2个组件：第一个用来渲染日期，并将每个日期链接到给定的海盗数量和温度；第二个则需要用来接收日期上的点击事件对应的信息，如海盗的数量和当时的温度，接着基于这些数据渲染选择的元素。</p>
<p>前者相当于是“父亲”的角色，并包含多个后面的“子”组件的链接，而后者则紧密依赖于它们的“父亲”。</p>
<p>React 结构，被称为<a href="https://facebook.github.io/react/docs/working-with-the-browser.html" target="_blank" rel="external">虚拟 DOM</a>，可以使我们在组件的内容发生改变的时候，不需要刷新整个页面，而可以只更新对应组件。为此，组件需要一个内部方法，来保存变量 data 和 赋值给该元素的会被改变的 HTML 属性。这些属性会自行链接到那些我们在组件内定义的，会负责响应变化的方法。</p>
<h2 id="状态(State)和属性(props)">状态(State)和属性(props)</h2><p>在我们的例子里，那个独立的变量 data 是由日期组成的。这些会根据点击事件所集合的 DOM 内连锁反应进而根据对应海盗、温度信息而进行改变。所以我们将会根据每个 “DATA” 对象内的对应日期去保存信息。我们还将利用 React 在父组件内的 <code>this.state={}</code> 属性来以键值对拷贝形式保存变量数据的。</p>
<p>以这种形式组织程序使得我们可以利用 React 提供的方法，来以“状态(state)”的形式和数据交互，并对其进行任意更改。</p>
<p>考虑到我们想要使用 DATA 对象的 key 来渲染 HTML 内的日期，最好可以找到一种方法来在 key 上使用 JS 的 <code>map()</code> 方法(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="external">Array.prototype.map()</a>)，以便能直接显示返回到 <code>render()</code> 的 HTML。事实上确实有方法可以做到！我们只需要把 JS 代码包裹在双花括号里，并放置在想要代码输出显示的管理该组件的 DOM 块内，然后就好了。</p>
<p>在这个特殊例子中，我们将在组件内的方法里定义 <code>map()</code> 回调，其将在同一组件的<code>render()</code>内返回一片 HTML 代码。</p>
<iframe height="266" scrolling="no" src="//codepen.io/makhenzi/embed/XXdmvL/?height=266&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen &lt;a href=”<a href="http://codepen.io/makhenzi/pen/XXdmvL/&quot;&gt;Start&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi/pen/XXdmvL/&quot;&gt;Start&lt;/a&amp;gt</a>; by Makhenzi (&lt;a href=”<a href="http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt</a>;) on &lt;a href=”<a href="http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt</a>;.</iframe>

<p>See the Pen <a href="http://codepen.io/makhenzi/pen/qbZbxR/" target="_blank" rel="external">State1</a> by Makhenzi (<a href="http://codepen.io/makhenzi" target="_blank" rel="external">@makhenzi</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>为了分配点击事件到每个日期，我们将会分配 <code>onClick</code> 属性给它们。</p>
<p>在该属性中，我们会调用组件的方法，该方法则会定义我们希望在 onClick 事件后触发的状态修改和其他变更。</p>
<p>在我们的例子里，我们定义该函数为 <code>handleClick()</code>。在 handleClick() 中，我们会调用 React 方法 <code>setState()</code>，其允许我们在在每个点击事件中去更改状态数据。我们只需要插入一个包含我们想要修改的状态 key 的对象，并在后者括号内分配给它们新的相关联值。</p>
<p>总的来说，每次一个日期被点击，被选中的div的onClick属性会调用 <code>HandClick()</code> 方法，该方法会调用 setState() 方法来修改组件的状态。</p>
<p>每次状态改变，一旦发生 React 就会自动检查组件的 <code>render()</code> 函数的返回，以寻找基于新状态需要更新的内容。一旦有那样的数据， React 就会自动触发一次新的 <code>render()</code> 来更新那些有变更的 HTML 片段。</p>
<p>(我很抱歉，在接着的例子里，我插入了三行利用了 Classnames 的代码，一个用来基于状态变更来做 CSS 管理的小工具，我这么做只是为了给预览一点颜色。我还会使用它在最终的例子里给预览填充一些海盗变量。你可以找到 GitHub 上 Classnames 仓库的链接，还有一个<a href="https://github.com/JedWatson/classnames" target="_blank" rel="external">简要使用向导</a>)</p>
<iframe height="266" scrolling="no" src="//codepen.io/makhenzi/embed/EPKwRo/?height=266&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen &lt;a href=”<a href="http://codepen.io/makhenzi/pen/EPKwRo/&quot;&gt;State2&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi/pen/EPKwRo/&quot;&gt;State2&lt;/a&amp;gt</a>; by Makhenzi (&lt;a href=”<a href="http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt</a>;) on &lt;a href=”<a href="http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt</a>;.</iframe>

<p>See the Pen <a href="http://codepen.io/makhenzi/pen/EPKwRo/" target="_blank" rel="external">State2</a> by Makhenzi (<a href="http://codepen.io/makhenzi" target="_blank" rel="external">@makhenzi</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>如此，我们的父组件状态已经被设定好根据选中数据去创建子组件（其将会描述海盗数量和对应温度）。</p>
<p>我们将会在 JSX 文件中创建子组件的实例，正如我们之前对父组件所做的。为了链接子组件到其父亲上，我们只需要在后者的 <code>render()</code> 函数使用同一种语法和一个 HTML 标签去定义关系。如果我们称它为 “Child” ，它将会在我们插入 <code>&lt;Child /&gt;</code>处所在的 HTML 块内出现。</p>
<p>我们的子组件还必须根据现在选中数据所关联的海盗和温度，传递数据到其父亲。为此，我们将利用赋给 Child 标签的属性，其名字可以随便取，其信息只对父组件可见。</p>
<p>如此一来，子组件将可以通过显式访问归属于其父组件的数据，即利用这些 “attribute-bridges”，或者 <strong>属性(props)</strong>，来获取到它自己内部信息的访问权。</p>
<p>所以，每次父组件的状态发生改变，其子组件的属性内容就会自动进行更新。但是，正如子组件的<code>render()</code>方法会显示属性内容，它也会基于单向的数据线性流，根据任何收到的新信息去进行更新。</p>
<iframe height="266" scrolling="no" src="//codepen.io/makhenzi/embed/EPKbmO/?height=266&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen &lt;a href=”<a href="http://codepen.io/makhenzi/pen/EPKbmO/&quot;&gt;Props&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi/pen/EPKbmO/&quot;&gt;Props&lt;/a&amp;gt</a>; by Makhenzi (&lt;a href=”<a href="http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt</a>;) on &lt;a href=”<a href="http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt</a>;.</iframe>

<p>See the Pen <a href="http://codepen.io/makhenzi/pen/EPKbmO/" target="_blank" rel="external">Props</a> by Makhenzi (<a href="http://codepen.io/makhenzi" target="_blank" rel="external">@makhenzi</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>搞定了！组件们会互相交互，并根据我们的点击在 DOM 里渲染不同数据，而不需要单页去进行刷新。以这个为基础，交互的复杂性和组件的数量可以按需增加，使我们能创建复杂高效的应用。</p>
<p>如果你被这个库的潜力启发了，<a href="https://react.rocks/" target="_blank" rel="external">不妨看看 react.rocks 网站</a>，在那里你会找到很多有趣的点子来帮助你开始。(:</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="http://www.leanpanda.com/blog/2016/04/06/react-newbies-tutorial/" target="_blank" rel="external">HOMEB]]>
    </summary>
    
      <category term="JavaScript" scheme="http://blog.zhaiyifan.cn/tags/JavaScript/"/>
    
      <category term="React.js" scheme="http://blog.zhaiyifan.cn/tags/React-js/"/>
    
      <category term="前端" scheme="http://blog.zhaiyifan.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Frontend" scheme="http://blog.zhaiyifan.cn/categories/Frontend/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在 Android N 预览版中使用 Java 8 的新特性]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/04/20/trans-java-8-in-android-n-preview/"/>
    <id>http://blog.zhaiyifan.cn/2016/04/20/trans-java-8-in-android-n-preview/</id>
    <published>2016-04-20T03:48:40.000Z</published>
    <updated>2016-05-26T04:14:07.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="https://medium.com/@sergii/java-8-in-android-n-preview-76184e2ab7ad#.ywf5x3l8w" target="_blank" rel="external">Java 8 in Android N Preview</a></li>
<li>原文作者 : <a href="https://medium.com/@sergii" target="_blank" rel="external">Sergii Zhuk</a></li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a></li>
<li>校对者: <a href="https://github.com/narcotics726" target="_blank" rel="external">narcotics726</a>, <a href="https://github.com/MiJack" target="_blank" rel="external">MiJack</a></li>
</ul>
</blockquote>
<p>Android团队最近发布了Android N Preview，带来了很多提升，包括由Jack编译器提供的Java 8支持。在这篇文章中，我们将来看看它究竟对Android开发者意味着什么，以及如何尝试新的语言特性。</p>
<blockquote>
<p><em>免责声明: 本信息在2016年3月30日是有效的，我不确定在下个release版本中，Google团队会增加什么新的没有在此提到的Java 8特性。</em></p>
</blockquote>
<p><img src="https://cdn-images-1.medium.com/max/800/1*0Vex_2H0J7MBBiu1EqMtaw.png" alt=""></p>
<figcaption>图片 by <a href="http://www.androidpolice.com/2016/03/09/android-n-feature-spotlight-jack-compiler-gains-support-for-many-java-8-language-features-including-lambdas-streams-functional-interfaces-and-more/" target="_blank" rel="external">Android Police<sup class="readableLinkFootnote">[1]</sup></a></figcaption>

<h3 id="概览">概览</h3><p>在这篇文章中，去介绍Oracle Java 8的新特性并没有太大意义 —— 很多信息已经在互联网上有了。我个人最喜欢的是Simon Ritter的“<a href="https://www.youtube.com/watch?v=rtAredKhyac" target="_blank" rel="external">Java SE 8的55个新特性<sup class="readableLinkFootnote">[2]</sup></a>”。</p>
<p>另一方面，Android <a href="http://android-developers.blogspot.de/2016/03/first-preview-of-android-n-developer.html" target="_blank" rel="external">官方的Java 8公告<sup class="readableLinkFootnote">[3]</sup></a> 留下了很多开放的问题给开发者们，感觉上并非所有的原生 Java 8 功能都是可用的。更详细的 <a href="http://developer.android.com/intl/ru/preview/j8-jack.html" target="_blank" rel="external">技术公告<sup class="readableLinkFootnote">[4]</sup></a> 确认了这一点。我们可以根据在 Android N 中的可用性，将这些语言特性分类如下：</p>
<p>Android Gingebread (API 9)及以上:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="external">Lambda 表达式</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html" target="_blank" rel="external">java.util.function</a></li>
</ul>
<p>Android N及以上:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html" target="_blank" rel="external">默认和静态interface方法</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html" target="_blank" rel="external">可重复的注解</a></li>
<li><a href="http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html" target="_blank" rel="external">流(Streams)</a></li>
<li>反射APIs</li>
</ul>
<p>所以对Java 8特性和使用的minSdkVersion之间的关联性，开发者必须去精心选择。我们也必须注意到语言向后兼容是由Jack编译器提供的。在概念上，Jack编译器将javac，ProGuard，以及dex的功能 <a href="https://www.guardsquare.com/blog/the_upcoming_jack_and_jill_compilers_in_android" target="_blank" rel="external">合并 <sup class="readableLinkFootnote">[5]</sup></a>到了一个转换步骤中。<a href="http://trickyandroid.com/the-dark-world-of-jack-and-jill/" target="_blank" rel="external">这意味着<sup class="readableLinkFootnote">[6]</sup></a>其中没有中间的Java字节码可用，且像是JaCoCo和Mockito的工具将无法工作，DexGuard也一样 (ProGuard的企业版本)。让我们祈祷这只是一个早期的preview版本，且这些问题将在未来被修复。</p>
<p>Lambda表达式以及相关的函数功能APIs —— 这是一个每个Android开发都会喜欢的东西。这类功能将会对增加代码可读性极为有用 —— 它替代了提供事件监听器的匿名内部类。而之前只能通过 <a href="http://zserge.com/blog/android-lambda.html" target="_blank" rel="external">额外的工具<sup class="readableLinkFootnote">[7]</sup></a> 来实现，或者由Android Studio编辑器去折叠代码。</p>
<p>默认及静态interface方法可以帮助我们减少额外的工具类的数量，但显然不是最需要的特性。还有一些其他的新增功能，我希望去说的更详细一些，因此不在本文的范围内。</p>
<p>对我来说最有趣的事 —— Java 8 流(Streams) —— 在当前的预览版中不可用。我们可以发现事实上它 <a href="https://android.googlesource.com/platform/libcore/+/916b0af2ccdd1bdfc0283b1096b291c40997d05f" target="_blank" rel="external">刚被merge<sup class="readableLinkFootnote">[8]</sup></a> 到AOSP源码，所以期望可以在下个N Preview 或者 Beta release中见到它。如果你实在等不及去浏览 —— 可以试试使用 <a href="https://github.com/aNNiMON/Lightweight-Stream-API" target="_blank" rel="external">Lightweight-Stream-API<sup class="readableLinkFootnote">[9]</sup></a>，目前的一个开源向后兼容。</p>
<h3 id="示例项目">示例项目</h3><p><a href="http://developer.android.com/preview/setup-sdk.html" target="_blank" rel="external">官方手册<sup class="readableLinkFootnote">[10]</sup></a>提供了指示，甚至还有图展示了如何去配置你的项目使用 Android N Preview 和 Java 8。在这儿没什么可以再说的，就跟着指示走吧。</p>
<p><img src="http://ww4.sinaimg.cn/large/a490147fjw1f2w1lxrva9j20m803pt9h.jpg" alt=""></p>
<p>下一步是去配置你的app模块的 build.gradle 文件。你可以在下面看到实例的 build.gradle 文件。从N SDK上的公告来看，似乎可以设置 <em>minSdkVersion</em> 为 Jelly Bean 或者 KitKat。 但… 在将 <em>targetSdkVersion</em> 设为Android N Preview后，<a href="http://stackoverflow.com/questions/36278517/java-8-in-android-n-preview" target="_blank" rel="external">将无法工作在API低于N的设备上<sup class="readableLinkFootnote">[11]</sup></a>。另外，如果你把 <em>minSdkVersion</em> 设置为23或者更低 —— Java 8代码将无法编译。这里是一些在 <a href="http://stackoverflow.com/questions/35929484/android-n-cannot-run-on-lower-api-though-minsdk-set-to-14" target="_blank" rel="external">SO forums<sup class="readableLinkFootnote">[12]</sup></a>的hack，描述了怎么设置minSdk为想要的值并使得app可以工作。我希望你不会在生产代码中使用这种方法 :)</p>
<p>我决定保持实例代码干净，所以没有添加任何hack手段来做低版本兼容，请读者自由去尝试或者使用N的测试设备/模拟器。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">android</span> &#123;</span><br><span class="line">    <span class="title">compileSdkVersion</span> <span class="string">'android-N'</span></span><br><span class="line">    buildToolsVersion <span class="string">'24.0.0 rc1'</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        <span class="title">applicationId</span> <span class="string">"org.sergiiz.thermometer"</span></span><br><span class="line">        minSdkVersion <span class="string">'N'</span> // 在 N Preview 中不能使用低于N的版本</span><br><span class="line">        targetSdkVersion <span class="string">'N'</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        jackOptions&#123;</span><br><span class="line">            <span class="title">enabled</span> <span class="built_in">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        <span class="title">targetCompatibility</span> <span class="number">1</span>.<span class="number">8</span></span><br><span class="line">        sourceCompatibility <span class="number">1</span>.<span class="number">8</span></span><br><span class="line">    &#125;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请注意这个设置是跟着新的<a href="http://developer.android.com/preview/j8-jack.html" target="_blank" rel="external">文档<sup class="readableLinkFootnote">[13]</sup></a>来的，使用了新的 Gradle DSL 方法 <em>jackOptions</em> 来配置Jack编译器设置，在更老的版本中，我们使用 <em>useJack true</em> 来达到同样的结果。</p>
<p>所以来试着实现一些Java 8的优雅代码到我们陈旧的Thermometer项目。</p>
<p>这是一个接口，包含了默认方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Thermometer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setCelsius</span><span class="params">(<span class="keyword">final</span> <span class="keyword">float</span> celsiusValue)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">float</span> <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">String <span class="title">getSign</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">default</span> String <span class="title">getFormattedValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> String.format(Locale.getDefault(),</span><br><span class="line">            <span class="string">"The temperature is %.2f %s"</span>, getValue(), getSign());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现了这个接口的类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FahrenheitThermometer</span> <span class="keyword">implements</span> <span class="title">Thermometer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">float</span> fahrenheitDeg;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FahrenheitThermometer</span><span class="params">(<span class="keyword">float</span> celsius)</span> </span>&#123;</span><br><span class="line">      setCelsius(celsius);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCelsius</span><span class="params">(<span class="keyword">float</span> celsius)</span> </span>&#123;</span><br><span class="line">      fahrenheitDeg = celsius * <span class="number">9</span> / <span class="number">5</span> + <span class="number">32f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fahrenheitDeg;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getSign</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Constants.DEGREE + <span class="string">"F"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>增加一个点击事件的lambda函数：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="component">buttonFahrenheit.setOnClickListener(view1 -&gt; &#123;</span><br><span class="line">   fahrenheitThermometer<span class="string">.setCelsius(currentCelsius)</span>;</span><br><span class="line">   String text = fahrenheitThermometer<span class="string">.getFormattedValue()</span>;</span><br><span class="line">   makeText(MainActivity<span class="string">.this</span>, text, Toast<span class="string">.LENGTH_SHORT).show()</span>;</span><br><span class="line">&#125;</span>);</span><br></pre></td></tr></table></figure>
<p>例子的完整源码可见 <a href="https://github.com/sergiiz/AndroidNPreviewJ8" target="_blank" rel="external">GitHub repository<sup class="readableLinkFootnote">[14]</sup></a>。</p>
<h3 id="总结">总结</h3><p>在这篇文章中，我们了解了Java 8的用例，以及目前其在Android N Preview SDK的实现情况。我们也看到了当前Jack编译器的限制，及其在最后发布前可能被修复的功能。在demo项目中我们检验了如何去使用新的Java 8特性，以及它们可以被应用的target SDK版本。</p>
<p>声明：本文已独家授权微信公众号Android程序员（AndroidTrending）在微信公众号平台原创首发。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="https://medium.com/@sergii/java-8-in-android-n-preview-76184e2ab7ad#.ywf5x3l8w" target="_blank" rel="e]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Java8" scheme="http://blog.zhaiyifan.cn/tags/Java8/"/>
    
      <category term="Java8" scheme="http://blog.zhaiyifan.cn/categories/Java8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目4 - Dagger2篇]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/03/27/android-new-project-from-0-p4/"/>
    <id>http://blog.zhaiyifan.cn/2016/03/27/android-new-project-from-0-p4/</id>
    <published>2016-03-27T03:14:49.000Z</published>
    <updated>2016-04-01T02:55:01.000Z</updated>
    <content type="html"><![CDATA[<p>Dagger - 匕首，顾名思义，比ButterKnife这把黄油刀锋利得多。Square为什么这么有自信地给它取了这个名字，Google又为什么会拿去做了Dagger2呢（不都有Guice和基于其做的RoboGuice了么）？希望本文能讲清楚为什么要用Dagger2，又如何用好Dagger2。</p>
<p>本文会从Dagger2的起源开始，途径其初衷、使用场景、依赖图，最后介绍一下我在项目中的具体应用和心得体会。</p>
<h1 id="Origin">Origin</h1><p><a href="https://github.com/google/dagger" target="_blank" rel="external">Dagger2</a>，起源于Square的<a href="http://github.com/square/dagger/" target="_blank" rel="external">Dagger</a>，是一个完全在编译期间进行的依赖注入框架，完全去除了反射。</p>
<p>关于Dagger2的最初想法，来自于2013年12月的<a href="https://github.com/square/dagger/issues/366" target="_blank" rel="external">Proposal: Dagger 2.0</a>，Jake大神在issue里面也有回复哦，而idea的来源者<a href="https://github.com/gk5885" target="_blank" rel="external">Gregory Kick</a>的GitHub个人主页也没多少follower，自己也没几个项目，主要都在贡献其他的repository，可见海外重复造轮子的风气比我们这儿好多了。</p>
<p>扯远了，Dagger2的诞生就是源于开发者们对Dagger1半静态化半运行时的不满（尤其是在服务端的大型应用上），想要改造成完整的静态依赖图生成，完全的代码生成式依赖注入解决方案。在权衡了什么对Android更适合，以及对大型应用来说什么更有意义（往往有可怕数量的注入）两者后，Dagger2诞生了。</p>
<h1 id="初衷">初衷</h1><p>Dagger2的初衷就是装逼，啊，不对，是通过依赖注入让你少些很多公式化代码，更容易测试，降低耦合，创建可复用可互换的模块。你可以在Debug包，测试运行包以及release包优雅注入三种不同的实现。</p>
<h2 id="依赖注入">依赖注入</h2><p>说到依赖注入，或许很多以前做过JavaEE的朋友会想到Spring（SSH在我本科期间折磨得我欲生欲死，最后Spring MVC拯救了我）。</p>
<p>我们看个简单的比较图，左边是没有依赖注入的实现方式，右边是手动的依赖注入：<br><img src="/images/android-new-project-from-0-dagger-di.png" alt="Without DI and with Maunl DI"></p>
<p>我们想要一个咖啡机来做一杯咖啡，没有依赖注入的话，我们就需要在咖啡机里自己去new泵(pump)和加热器(heater)，而手动依赖注入的实现则将依赖作为参数，然后传入，而不是自己去显示创建。在没有依赖注入的时候，我们丧失了灵活性，因为一切依赖是在内部创建的，所以我们根本没有办法去替换依赖实例，比如想把电加热器换成火炉或者核加热器，看一看下图，是不是更清晰了：<br><img src="/images/android-new-project-from-0-dagger-di-picture.png" alt="Without DI and with Maunl DI"></p>
<h2 id="为什么我们需要DI库">为什么我们需要DI库</h2><p>但问题在于，在大型应用中，把这些依赖全都分离，然后自己去创建的话，会是一个很大的工作量——毫无营养的公式化代码，一堆Factory类。不仅仅是工作量的问题，这些依赖可能还有顺序的问题，A依赖B，B依赖C，B依赖D，如此一来C、D就必须在A、B的后面，手动去做这些工作简直是一个噩梦 =。=（哈哈，是不是想到了appliation初始化那些依赖）。Google的工程师碰到的问题就是在Android上有3000行这样的代码，而在服务器上的大型程序则是100000行。</p>
<p>你会想自己维护这样的代码吗？</p>
<h2 id="Why_Dagger2">Why Dagger2</h2><p>先来看看如果用Spring实现上面提到的咖啡机依赖，我们需要做什么：<br><img src="/images/android-new-project-from-0-dagger-spring.png" alt="DI with Spring"><br>不错，就是xml，当然，我们也不需要去关心顺序了，Spring会帮我们解决前后顺序的依赖问题。</p>
<p>但仔细想想，你会想去自己写这样的xml代码吗？layout.xml已经写得我很烦了。而且Spring是在运行时验证配置和依赖图的，你不会想在外网运行的app里让用户发现你的依赖注入出了问题的（比如bean名字打错了）。再加上xml和Java代码分离，很难追踪应用流。</p>
<p>Guice虽然较Spring进了一步，干掉了xml，通过Java声明依赖注入比起Spring好找多了，但其跟踪和报错（运行时的图验证）实在令人抓狂，而且在不同环境注入不同实例的配置也挺恶心的（if else各种判断），感兴趣的可以去看看，项目就在GitHub上，Android版本的叫RoboGuice。</p>
<p>而Dagger2和Dagger1的差别在上节已经提到了，更专注于开发者的体验，从半静态变为完全静态，从Map式的API变成申明式API（@Module），生成的代码更优雅，更高的性能（跟手写一样），更简单的debug跟踪，所有的报错也都是在编译时发生的。</p>
<p>Dagger2使用了JSR 330的依赖注入API，其实就是Provider了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Provider</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage:</span></span><br><span class="line">Provider&lt;T&gt; coffeeMakerProvider = ...;</span><br><span class="line">CoffeeMaker coffeeMaker = coffeeMakerProvider.get();</span><br></pre></td></tr></table></figure></p>
<p>Dagger2基于Component注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Component</span>(modules = DripCoffeModule.class)</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CoffeeMakerComponet</span> </span>&#123;</span><br><span class="line">  <span class="function">CoffeeMaker <span class="title">getCoffeeMaker</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会生成这样的代码，Dagger_CoffeeMakerComponent里面就是一堆Provider，</span></span><br><span class="line"><span class="comment">// 或者是单例，或者是通过DripCoffeeModule申明new的方式，开发者不必关心依赖顺序</span></span><br><span class="line">CoffeeMakerComponent component = Dagger_CoffeeMakerComponent.create();</span><br><span class="line">CoffeeMaker coffeeMaker = component.getCoffeeMaker();</span><br></pre></td></tr></table></figure></p>
<p>除了上面提到的各种好处，不得不提的是也有对应问题：丧失了动态性，在之后的实践中我会举个例子描述一下，但相对于那些好处来说，我觉得是可接受的。Everything has a Price to Pay。啊，对了，还有另一点，没法自动升级，从Dagger1到Dagger2，当然如果你的app是没有历史负担的（本系列的前提），那这不算问题。</p>
<p>如果对性能感兴趣的话，可以去看看<a href="http://blog.nimbledroid.com/2016/03/07/performance-of-dependency-injection-libraries.html" target="_blank" rel="external">Comparing the Performance of Dependency Injection Libraries</a>，RoboGuice:Dagger1:Dagger2差不多是50:2:1的一个性能差距。</p>
<p>如果你用了Dagger2，而你的服务端还在用Spring，你可以自豪地说，我们比你们领先5年。而Google的服务端确实已经用了Dagger2。</p>
<h1 id="使用场景">使用场景</h1><p>上面也曾经提到了，因为手动去维护那些依赖关系、范围很麻烦，就连单例我都懒得写，何况是各种Factory类，老在那synchroized烦不烦。而如果不去写那些Factory，直接new，则会导致后期维护困难，比如增加了一个参数，为了保证兼容性，就只能留着原来的构造函数（习惯好一点的标一下deprecated），再新增一个构造函数。</p>
<p>Dagger2解决了这些问题，帮助我们管理实例，并进行解耦。new只需要写在一个地方，getInstance也再也不用写了。而需要使用实例的地方，只需要简简单单地来一个@inject，而不需要关心是如何注入的。Dagger2会在编译时通过apt生成代码进行注入。</p>
<p>想想你所有可能在多个地方使用的类实例依赖，比如lbs服务，比如你的cache，比如用户设置，比起getInstance，比起new，比起自己用注释去注明必须维持这种先后关系（说到此处，想到上个东家的android app初始化时候，必须保持正确顺序不然立马crash，singleton还必须只能init一次的糟糕代码），为什么不用dagger来做管理？Without any performance overhead。</p>
<p>Dagger2基于编译时的静态依赖图构建还能避免运行时再出现一些坑，比如循环依赖，编译的时候就会报错，而不会在运行时死循环。</p>
<p>生动点来说的话。有一场派对：</p>
<p>Android开发A说，有妹子我才来。<br>美女前端B说，有帅哥设计师，我才来。<br>iOS开发C说，有Android开发，我才来。<br>帅哥设计师说，只有礼拜天我才有空。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AndroidDeveloper</span> <span class="keyword">extends</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AndroidDeveloper</span><span class="params">(PartyMember female)</span> <span class="keyword">throws</span> NotMeizhiSayBB</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrontEndDeveloper</span> <span class="keyword">extends</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FrontEndDeveloper</span><span class="params">(Designer designer)</span> <span class="keyword">throws</span> NotHandsomeBoySayBB</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IOSDeveloper</span> <span class="keyword">extends</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IOSDeveloper</span><span class="params">(AndroidDeveloper dev)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Designer</span> <span class="keyword">extends</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Designer</span><span class="params">(Date date)</span> throw CannotComeException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSex = <span class="number">0</span>; <span class="comment">// 1 for male, 2 for female.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动DI，要自己想怎么设计顺序，还不能轻易改动</span></span><br><span class="line">Designer designer = <span class="keyword">new</span> Designer(<span class="string">"礼拜天"</span>)；</span><br><span class="line">FrontEndDeveloper dev1 = <span class="keyword">new</span> FrontEndDeveloper(designer);</span><br><span class="line">dev1.setSex(<span class="number">2</span>);</span><br><span class="line">AndroidDeveloper dev2 = <span class="keyword">new</span> AndroidDeveloper(dev1);</span><br><span class="line">IOSDeveloper dev3 = <span class="keyword">new</span> IOSDeveloper(dev2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// With Dagger2</span></span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">Designer designer;</span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">FrontEndDeveloper dev1;</span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">AndroidDeveloper dev2;</span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">IOSDeveloper dev3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用DI太可怕了...自己想象一下会是什么样吧</span></span><br><span class="line">...我懒</span><br></pre></td></tr></table></figure>
<h2 id="Scope">Scope</h2><p>Dagger2的Scope，除了Singleton（root），其他都是自定义的，无论你给它命名PerActivity、PerFragment，其实都只是一个命名而已，真正起作用的是inject的位置，以及dependency。</p>
<p>Scope起的更多是一个限制作用，比如不同层级的Component需要有不同的scope，注入PerActivity scope的component后activity就不能通过@Inject去获得SingleTon的实例，需要从application去暴露接口获得（getAppliationComponent获得component实例然后访问，比如全局的navigator）。</p>
<p>当然，另一方面则是可读性和方便理解，通过scope的不同很容易能辨明2个实例的作用域的区别。</p>
<h1 id="依赖图例子">依赖图例子</h1><p><img src="/images/android-new-project-from-0-dagger-simple-graph.png" alt="Simple Graph"></p>
<p>如上是一个我现在使用的Dagger2的依赖图的简化版子集。</p>
<p>ApplicationComponent作为root，拆分出了3个module</p>
<ul>
<li>ApplicationModule（application context，lbs服务，全局设置等）</li>
<li>ApiModule（Retrofit那堆Api在这里）</li>
<li>RepositoryModule（各种repository）。<br>这里为了妥协内聚和简洁所以保持了这三个module。你不会想看到自己的di package下有一大堆module类，或者某个module里面掺杂着上百个实例注入的。</li>
</ul>
<p>UserComponent用在用户主页、登录注册，以及好友列表页。所以你能看到UserModule（用户系统以及那些UseCase）以及需要的赞Module、相册Module。</p>
<p>TagComponent是标签系统，有自己的标签Module以及赞Module（module重用），用在了标签搜索、热门标签等页面。</p>
<p>是不是很好理解？位于上层的component是看不到下层的，而下层则可以使用上层的，但不能引用同一层相邻component内的实例。</p>
<p>如果你的应用是强登录态的，则更可以只把UserComponent放在第二层，Module构造函数传入uid（PerUser scope，没有uid则为游客态，供deeplink之类使用），而所有需要登录态的则都放在第三层。</p>
<p>一个简单的应用就是这样了，而Component继承，SubComponent（共享的放在上层父类），不同component的module复用（一样可以生成实例绑定，只是没法共享component中暴露的接口罢了）这些则是不同场景下的策略，如果有必要我会再开一篇讲讲这些深入的使用。</p>
<h1 id="具体应用和心得体会">具体应用和心得体会</h1><ul>
<li><p>No Proguard rules need。因为0反射，所以完全不需要去配置proguard规则。</p>
</li>
<li><p>因为需要静态地去inject，如果一些参数需要运行时通过用户行为去获得，就只能使用set去设置注入实例的参数（因为我们的injection通常在最早，比如onCreate就需要执行）。这就是上文提到过的，因为完全静态而丧失了一定的动态性。</p>
</li>
<li><p>Singleton是线程安全的，请放心，如果实在怀疑，可以去检查生成的源码，笔者已经检查过了…</p>
</li>
<li><p>粒度的问题，如果基于页面去划分的话，老实说笔者觉得实在太细太麻烦，建议稍微粗一点，按照大功能去分，完全可以通过拆分module或者SubComponent的形式去解决复用的问题，而不用拆分出一大堆component，module只要足够内聚就可以，而不需要拆分到某个页面使用的那些。</p>
</li>
<li><p>fragment的问题，因为其诡异的生命周期，所以建议在实在需要fragment的时候，让activity去创建component，fragment通过接口（比如HasComponent）去获得component（一个activity只能inject一个component哦）。</p>
</li>
<li><p>举一个我遇到的例子来说说方便的地方，有一个UseCase叫做SearchTag，原先只需要TagRepository，ThreadExecutor，PostThreadExecutor三个参数。现在需求改变了，需要在发起请求前先进行定位，然后把位置信息也作为请求的参数。我们只需要简单地在构造函数增加一个LbsRepository，然后在buildUseCaseObservable通过RxJava组合一下，这样既避免了底层repository的耦合，又对上层屏蔽了复杂性。</p>
</li>
<li><p>再讲讲之前提到的依赖吧，我们有很多同级的实例，以Singleton为例，比如有一个要提供给第三方sdk的Provider依赖了某个Repository，直接在构造函数里加上那个Repository，然后加上@Inject，完全不需要关心前后顺序了，省不省心？还可以随时在单元测试的包注入一个不需要物理环境的模拟repository。想想以前你怎么做，或者在调用这个的初始化前init依赖的实例，或者在初始化里去使用依赖类的getInstance()，是不是太土鳖？</p>
</li>
<li><p>强烈推荐你在自己的项目里使用上，初期可能怀着装逼的心情觉得有点麻烦，熟练后你会发现简直太方便了，根本离不开（其实是我的亲身经历 哈哈）。</p>
</li>
</ul>
<h1 id="总结">总结</h1><p>本篇讲了讲Dagger2，主要还是在安利为什么要用Dagger2，以及一些正确的使用姿势，因为时间原因来不及写个demo来说说具体实现，欢迎大家提出意见和建议。<br>有空的话我最近会在GitHub上写一下demo，你如果有兴趣可以follow一下等等更新: <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a>（希望在4月能完成，哈哈…）。</p>
<h1 id="下集预告">下集预告</h1><p>怎么用Retrofit、Realm和RxJava搭建data层。</p>
<h1 id="参考文献">参考文献</h1><ul>
<li>DAGGER 2 - A New Type of dependency injection: <a href="https://youtu.be/oK_XtfXPkqw" target="_blank" rel="external">https://youtu.be/oK_XtfXPkqw</a></li>
<li>Dagger 2 Official Site: <a href="http://google.github.io/dagger/" target="_blank" rel="external">http://google.github.io/dagger/</a></li>
<li>Dagger 2 Design Doc: <a href="http://goo.gl/mW474Z" target="_blank" rel="external">http://goo.gl/mW474Z</a></li>
</ul>
<h1 id="扩展阅读">扩展阅读</h1><ul>
<li><a href="http://stackoverflow.com/questions/28411352/what-determines-the-lifecycle-of-a-component-object-graph-in-dagger-2" target="_blank" rel="external">What determines the lifecycle of a component (object graph) in Dagger 2?</a></li>
<li><a href="http://frogermcs.github.io/dependency-injection-with-dagger-2-custom-scopes/" target="_blank" rel="external">Dependency injection with Dagger 2 - Custom scopes</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Dagger - 匕首，顾名思义，比ButterKnife这把黄油刀锋利得多。Square为什么这么有自信地给它取了这个名字，Google又为什么会拿去做了Dagger2呢（不都有Guice和基于其做的RoboGuice了么）？希望本文能讲清楚为什么要用Dagger2，又如]]>
    </summary>
    
      <category term="Dagger" scheme="http://blog.zhaiyifan.cn/tags/Dagger/"/>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[markzhai's home]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.zhaiyifan.cn/"/>
  <updated>2016-04-13T07:06:50.000Z</updated>
  <id>http://blog.zhaiyifan.cn/</id>
  
  <author>
    <name><![CDATA[Mark Zhai]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Blog计划2016]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/12/31/Blog-Plan-2016/"/>
    <id>http://blog.zhaiyifan.cn/2016/12/31/Blog-Plan-2016/</id>
    <published>2016-12-31T15:59:00.000Z</published>
    <updated>2016-04-13T07:06:50.000Z</updated>
    <content type="html"><![CDATA[<h1 id="从零开始系列">从零开始系列</h1><p>系列标题取得有问题，其实是面向进阶的Android开发的，相对初学者来说很多地方说的可能不够清楚。<br>后期会考虑一下完善一下，尽可能说的更清楚。</p>
<p>4月做完BlockCanary分享后尽快把demo先完善了，然后和blog做到同步更新。</p>
<p>目前想到的后面的几篇</p>
<ul>
<li>Retrofit</li>
<li>Realm</li>
<li>基于Retrofit和Realm的Data层设计</li>
<li>前端用后台接口设计与撕逼</li>
<li>基于异常的优雅错误处理架构</li>
<li>RxJava</li>
<li>模块化的重用</li>
<li>基于Navigator的全局scheme式跳转设计</li>
<li>Hybrid App</li>
<li>上线前优化，打包</li>
<li>Crash处理、分析</li>
<li>BlockCanary线上优化实践</li>
</ul>
<h1 id="Android逆向分析">Android逆向分析</h1><ul>
<li>Android可执行文件之谜 - DEX与ODEX, OAT与ELF</li>
<li>修改apktool</li>
<li>native逆向</li>
<li>重打包</li>
<li>Google Camera反编译看看Photo Sphere怎么做的</li>
<li>静态分析</li>
<li>动态调试</li>
</ul>
<h1 id="JavaScript">JavaScript</h1><ul>
<li>Vue</li>
<li>React.js</li>
<li>Redux</li>
</ul>
<h1 id="React_Native">React Native</h1>]]></content>
    <summary type="html">
    <![CDATA[<h1 id="从零开始系列">从零开始系列</h1><p>系列标题取得有问题，其实是面向进阶的Android开发的，相对初学者来说很多地方说的可能不够清楚。<br>后期会考虑一下完善一下，尽可能说的更清楚。</p>
<p>4月做完BlockCanary分享后尽快把demo先完善]]>
    </summary>
    
      <category term="Blog Plan" scheme="http://blog.zhaiyifan.cn/tags/Blog-Plan/"/>
    
      <category term="闲言闲语" scheme="http://blog.zhaiyifan.cn/categories/%E9%97%B2%E8%A8%80%E9%97%B2%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目5 - Repository层(上) Retrofit、Repository组装]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/04/30/android-new-project-from-0-p5/"/>
    <id>http://blog.zhaiyifan.cn/2016/04/30/android-new-project-from-0-p5/</id>
    <published>2016-04-30T03:14:49.000Z</published>
    <updated>2016-05-14T03:08:21.000Z</updated>
    <content type="html"><![CDATA[<p>如期而至的Repository篇，内部实现则由Realm、Retrofit，以及内存级LruCache组成。<br>Repository，顾名思义，即仓库，向上层屏蔽了数据来源和内部实现细节，不需要了解货物来源，只需要拿走就行了。</p>
<p>由于篇幅问题，将分为上下两篇，本篇主要介绍Retrofit的应用和Repository层组装，下篇会讲解本地缓存（包括Realm和内存缓存）以及基于异常的设计。</p>
<h1 id="Why_Repository">Why Repository</h1><p>首先，为什么我们需要Repository层呢？一言以蔽之，屏蔽细节。</p>
<p>上层（activity/fragment/presenter）不需要知道数据的细节（或者说 - 数据源），来自于网络、数据库，亦或是内存等等。如此，一来上层可以不用关心细节，二来底层可以根据需求修改，不会影响上层，两者的分离用可以帮助协同开发。</p>
<p>举些例子：</p>
<ul>
<li>当现在是无网状态，我希望列表能直接显示上一次的数据，而不会是空页面。</li>
<li>除非好友的用户数据过期（比如超过一天），否则希望直接使用本地缓存中的，但如果缓存没有，或者过期，则需要拉取并更新。</li>
<li>点赞后，即便请求还没发送或者没有收到response，仍然希望显示点赞后的状态。<br>等等。</li>
</ul>
<p>如果这些需求，我们都要实现在View或者Presenter中，就会导致充斥大量数据逻辑，目的不单一，难以维护。而Repository层就是来封装这些逻辑的。</p>
<h1 id="Overview">Overview</h1><p>如图，业务层只能看到repository接口。</p>
<p><img src="/images/android-new-project-from-0-repository-1.png" alt="Repository Overview"></p>
<h1 id="Retrofit">Retrofit</h1><p>[Retrofit]（<a href="https://github.com/square/retrofit)是Android界网红公司[Square](https://squareup.com/)所开发维护的一个HTTP网络库，目前最新版本是2.0.2（截止2016年4月30日）。其内部使用了自家的[OkHttp](https://github.com/square/okhttp)。" target="_blank" rel="external">https://github.com/square/retrofit)是Android界网红公司[Square](https://squareup.com/)所开发维护的一个HTTP网络库，目前最新版本是2.0.2（截止2016年4月30日）。其内部使用了自家的[OkHttp](https://github.com/square/okhttp)。</a></p>
<p>关于Retrofit的实现机制啊简介的，网上已经很多了，这里我就不啰嗦了，官方文档见<a href="http://square.github.io/retrofit/" target="_blank" rel="external">项目主页</a>。这里主要讲讲实际项目中的应用实践。</p>
<h2 id="import">import</h2><p>root build.gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> retrofitVersion = <span class="string">"2.0.2"</span></span><br><span class="line"><span class="keyword">def</span> okHttpVersion = <span class="string">'3.2.0'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">project</span>.ext &#123;</span><br><span class="line">    libRetrofit = <span class="string">"com.squareup.retrofit2:retrofit:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libRetrofitConverterGson = <span class="string">"com.squareup.retrofit2:converter-gson:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libRetrofitAdapterRxJava = <span class="string">"com.squareup.retrofit2:adapter-rxjava:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libOkHttpLoggingInterceptor = <span class="string">"com.squareup.okhttp3:logging-interceptor:$&#123;okHttpVersion&#125;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>repository module的build.gradle:<br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> rootProject.ext.libRetrofit</span><br><span class="line">    <span class="keyword">compile</span> rootProject.ext.libRetrofitConverterGson</span><br><span class="line">    <span class="keyword">compile</span> rootProject.ext.libRetrofitAdapterRxJava</span><br><span class="line">    <span class="keyword">compile</span> rootProject.ext.libOkHttpLoggingInterceptor</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="OkHttpClient">OkHttpClient</h2><p>自底向上地，我们需要一个OkHttpClient来设置给Retrofit，这里作为实例，放出一段包含大部分你可能会用到的功能的Client创建代码，可以根据需要进行调整。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> OkHttpClient <span class="title">getClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// log用拦截器</span></span><br><span class="line">    HttpLoggingInterceptor logging = <span class="keyword">new</span> HttpLoggingInterceptor();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开发模式记录整个body，否则只记录基本信息如返回200，http协议版本等</span></span><br><span class="line">    <span class="keyword">if</span> (IS_DEV) &#123;</span><br><span class="line">        logging.setLevel(HttpLoggingInterceptor.Level.BODY);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        logging.setLevel(HttpLoggingInterceptor.Level.BASIC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果使用到HTTPS，我们需要创建SSLSocketFactory，并设置到client</span></span><br><span class="line">    SSLSocketFactory sslSocketFactory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这里直接创建一个不做证书串验证的TrustManager</span></span><br><span class="line">        <span class="keyword">final</span> TrustManager[] trustAllCerts = <span class="keyword">new</span> TrustManager[]&#123;</span><br><span class="line">                <span class="keyword">new</span> X509TrustManager() &#123;</span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkClientTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span></span><br><span class="line">                            <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkServerTrusted</span><span class="params">(X509Certificate[] chain, String authType)</span></span><br><span class="line">                            <span class="keyword">throws</span> CertificateException </span>&#123;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="annotation">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> X509Certificate[] getAcceptedIssuers() &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">new</span> X509Certificate[]&#123;&#125;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Install the all-trusting trust manager</span></span><br><span class="line">        <span class="keyword">final</span> SSLContext sslContext = SSLContext.getInstance(<span class="string">"SSL"</span>);</span><br><span class="line">        sslContext.init(<span class="keyword">null</span>, trustAllCerts, <span class="keyword">new</span> java.security.SecureRandom());</span><br><span class="line">        <span class="comment">// Create an ssl socket factory with our all-trusting manager</span></span><br><span class="line">        sslSocketFactory = sslContext.getSocketFactory();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        Logger.e(TAG, e.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> OkHttpClient.Builder()</span><br><span class="line">            <span class="comment">// HeadInterceptor实现了Interceptor，用来往Request Header添加一些业务相关数据，如APP版本，token信息</span></span><br><span class="line">            .addInterceptor(<span class="keyword">new</span> HeadInterceptor())</span><br><span class="line">            .addInterceptor(logging)</span><br><span class="line">            <span class="comment">// 连接超时时间设置</span></span><br><span class="line">            .connectTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">            <span class="comment">// 读取超时时间设置</span></span><br><span class="line">            .readTimeout(<span class="number">10</span>, TimeUnit.SECONDS)</span><br><span class="line">            .sslSocketFactory(sslSocketFactory)</span><br><span class="line">            <span class="comment">// 信任所有主机名</span></span><br><span class="line">            .hostnameVerifier((hostname, session) -&gt; <span class="keyword">true</span>)</span><br><span class="line">            <span class="comment">// 这里我们使用host name作为cookie保存的key</span></span><br><span class="line">            .cookieJar(<span class="keyword">new</span> CookieJar() &#123;</span><br><span class="line">                <span class="keyword">private</span> <span class="keyword">final</span> HashMap&lt;HttpUrl, List&lt;Cookie&gt;&gt; cookieStore = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveFromResponse</span><span class="params">(HttpUrl url, List&lt;Cookie&gt; cookies)</span> </span>&#123;</span><br><span class="line">                    cookieStore.put(HttpUrl.parse(url.host()), cookies);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> List&lt;Cookie&gt; <span class="title">loadForRequest</span><span class="params">(HttpUrl url)</span> </span>&#123;</span><br><span class="line">                    List&lt;Cookie&gt; cookies = cookieStore.get(HttpUrl.parse(url.host()));</span><br><span class="line">                    <span class="keyword">return</span> cookies != <span class="keyword">null</span> ? cookies : <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如上包含了大部分你可能需要的特性，可以自由进行组合。</p>
<h2 id="RxJava异步请求">RxJava异步请求</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MrService <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (MrService.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mInstance = <span class="keyword">new</span> MrService();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">MrService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">MrService</span><span class="params">(<span class="keyword">boolean</span> useRxJava)</span> </span>&#123;</span><br><span class="line">    Retrofit.Builder builder = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">            .baseUrl(IS_DEV ? API_DEV_URL : API_PRODUCT_URL)</span><br><span class="line">            .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">            .client(getClient());</span><br><span class="line">    <span class="keyword">if</span> (useRxJava) &#123;</span><br><span class="line">        builder.addCallAdapterFactory(RxJavaCallAdapterFactory.create());</span><br><span class="line">    &#125;</span><br><span class="line">    mRetrofit = builder.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应API请求类如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SystemApi</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="annotation">@FormUrlEncoded</span></span><br><span class="line">    <span class="annotation">@POST</span>(<span class="string">"user/feedback"</span>)</span><br><span class="line">    <span class="function">Observable&lt;MrResponse&gt; <span class="title">feedback</span><span class="params">(@Field(<span class="string">"content"</span>)</span> String content,</span><br><span class="line">                                    @<span class="title">Field</span><span class="params">(<span class="string">"model_name"</span>)</span> String modelName,</span><br><span class="line">                                    @<span class="title">Field</span><span class="params">(<span class="string">"system_version"</span>)</span> String systemVersion,</span><br><span class="line">                                    @<span class="title">Field</span><span class="params">(<span class="string">"img_keys"</span>)</span> List&lt;String&gt; imageKeyList)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="同步请求">同步请求</h2><p>有时候我们需要做同步请求，比如提供结果给一些第三方库，它们可能需要直接返回对应数据（像我最近碰到的融云….），而我们只需要拉数据同步返回，对其所在线程和调用事件均一脸懵逼。</p>
<p>这时候就需要创建一个同步的retrofit客户端，其实就是不要去使用RxJava的adapter啦。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MrService <span class="title">getSynchronousInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (mSyncInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (MrService.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mSyncInstance == <span class="keyword">null</span>) &#123;</span><br><span class="line">                mSyncInstance = <span class="keyword">new</span> MrService(<span class="keyword">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mSyncInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应地，我们需要定义请求类，这里我们需要使用Call&lt;&gt;去包一下最终解析对象的类。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RongCloudApi</span> </span>&#123;</span><br><span class="line">    <span class="annotation">@FormUrlEncoded</span></span><br><span class="line">    <span class="annotation">@POST</span>(<span class="string">"im/getGroupInfo"</span>)</span><br><span class="line">    <span class="function">Call&lt;MrResponse&gt; <span class="title">getGroupInfoSynchronous</span><span class="params">(@Field(<span class="string">"group_id"</span>)</span> String groupId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@FormUrlEncoded</span></span><br><span class="line">    <span class="annotation">@POST</span>(<span class="string">"user/nameCardLite"</span>)</span><br><span class="line">    <span class="function">Call&lt;MrResponse&gt; <span class="title">getNameCardLiteSynchronous</span><span class="params">(@Field(<span class="string">"uid"</span>)</span> String userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="数据格式解析">数据格式解析</h2><p>数据的解析当然是必不可少的一环了，常用格式对应的序列化库以retrofit官网为例:</p>
<ul>
<li>Gson: com.squareup.retrofit2:converter-gson</li>
<li>Jackson: com.squareup.retrofit2:converter-jackson</li>
<li>Moshi: com.squareup.retrofit2:converter-moshi</li>
<li>Protobuf: com.squareup.retrofit2:converter-protobuf</li>
<li>Wire: com.squareup.retrofit2:converter-wire</li>
<li>Simple XML: com.squareup.retrofit2:converter-simplexml</li>
<li>Scalars (primitives, boxed, and String): com.squareup.retrofit2:converter-scalars</li>
</ul>
<p>部分高大上公司可能自己使用内部的二进制格式，自己实现ConverterFactory去解析就行了。</p>
<p>这里以最常用的json为例，使用GsonConverterFactory，良好的数据结构通常都会带有状态码和对应信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@SerializedName</span>(<span class="string">"status_no"</span>)</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> statusCode;</span><br><span class="line"></span><br><span class="line"><span class="annotation">@SerializedName</span>(<span class="string">"status_msg"</span>)</span><br><span class="line"><span class="keyword">private</span> String statusMessage;</span><br></pre></td></tr></table></figure>
<p>根据statusCode可以快速判断是否出现错误，通常0或者某个正数为正确，负数则根据和服务器的协定做不同处理。<br>这里对Gson的bean，推荐使用插件GsonFormat，生成起来很方便。</p>
<p>至于具体的数据，则有两种方案，一是使用data作为key把具体数据套起来，内部则使用K/V进行存储，保证不存在不规范的直接丢一个array在data里面的情形。</p>
<h3 id="二次的组合解析">二次的组合解析</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"status_no"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> statusCode;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"status_msg"</span>)</span><br><span class="line">    <span class="keyword">private</span> String statusMessage;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"time"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"data"</span>)</span><br><span class="line">    <span class="keyword">public</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter and getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>二次组合的解析通过将创建一个通用的Response Bean来做泛解析，如果statusCode表明接口请求成功，则继续解析data:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Observable&lt;T&gt; <span class="title">extractData</span><span class="params">(Observable&lt;MrResponse&gt; observable, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> observable.flatMap(response -&gt; &#123;</span><br><span class="line">        <span class="keyword">if</span> (response == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> NetworkConnectionException());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (response.getStatusCode() == ResponseException.STATUS_CODE_SUCCESS) &#123;</span><br><span class="line">            <span class="keyword">return</span> Observable.just(mGson.fromJson(mGson.toJson(response.data), clazz));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Logger.e(TAG, response.data);</span><br><span class="line">            <span class="keyword">return</span> Observable.error(<span class="keyword">new</span> ResponseException(response));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>调用则如:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Observable&lt;AlbumApiResult&gt; <span class="title">listPhoto</span><span class="params">(String uid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> RepositoryUtils.extractData(mAlbumApi.listPhoto(uid), AlbumApiResult.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>所有接口都可以通过<code>RepositoryUtils.extractData()</code>进行泛型调用。</p>
<p>如此一来，如果response为空，我们仅在statusCode正确时才会去解析具体的数据，否则抛出对应的异常（基于异常的数据层设计在下面会具体讲）。</p>
<h3 id="单次的继承处理">单次的继承处理</h3><p>上一种处理方式尽管看起来很优雅，但是存在一个问题，就是会重复解析，当statusCode正确时，会对data的object再次进行json处理。如果确实是error，比如statusCode为-1、-2这种，确实节省了开销，因为gson会去反射构造对应类的adapter，解析所有字段，创建对应的BoundField。</p>
<p>但考虑到大部分情况下还是正确的response居多，所以也可以使用继承的结构，我们创建<code>BaseResponse</code>存放通用字段，其他所有Gson Bean则继承该<code>BaseResponse</code>。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"status_no"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> statusCode;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"status_msg"</span>)</span><br><span class="line">    <span class="keyword">private</span> String statusMessage;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"time"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter and getter</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteResponse</span> <span class="keyword">extends</span> <span class="title">BaseResponse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@SerializedName</span>(<span class="string">"other_fields"</span>)</span><br><span class="line">    <span class="keyword">private</span> String otherFields;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对应的判断和error抛出可以参照上小节的，这里就不赘述了。</p>
<h1 id="Repository层组装实现">Repository层组装实现</h1><p>组装即根据组合各个数据源，如此又分为直接在实现方法中组合结果，亦或是通过DataStoreFactory进行封装。根据复杂度和个人喜好而定，毕竟使用后者需要新增好多类，相对来说有一点重。</p>
<h2 id="基于接口的设计实现">基于接口的设计实现</h2><p>拿一个最简单的repository，七牛Repository来作例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">QiniuRepository</span> </span>&#123;</span><br><span class="line">    <span class="function">Observable&lt;QiniuToken&gt; <span class="title">getQiniuUploadToken</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiniuDataRepository</span> <span class="keyword">implements</span> <span class="title">QiniuRepository</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="keyword">protected</span> QiniuApi mQiniuApi;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QiniuDataRepository</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Observable&lt;QiniuToken&gt; <span class="title">getQiniuUploadToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> RepositoryUtils.extractData(mQiniuApi.getQiniuUploadToken(), QiniuToken.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="DataStoreFactory">DataStoreFactory</h2><p>使用DataStoreFactory封装数据来源：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDataStoreFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserCache mUserCache;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="keyword">protected</span> UserApi mUserApi;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Inject</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDataStoreFactory</span><span class="params">(Context context, UserCache userCache)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (context == <span class="keyword">null</span> || userCache == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Constructor parameters cannot be null!!!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        mContext = context.getApplicationContext();</span><br><span class="line">        mUserCache = userCache;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Create &#123;<span class="doctag">@link</span> UserDataStore&#125; from a user id.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDataStore <span class="title">create</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line">        UserDataStore userDataStore;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!mUserCache.isExpired() &amp;&amp; mUserCache.isCached(userId)) &#123;</span><br><span class="line">            userDataStore = <span class="keyword">new</span> DiskUserDataStore(mUserCache);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            userDataStore = createCloudDataStore();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userDataStore;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span><br><span class="line">     * Create &#123;<span class="doctag">@link</span> UserDataStore&#125; to retrieve data from the Cloud.</span><br><span class="line">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserDataStore <span class="title">createCloudDataStore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CloudUserDataStore(mUserApi, mUserCache);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>老实说这样的话，一来要写很多方法和接口，二来通过Factory判断创建哪种DataStore还是挺麻烦的，比如用户主页数据我们可以判断，但登陆登出这些，就需要直接指定<code>createCloudDataStore()</code>了，所以个人认为意义不大。</p>
<h2 id="在实现方法中组合">在实现方法中组合</h2><p>如下是使用DBFlow和网络Api进行组合的一个list获取接口。</p>
<p>我们使用RxJava的concat组合2个Observable，前者从cache(数据库)获取数据，后者从网络Api获取数据，通常数据库当然会更快。我们还保留了一个参数isForceRefresh来保证在某些情况下可以强制从网络获取数据。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="keyword">public</span> Observable&lt;List&lt;OperationPositionWrapper&gt;&gt; getHome(<span class="keyword">final</span> <span class="keyword">boolean</span> isForceRefresh) &#123;</span><br><span class="line">    <span class="keyword">final</span> Observable&lt;List&lt;OperationPositionWrapper&gt;&gt; fromCache = Observable.create(</span><br><span class="line">            <span class="keyword">new</span> Observable.OnSubscribe&lt;List&lt;OperationPosition&gt;&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> List&lt;OperationPosition&gt;&gt; subscriber)</span> </span>&#123;</span><br><span class="line">                    List&lt;OperationPosition&gt; dbCache = <span class="keyword">new</span> Select().from(OperationPosition.class).queryList();</span><br><span class="line">                    <span class="keyword">if</span> (dbCache != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        subscriber.onNext(dbCache);</span><br><span class="line">                    &#125;</span><br><span class="line">                    subscriber.onCompleted();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .map(<span class="keyword">new</span> Func1&lt;List&lt;OperationPosition&gt;, List&lt;OperationPositionWrapper&gt;&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> List&lt;OperationPositionWrapper&gt; <span class="title">call</span><span class="params">(List&lt;OperationPosition&gt; operationPositions)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> OperationPositionMapper.wrap(operationPositions);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .filter(<span class="keyword">new</span> Func1&lt;List&lt;OperationPositionWrapper&gt;, Boolean&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">(List&lt;OperationPositionWrapper&gt; operationPositionWrappers)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> ListUtils.isNotEmpty(operationPositionWrappers);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> Observable&lt;List&lt;OperationPositionWrapper&gt;&gt; fromNetwork = RepositoryUtils.observableWithApi(<span class="keyword">new</span> GetOperationPositionsForYouleHomeApi())</span><br><span class="line">            .map(<span class="keyword">new</span> Func1&lt;List&lt;OperationPositionPO&gt;, List&lt;OperationPositionWrapper&gt;&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> List&lt;OperationPositionWrapper&gt; <span class="title">call</span><span class="params">(List&lt;OperationPositionPO&gt; operationPositionList)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> OperationPositionMapper.transform(operationPositionList);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .doOnNext(<span class="keyword">new</span> Action1&lt;List&lt;OperationPositionWrapper&gt;&gt;() &#123;</span><br><span class="line">                <span class="annotation">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(List&lt;OperationPositionWrapper&gt; operationPositionWrappers)</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (ListUtils.isNotEmpty(operationPositionWrappers)) &#123;</span><br><span class="line">                        <span class="keyword">new</span> Delete().from(OperationPosition.class).queryClose();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">for</span> (OperationPositionWrapper wrapper : operationPositionWrappers) &#123;</span><br><span class="line">                        wrapper.getOperationPosition().save();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (isForceRefresh) &#123;</span><br><span class="line">        <span class="keyword">return</span> fromNetwork;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Observable.concat(fromCache, fromNetwork);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结">总结</h1><p>本篇为Repository层的上篇，主要介绍了组合及Retrofit的应用。下篇将会讲述数据库，内存Cache，以及统一的异常处理设计。</p>
<p><strong>另外，打个小广告，本司的新产品Crew已经在各大Android应用市场上线，专注于职场垂直社交。一搜和兴趣相投的人聊天。iOS版本正在审核中。</strong></p>
<p><em>2个字找到志趣相投的职场伙伴，秒搜陌生人同类，智能自动破冰。多关键字叠加，高效率锁定职场同僚。精准匹配兴趣对象，超轻聊天，更能一键组建群聊，加入一群人的狂欢。</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>如期而至的Repository篇，内部实现则由Realm、Retrofit，以及内存级LruCache组成。<br>Repository，顾名思义，即仓库，向上层屏蔽了数据来源和内部实现细节，不需要了解货物来源，只需要拿走就行了。</p>
<p>由于篇幅问题，将分为上下两篇]]>
    </summary>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Repository" scheme="http://blog.zhaiyifan.cn/tags/Repository/"/>
    
      <category term="Retrofit" scheme="http://blog.zhaiyifan.cn/tags/Retrofit/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[计算机从业者的技术成长学习之路]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/04/28/about-learning/"/>
    <id>http://blog.zhaiyifan.cn/2016/04/28/about-learning/</id>
    <published>2016-04-28T07:25:06.000Z</published>
    <updated>2016-05-02T02:33:01.000Z</updated>
    <content type="html"><![CDATA[<p>最近因为在学习一些新的东西，所以Android的东西没有怎么更新。趁着有些闲工夫，简单说说技术上的学习，也算是自己对这几年工作来的一个小结和经验吧。</p>
<p>希望这篇东西可以给那些在校的，亦或是才踏入工作没多久的程序员同伴们一些帮助。毕竟我自己也曾经止步不前，不知所措迷茫过。</p>
<h1 id="英语">英语</h1><p>老实说，没有比英语性价比更高的，需要学习的东西了。靠着别人的翻译，或者机翻，终究不是办法的。笔者自己日语英语姑且算是熟练掌握的地步，但在初期直接看那些全英文的书籍，仍然会觉得头痛（谢谢HKUST虐我），但坚持下来就会发现其实计算机的英语还是有一个范围的，多看看熟悉起来，就会觉得并没有什么难，甚至比起很多翻译来说更容易看懂。</p>
<p>混迹GitHub就会发现国内的很多开发者英语上欠缺还是很大的，尤其是一些description和readme直接就上中文的。即便你英语渣，机翻也行啊。毕竟是计算机社区，英语才是通用语言。用中文去一些国外开发者的仓库里提issue或者回复也是一种很粗鲁的行为。</p>
<p>如果让我说一种对技术帮助做大的语言，那必然就是英语。有了英语，才能真正地独立学习。</p>
<h1 id="Google">Google</h1><p>问小白问题之前，你Google过吗？如果让我看到一个开发动不动去搜百度，那我估计会武断地认定他很菜。其实Google是我们最好的老师，只要能正确把握问题的关键字，几乎没有找不到的答案，大部分会在StackOverflow上，其他散落在GitHub、博客等等地方。</p>
<p>如果你要找的知识实在冷门，比如react native的一些深入用法，android上的视频so阉割这种，那恐怕只能找找做这块的朋友或者自己研究了，国内有一些好心的开发者或许会分享在自己的博客。</p>
<p>至于科学上网，这个话题相关的技术太多了，请自行找方法，VPN也好，SS也好，都很简单，相对的投入和产出对程序员来说性价比是很高的。实在不想花钱的去用AWS的免费云服务器搭SS也行。</p>
<h1 id="实践">实践</h1><p>看是没有用的。比如看一篇关于Hybrid App原理的文章，或许它写得很好，但其实就算看完了，让我自己去写一个，或者讲讲怎么去做一个我们应用的版本，Android/iOS端通用的方案，最后也是支支吾吾说的不知所以。最后还是要去实践做一些Hybrid页面才能真正掌握，能说清楚这里面的原理和应用场景。</p>
<p>纸上谈兵终觉浅。</p>
<h1 id="警惕体力劳动">警惕体力劳动</h1><p>当你的工作成为一种体力劳动，而自己无法从中获得新的体验和知识的时候，需要警惕究竟发生了什么。</p>
<h2 id="想得太少">想得太少</h2><p>对做的内容停留在完成的阶段，而不对更好的方案，实现细节去思考更多，比如用了某个API，会不会去仔细看看其究竟是怎么做的。或许你知道Handler，Looper，那你知不知道主线程的一切，四大组件的生命周期，各种View的触摸事件都是消息驱动，在mainLooper里面进行处理的呢？</p>
<h2 id="工作内容重复">工作内容重复</h2><p>当Focus在一块上太久之后，难免会碰到这种瓶颈，这时候可以看看是不是能换一块做，比如做做缓存、Hybrid、启动优化、视频等等。可以做的领域很多，实在发现兴趣不在此，换着做后台或者前端也行。倘若因为个人原因，比如公司不让换或者可能工资会低很多，挤一挤时间在side project里面搞搞也可以，只是有没有心的问题罢了。</p>
<p>我面试过一些做Android 5-6年的程序员，但大部分真的连一些优秀的2-3年经验的开发者都远远不如，问设计不懂设计，问流行的开源项目回答就是“好像听说过”。我不希望我认识的开发者以后变成这样的人。但你若是总是重复劳动，难免像这样1年的工作经验重复了5年。</p>
<p>在额外学习的时候，更多关注的应该是不同的地方，而不是说这个学Python，下个月去学Go，想想语言的差异性在哪里，自己试试看做一些项目，培养全栈工程师的底子。还在念大学的时候，我学了C、C++、Java、Python、Ruby、PHP、HTML、Perl、SQL/Redis/HBase等等等等，但对每个的理解都不够深刻，现在想来那时候是做错了的。</p>
<p>你应该有自己的专长，但也要能从全局的角度思考问题，一个不懂前端的后端老大会导致前端过重不灵活，反正只要自己这儿的模块清晰就好，一个不懂前端的前端老大也会让下面的人不要抱怨，做出来就好。</p>
<h2 id="公司问题">公司问题</h2><p>发生在一些项目经理逼得特别紧，老大又比较无能的地方。项目经理为了向上面交待，对工程师说“这个进度能不能再压一下呀”，或者干脆直接不听工程师的意见强行缩短工期，导致没有时间去深入学习。老大明知这种情况，却睁一只眼闭一只眼。这种公司，还是离开为妙。</p>
<p>一个合格的leader，或者说mentor应该做些什么？至少从我的角度来看，尽管对公司他需要对项目负责，但对团队内的开发者，他更应该做的是观察和指导，看清楚那些团队毒瘤，营造团队氛围，而不是一味Push催进度和表现自己。</p>
<h1 id="记录和总结">记录和总结</h1><p>写博客是为了什么？</p>
<p>至少对我来说，写下的东西更多是对自己的一个总结和交待。如果我能写下来，至少能证明我有信心自己确实是这么去理解的，没有去坑人。另外，姑且也算是一种成长的足迹吧，偶尔自己还会去看看笔记。</p>
<p>分享也是目的之一，希望大家能互相进步，这样才能促进发展。</p>
<p>写博客也好，写一些笔记也好，点点滴滴也是对自己的一种整理。</p>
<h1 id="问自己">问自己</h1><p>想清楚自己要的究竟是什么。</p>
<p>做全还是钻？想做一个超强并发量的后台？想黑别人的系统？想做出精准有效的推荐算法？还是想做别人能实际用到的产品？</p>
<p>笔者正是因为想要的是后者，所以成为了Android开发（为什么没有选iOS，大约是Android的开放性吸引了我）。而现在，因为发现自己欠缺的（对前端驾轻就熟，大部分的事情对我来说只是体力活，而自己想承担一个完整的项目却又不行），所以又重新拾起了Node.js，看起了ES6，思考设计和产品的问题。</p>
<hr>
<p>希望大家都能想清楚自己想做的，要成为的样子。能自主地去学习。毕竟师傅带进门，修行靠个人。我不想鸡汤，大家各自走好，望来日可并肩一起，彼此说一句“很高兴遇见你”。</p>
<p>原文发布于：<a href="http://blog.zhaiyifan.cn/2016/04/28/about-learning/">http://blog.zhaiyifan.cn/2016/04/28/about-learning/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近因为在学习一些新的东西，所以Android的东西没有怎么更新。趁着有些闲工夫，简单说说技术上的学习，也算是自己对这几年工作来的一个小结和经验吧。</p>
<p>希望这篇东西可以给那些在校的，亦或是才踏入工作没多久的程序员同伴们一些帮助。毕竟我自己也曾经止步不前，不知所措]]>
    </summary>
    
      <category term="Work" scheme="http://blog.zhaiyifan.cn/tags/Work/"/>
    
      <category term="闲言闲语" scheme="http://blog.zhaiyifan.cn/categories/%E9%97%B2%E8%A8%80%E9%97%B2%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Centos7安装Node.js并搭建Server]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/04/25/node-web-server-build-1/"/>
    <id>http://blog.zhaiyifan.cn/2016/04/25/node-web-server-build-1/</id>
    <published>2016-04-25T02:53:52.000Z</published>
    <updated>2016-04-28T10:00:55.000Z</updated>
    <content type="html"><![CDATA[<p><strong>未完</strong></p>
<h1 id="安装Node">安装Node</h1><p>我们选择使用<code>nvm</code>安装Node.js:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 使用cnpm的nvm mirror</span><br><span class="line">curl -o- https://raw.githubusercontent.com/cnpm/nvm/master/install.sh | bash</span><br><span class="line"><span class="built_in">source</span> ~/.bash_profile</span><br><span class="line">nvm list-remote</span><br><span class="line">nvm install v4.<span class="number">4.3</span></span><br><span class="line">nvm use v4.<span class="number">4.3</span></span><br><span class="line">nvm <span class="built_in">alias</span> default v4.<span class="number">4.3</span></span><br></pre></td></tr></table></figure></p>
<p>安装cnpm:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --registry=https://registry.npm.taobao.org install -g cnpm</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>未完</strong></p>
<h1 id="安装Node">安装Node</h1><p>我们选择使用<code>nvm</code>安装Node.js:<br><figure class="highlight bash"><table><tr><td c]]>
    </summary>
    
      <category term="Node.js" scheme="http://blog.zhaiyifan.cn/tags/Node-js/"/>
    
      <category term="Server" scheme="http://blog.zhaiyifan.cn/tags/Server/"/>
    
      <category term="Node.js" scheme="http://blog.zhaiyifan.cn/categories/Node-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[React.js 新手村教程]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/04/22/trans-react-newbies-tutorial/"/>
    <id>http://blog.zhaiyifan.cn/2016/04/22/trans-react-newbies-tutorial/</id>
    <published>2016-04-22T02:54:01.000Z</published>
    <updated>2016-04-22T03:49:43.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="http://www.leanpanda.com/blog/2016/04/06/react-newbies-tutorial/" target="_blank" rel="external">HOMEBLOG React JS: newbies tutorial</a></li>
<li>原文作者 : Elise Cicognani</li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a></li>
<li>校对者: <a href="https://github.com/JasinYip" target="_blank" rel="external">JasinYip</a>, <a href="https://github.com/malcolmyu" target="_blank" rel="external">malcolmyu</a>, <a href="https://github.com/antonia0912" target="_blank" rel="external">羊羊羊</a></li>
</ul>
</blockquote>
<p>正如你能从标题猜到的，这篇文章的目标是给那些有很少编程经验的读者的。比如，像我这样的人：因为迄今为止，我才探索了编程世界6个月。<strong>所以，这将是一篇新手村教程！</strong> 你只需要拥有对 HTML 和 CSS 的理解，以及基本的 JavaScript（JS）知识就能看懂本文。</p>
<p>注意：在接下来的例子中，我们将会利用 ES6 提供的新能力，来简化写 JS 代码的过程。然而，你也能完全使用 ES5 来写 React。</p>
<p>预计阅读时间9分钟</p>
<h1 id="什么是_React_？">什么是 React ？</h1><p>React 是一个 JS 库，由 Facebook 和 Instagram 创建(<a href="https://facebook.github.io/react/" target="_blank" rel="external">https://facebook.github.io/react/</a>)。它通过将应用分为一些动态的、可复用的 <strong>组件</strong>，来使我们可以创建单页应用(<a href="http://www.leanpanda.com/blog/2015/05/25/single-page-application-development/" target="_blank" rel="external">Single Page Applications (SPA)</a>)。</p>
<p>一个 React 组件是一个继承了由 React 提供的 <strong>Component</strong> 的 JS 类。一个组件代表并定义了一块 HTML 代码，以及任何与这块代码相关的行为，比如点击事件。组件就像是乐高积木，可以用来组建成所需的复杂应用。完全由 JS 代码构成的组件，可以被隔离和复用。基本方法是 <strong>render()</strong>，它简单地返回一片HTML代码。</p>
<p>这种用来定义 React 组件的语法被称为 <strong>JSX</strong>。该语法由 React 的创建者们所开发，被用来简化 JS-HTML 代码的组件内交互。使用该语法写的代码在变成实际 JS 代码前必须被编译。</p>
<h1 id="创建一个组件（component）">创建一个组件（component）</h1><p>为了创建我们的组件并将它渲染为一页 HTML，我们首先在我们的 HTML 文件里需要定义一个有唯一 id 的 div。接着，我们将要在 JSX 文件里写代码，以连接 React 组件到使用其 id 的 div，如下面的例子所示。这样做将会指导浏览器在相关 DOM 标签所在的页面渲染组件。</p>
<iframe height="266" scrolling="no" src="//codepen.io/makhenzi/embed/XXdmvL/?height=266&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen &lt;a href=”<a href="http://codepen.io/makhenzi/pen/XXdmvL/&quot;&gt;Start&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi/pen/XXdmvL/&quot;&gt;Start&lt;/a&amp;gt</a>; by Makhenzi (&lt;a href=”<a href="http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt</a>;) on &lt;a href=”<a href="http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt</a>;.</iframe>

<p>See the Pen <a href="http://codepen.io/makhenzi/pen/XXdmvL/" target="_blank" rel="external">Start</a> by Makhenzi (<a href="http://codepen.io/makhenzi" target="_blank" rel="external">@makhenzi</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>JSX 内的 HTML 标签属性和普通 HTML 内的是几乎一样的；唯一不同的是“class”，在 JSX 里面变成了“className”。类 HTML 语法使用圆括号闭合，而包含 JS 的块则使用尖括号闭合。正如你将看到的。render() <em>总</em> 会返回一个 div，而在其中开发者可以自由引入他们认为合适的任意多的标签和元素。</p>
<h2 id="例子：海盗的灭绝">例子：海盗的灭绝</h2><p><img src="http://ww4.sinaimg.cn/large/a490147fjw1f2x94p1ev2j20m80etjtt.jpg" alt=""></p>
<p>如果我们选择使用 React 来创建这张图，我们可以对屏幕上各个日期进行可视化，并在那些日期被点击的时候，才显示对应的温度和海盗数量。</p>
<p>为此我们需要2个组件：第一个用来渲染日期，并将每个日期链接到给定的海盗数量和温度；第二个则需要用来接收日期上的点击事件对应的信息，如海盗的数量和当时的温度，接着基于这些数据渲染选择的元素。</p>
<p>前者相当于是“父亲”的角色，并包含多个后面的“子”组件的链接，而后者则紧密依赖于它们的“父亲”。</p>
<p>React 结构，被称为<a href="https://facebook.github.io/react/docs/working-with-the-browser.html" target="_blank" rel="external">虚拟 DOM</a>，可以使我们在组件的内容发生改变的时候，不需要刷新整个页面，而可以只更新对应组件。为此，组件需要一个内部方法，来保存变量 data 和 赋值给该元素的会被改变的 HTML 属性。这些属性会自行链接到那些我们在组件内定义的，会负责响应变化的方法。</p>
<h2 id="状态(State)和属性(props)">状态(State)和属性(props)</h2><p>在我们的例子里，那个独立的变量 data 是由日期组成的。这些会根据点击事件所集合的 DOM 内连锁反应进而根据对应海盗、温度信息而进行改变。所以我们将会根据每个 “DATA” 对象内的对应日期去保存信息。我们还将利用 React 在父组件内的 <code>this.state={}</code> 属性来以键值对拷贝形式保存变量数据的。</p>
<p>以这种形式组织程序使得我们可以利用 React 提供的方法，来以“状态(state)”的形式和数据交互，并对其进行任意更改。</p>
<p>考虑到我们想要使用 DATA 对象的 key 来渲染 HTML 内的日期，最好可以找到一种方法来在 key 上使用 JS 的 <code>map()</code> 方法(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="external">Array.prototype.map()</a>)，以便能直接显示返回到 <code>render()</code> 的 HTML。事实上确实有方法可以做到！我们只需要把 JS 代码包裹在双花括号里，并放置在想要代码输出显示的管理该组件的 DOM 块内，然后就好了。</p>
<p>在这个特殊例子中，我们将在组件内的方法里定义 <code>map()</code> 回调，其将在同一组件的<code>render()</code>内返回一片 HTML 代码。</p>
<iframe height="266" scrolling="no" src="//codepen.io/makhenzi/embed/XXdmvL/?height=266&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen &lt;a href=”<a href="http://codepen.io/makhenzi/pen/XXdmvL/&quot;&gt;Start&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi/pen/XXdmvL/&quot;&gt;Start&lt;/a&amp;gt</a>; by Makhenzi (&lt;a href=”<a href="http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt</a>;) on &lt;a href=”<a href="http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt</a>;.</iframe>

<p>See the Pen <a href="http://codepen.io/makhenzi/pen/qbZbxR/" target="_blank" rel="external">State1</a> by Makhenzi (<a href="http://codepen.io/makhenzi" target="_blank" rel="external">@makhenzi</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>为了分配点击事件到每个日期，我们将会分配 <code>onClick</code> 属性给它们。</p>
<p>在该属性中，我们会调用组件的方法，该方法则会定义我们希望在 onClick 事件后触发的状态修改和其他变更。</p>
<p>在我们的例子里，我们定义该函数为 <code>handleClick()</code>。在 handleClick() 中，我们会调用 React 方法 <code>setState()</code>，其允许我们在在每个点击事件中去更改状态数据。我们只需要插入一个包含我们想要修改的状态 key 的对象，并在后者括号内分配给它们新的相关联值。</p>
<p>总的来说，每次一个日期被点击，被选中的div的onClick属性会调用 <code>HandClick()</code> 方法，该方法会调用 setState() 方法来修改组件的状态。</p>
<p>每次状态改变，一旦发生 React 就会自动检查组件的 <code>render()</code> 函数的返回，以寻找基于新状态需要更新的内容。一旦有那样的数据， React 就会自动触发一次新的 <code>render()</code> 来更新那些有变更的 HTML 片段。</p>
<p>(我很抱歉，在接着的例子里，我插入了三行利用了 Classnames 的代码，一个用来基于状态变更来做 CSS 管理的小工具，我这么做只是为了给预览一点颜色。我还会使用它在最终的例子里给预览填充一些海盗变量。你可以找到 GitHub 上 Classnames 仓库的链接，还有一个<a href="https://github.com/JedWatson/classnames" target="_blank" rel="external">简要使用向导</a>)</p>
<iframe height="266" scrolling="no" src="//codepen.io/makhenzi/embed/EPKwRo/?height=266&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen &lt;a href=”<a href="http://codepen.io/makhenzi/pen/EPKwRo/&quot;&gt;State2&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi/pen/EPKwRo/&quot;&gt;State2&lt;/a&amp;gt</a>; by Makhenzi (&lt;a href=”<a href="http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt</a>;) on &lt;a href=”<a href="http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt</a>;.</iframe>

<p>See the Pen <a href="http://codepen.io/makhenzi/pen/EPKwRo/" target="_blank" rel="external">State2</a> by Makhenzi (<a href="http://codepen.io/makhenzi" target="_blank" rel="external">@makhenzi</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>如此，我们的父组件状态已经被设定好根据选中数据去创建子组件（其将会描述海盗数量和对应温度）。</p>
<p>我们将会在 JSX 文件中创建子组件的实例，正如我们之前对父组件所做的。为了链接子组件到其父亲上，我们只需要在后者的 <code>render()</code> 函数使用同一种语法和一个 HTML 标签去定义关系。如果我们称它为 “Child” ，它将会在我们插入 <code>&lt;Child /&gt;</code>处所在的 HTML 块内出现。</p>
<p>我们的子组件还必须根据现在选中数据所关联的海盗和温度，传递数据到其父亲。为此，我们将利用赋给 Child 标签的属性，其名字可以随便取，其信息只对父组件可见。</p>
<p>如此一来，子组件将可以通过显式访问归属于其父组件的数据，即利用这些 “attribute-bridges”，或者 <strong>属性(props)</strong>，来获取到它自己内部信息的访问权。</p>
<p>所以，每次父组件的状态发生改变，其子组件的属性内容就会自动进行更新。但是，正如子组件的<code>render()</code>方法会显示属性内容，它也会基于单向的数据线性流，根据任何收到的新信息去进行更新。</p>
<iframe height="266" scrolling="no" src="//codepen.io/makhenzi/embed/EPKbmO/?height=266&amp;theme-id=0&amp;default-tab=js,result&amp;embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen &lt;a href=”<a href="http://codepen.io/makhenzi/pen/EPKbmO/&quot;&gt;Props&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi/pen/EPKbmO/&quot;&gt;Props&lt;/a&amp;gt</a>; by Makhenzi (&lt;a href=”<a href="http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io/makhenzi&quot;&gt;@makhenzi&lt;/a&amp;gt</a>;) on &lt;a href=”<a href="http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt" target="_blank" rel="external">http://codepen.io&quot;&gt;CodePen&lt;/a&amp;gt</a>;.</iframe>

<p>See the Pen <a href="http://codepen.io/makhenzi/pen/EPKbmO/" target="_blank" rel="external">Props</a> by Makhenzi (<a href="http://codepen.io/makhenzi" target="_blank" rel="external">@makhenzi</a>) on <a href="http://codepen.io" target="_blank" rel="external">CodePen</a>.</p>
<p>搞定了！组件们会互相交互，并根据我们的点击在 DOM 里渲染不同数据，而不需要单页去进行刷新。以这个为基础，交互的复杂性和组件的数量可以按需增加，使我们能创建复杂高效的应用。</p>
<p>如果你被这个库的潜力启发了，<a href="https://react.rocks/" target="_blank" rel="external">不妨看看 react.rocks 网站</a>，在那里你会找到很多有趣的点子来帮助你开始。(:</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="http://www.leanpanda.com/blog/2016/04/06/react-newbies-tutorial/" target="_blank" rel="external">HOMEB]]>
    </summary>
    
      <category term="H5" scheme="http://blog.zhaiyifan.cn/tags/H5/"/>
    
      <category term="JavaScript" scheme="http://blog.zhaiyifan.cn/tags/JavaScript/"/>
    
      <category term="React.js" scheme="http://blog.zhaiyifan.cn/tags/React-js/"/>
    
      <category term="前端" scheme="http://blog.zhaiyifan.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="React.js" scheme="http://blog.zhaiyifan.cn/categories/React-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在 Android N 预览版中使用 Java 8 的新特性]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/04/20/trans-java-8-in-android-n-preview/"/>
    <id>http://blog.zhaiyifan.cn/2016/04/20/trans-java-8-in-android-n-preview/</id>
    <published>2016-04-20T03:48:40.000Z</published>
    <updated>2016-04-20T03:49:35.000Z</updated>
    <content type="html"><![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="https://medium.com/@sergii/java-8-in-android-n-preview-76184e2ab7ad#.ywf5x3l8w" target="_blank" rel="external">Java 8 in Android N Preview</a></li>
<li>原文作者 : <a href="https://medium.com/@sergii" target="_blank" rel="external">Sergii Zhuk</a></li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a></li>
<li>校对者: <a href="https://github.com/narcotics726" target="_blank" rel="external">narcotics726</a>, <a href="https://github.com/MiJack" target="_blank" rel="external">MiJack</a></li>
</ul>
</blockquote>
<p>Android团队最近发布了Android N Preview，带来了很多提升，包括由Jack编译器提供的Java 8支持。在这篇文章中，我们将来看看它究竟对Android开发者意味着什么，以及如何尝试新的语言特性。</p>
<blockquote>
<p><em>免责声明: 本信息在2016年3月30日是有效的，我不确定在下个release版本中，Google团队会增加什么新的没有在此提到的Java 8特性。</em></p>
</blockquote>
<p><img src="https://cdn-images-1.medium.com/max/800/1*0Vex_2H0J7MBBiu1EqMtaw.png" alt=""></p>
<figcaption>图片 by <a href="http://www.androidpolice.com/2016/03/09/android-n-feature-spotlight-jack-compiler-gains-support-for-many-java-8-language-features-including-lambdas-streams-functional-interfaces-and-more/" target="_blank" rel="external">Android Police<sup class="readableLinkFootnote">[1]</sup></a></figcaption>

<h3 id="概览">概览</h3><p>在这篇文章中，去介绍Oracle Java 8的新特性并没有太大意义 —— 很多信息已经在互联网上有了。我个人最喜欢的是Simon Ritter的“<a href="https://www.youtube.com/watch?v=rtAredKhyac" target="_blank" rel="external">Java SE 8的55个新特性<sup class="readableLinkFootnote">[2]</sup></a>”。</p>
<p>另一方面，Android <a href="http://android-developers.blogspot.de/2016/03/first-preview-of-android-n-developer.html" target="_blank" rel="external">官方的Java 8公告<sup class="readableLinkFootnote">[3]</sup></a> 留下了很多开放的问题给开发者们，感觉上并非所有的原生 Java 8 功能都是可用的。更详细的 <a href="http://developer.android.com/intl/ru/preview/j8-jack.html" target="_blank" rel="external">技术公告<sup class="readableLinkFootnote">[4]</sup></a> 确认了这一点。我们可以根据在 Android N 中的可用性，将这些语言特性分类如下：</p>
<p>Android Gingebread (API 9)及以上:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html" target="_blank" rel="external">Lambda 表达式</a></li>
<li><a href="https://docs.oracle.com/javase/8/docs/api/java/util/function/package-summary.html" target="_blank" rel="external">java.util.function</a></li>
</ul>
<p>Android N及以上:</p>
<ul>
<li><a href="https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html" target="_blank" rel="external">默认和静态interface方法</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/annotations/repeating.html" target="_blank" rel="external">可重复的注解</a></li>
<li><a href="http://www.oracle.com/technetwork/articles/java/ma14-java-se-8-streams-2177646.html" target="_blank" rel="external">流(Streams)</a></li>
<li>反射APIs</li>
</ul>
<p>所以对Java 8特性和使用的minSdkVersion之间的关联性，开发者必须去精心选择。我们也必须注意到语言向后兼容是由Jack编译器提供的。在概念上，Jack编译器将javac，ProGuard，以及dex的功能 <a href="https://www.guardsquare.com/blog/the_upcoming_jack_and_jill_compilers_in_android" target="_blank" rel="external">合并 <sup class="readableLinkFootnote">[5]</sup></a>到了一个转换步骤中。<a href="http://trickyandroid.com/the-dark-world-of-jack-and-jill/" target="_blank" rel="external">这意味着<sup class="readableLinkFootnote">[6]</sup></a>其中没有中间的Java字节码可用，且像是JaCoCo和Mockito的工具将无法工作，DexGuard也一样 (ProGuard的企业版本)。让我们祈祷这只是一个早期的preview版本，且这些问题将在未来被修复。</p>
<p>Lambda表达式以及相关的函数功能APIs —— 这是一个每个Android开发都会喜欢的东西。这类功能将会对增加代码可读性极为有用 —— 它替代了提供事件监听器的匿名内部类。而之前只能通过 <a href="http://zserge.com/blog/android-lambda.html" target="_blank" rel="external">额外的工具<sup class="readableLinkFootnote">[7]</sup></a> 来实现，或者由Android Studio编辑器去折叠代码。</p>
<p>默认及静态interface方法可以帮助我们减少额外的工具类的数量，但显然不是最需要的特性。还有一些其他的新增功能，我希望去说的更详细一些，因此不在本文的范围内。</p>
<p>对我来说最有趣的事 —— Java 8 流(Streams) —— 在当前的预览版中不可用。我们可以发现事实上它 <a href="https://android.googlesource.com/platform/libcore/+/916b0af2ccdd1bdfc0283b1096b291c40997d05f" target="_blank" rel="external">刚被merge<sup class="readableLinkFootnote">[8]</sup></a> 到AOSP源码，所以期望可以在下个N Preview 或者 Beta release中见到它。如果你实在等不及去浏览 —— 可以试试使用 <a href="https://github.com/aNNiMON/Lightweight-Stream-API" target="_blank" rel="external">Lightweight-Stream-API<sup class="readableLinkFootnote">[9]</sup></a>，目前的一个开源向后兼容。</p>
<h3 id="示例项目">示例项目</h3><p><a href="http://developer.android.com/preview/setup-sdk.html" target="_blank" rel="external">官方手册<sup class="readableLinkFootnote">[10]</sup></a>提供了指示，甚至还有图展示了如何去配置你的项目使用 Android N Preview 和 Java 8。在这儿没什么可以再说的，就跟着指示走吧。</p>
<p><img src="http://ww4.sinaimg.cn/large/a490147fjw1f2w1lxrva9j20m803pt9h.jpg" alt=""></p>
<p>下一步是去配置你的app模块的 build.gradle 文件。你可以在下面看到实例的 build.gradle 文件。从N SDK上的公告来看，似乎可以设置 <em>minSdkVersion</em> 为 Jelly Bean 或者 KitKat。 但… 在将 <em>targetSdkVersion</em> 设为Android N Preview后，<a href="http://stackoverflow.com/questions/36278517/java-8-in-android-n-preview" target="_blank" rel="external">将无法工作在API低于N的设备上<sup class="readableLinkFootnote">[11]</sup></a>。另外，如果你把 <em>minSdkVersion</em> 设置为23或者更低 —— Java 8代码将无法编译。这里是一些在 <a href="http://stackoverflow.com/questions/35929484/android-n-cannot-run-on-lower-api-though-minsdk-set-to-14" target="_blank" rel="external">SO forums<sup class="readableLinkFootnote">[12]</sup></a>的hack，描述了怎么设置minSdk为想要的值并使得app可以工作。我希望你不会在生产代码中使用这种方法 :)</p>
<p>我决定保持实例代码干净，所以没有添加任何hack手段来做低版本兼容，请读者自由去尝试或者使用N的测试设备/模拟器。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">android</span> &#123;</span><br><span class="line">    <span class="title">compileSdkVersion</span> <span class="string">'android-N'</span></span><br><span class="line">    buildToolsVersion <span class="string">'24.0.0 rc1'</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        <span class="title">applicationId</span> <span class="string">"org.sergiiz.thermometer"</span></span><br><span class="line">        minSdkVersion <span class="string">'N'</span> // 在 N Preview 中不能使用低于N的版本</span><br><span class="line">        targetSdkVersion <span class="string">'N'</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">        jackOptions&#123;</span><br><span class="line">            <span class="title">enabled</span> <span class="built_in">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        <span class="title">targetCompatibility</span> <span class="number">1</span>.<span class="number">8</span></span><br><span class="line">        sourceCompatibility <span class="number">1</span>.<span class="number">8</span></span><br><span class="line">    &#125;</span><br><span class="line">    //...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>请注意这个设置是跟着新的<a href="http://developer.android.com/preview/j8-jack.html" target="_blank" rel="external">文档<sup class="readableLinkFootnote">[13]</sup></a>来的，使用了新的 Gradle DSL 方法 <em>jackOptions</em> 来配置Jack编译器设置，在更老的版本中，我们使用 <em>useJack true</em> 来达到同样的结果。</p>
<p>所以来试着实现一些Java 8的优雅代码到我们陈旧的Thermometer项目。</p>
<p>这是一个接口，包含了默认方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Thermometer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">void</span> <span class="title">setCelsius</span><span class="params">(<span class="keyword">final</span> <span class="keyword">float</span> celsiusValue)</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">float</span> <span class="title">getValue</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function">String <span class="title">getSign</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">default</span> String <span class="title">getFormattedValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> String.format(Locale.getDefault(),</span><br><span class="line">            <span class="string">"The temperature is %.2f %s"</span>, getValue(), getSign());</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>实现了这个接口的类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FahrenheitThermometer</span> <span class="keyword">implements</span> <span class="title">Thermometer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">float</span> fahrenheitDeg;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">FahrenheitThermometer</span><span class="params">(<span class="keyword">float</span> celsius)</span> </span>&#123;</span><br><span class="line">      setCelsius(celsius);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCelsius</span><span class="params">(<span class="keyword">float</span> celsius)</span> </span>&#123;</span><br><span class="line">      fahrenheitDeg = celsius * <span class="number">9</span> / <span class="number">5</span> + <span class="number">32f</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getValue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> fahrenheitDeg;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="annotation">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getSign</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> Constants.DEGREE + <span class="string">"F"</span>;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>增加一个点击事件的lambda函数：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="component">buttonFahrenheit.setOnClickListener(view1 -&gt; &#123;</span><br><span class="line">   fahrenheitThermometer<span class="string">.setCelsius(currentCelsius)</span>;</span><br><span class="line">   String text = fahrenheitThermometer<span class="string">.getFormattedValue()</span>;</span><br><span class="line">   makeText(MainActivity<span class="string">.this</span>, text, Toast<span class="string">.LENGTH_SHORT).show()</span>;</span><br><span class="line">&#125;</span>);</span><br></pre></td></tr></table></figure>
<p>例子的完整源码可见 <a href="https://github.com/sergiiz/AndroidNPreviewJ8" target="_blank" rel="external">GitHub repository<sup class="readableLinkFootnote">[14]</sup></a>。</p>
<h3 id="总结">总结</h3><p>在这篇文章中，我们了解了Java 8的用例，以及目前其在Android N Preview SDK的实现情况。我们也看到了当前Jack编译器的限制，及其在最后发布前可能被修复的功能。在demo项目中我们检验了如何去使用新的Java 8特性，以及它们可以被应用的target SDK版本。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<ul>
<li>原文链接 : <a href="https://medium.com/@sergii/java-8-in-android-n-preview-76184e2ab7ad#.ywf5x3l8w" target="_blank" rel="e]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Java8" scheme="http://blog.zhaiyifan.cn/tags/Java8/"/>
    
      <category term="Java8" scheme="http://blog.zhaiyifan.cn/categories/Java8/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目4 - Dagger2篇]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/03/27/android-new-project-from-0-p4/"/>
    <id>http://blog.zhaiyifan.cn/2016/03/27/android-new-project-from-0-p4/</id>
    <published>2016-03-27T03:14:49.000Z</published>
    <updated>2016-04-01T02:55:01.000Z</updated>
    <content type="html"><![CDATA[<p>Dagger - 匕首，顾名思义，比ButterKnife这把黄油刀锋利得多。Square为什么这么有自信地给它取了这个名字，Google又为什么会拿去做了Dagger2呢（不都有Guice和基于其做的RoboGuice了么）？希望本文能讲清楚为什么要用Dagger2，又如何用好Dagger2。</p>
<p>本文会从Dagger2的起源开始，途径其初衷、使用场景、依赖图，最后介绍一下我在项目中的具体应用和心得体会。</p>
<h1 id="Origin">Origin</h1><p><a href="https://github.com/google/dagger" target="_blank" rel="external">Dagger2</a>，起源于Square的<a href="http://github.com/square/dagger/" target="_blank" rel="external">Dagger</a>，是一个完全在编译期间进行的依赖注入框架，完全去除了反射。</p>
<p>关于Dagger2的最初想法，来自于2013年12月的<a href="https://github.com/square/dagger/issues/366" target="_blank" rel="external">Proposal: Dagger 2.0</a>，Jake大神在issue里面也有回复哦，而idea的来源者<a href="https://github.com/gk5885" target="_blank" rel="external">Gregory Kick</a>的GitHub个人主页也没多少follower，自己也没几个项目，主要都在贡献其他的repository，可见海外重复造轮子的风气比我们这儿好多了。</p>
<p>扯远了，Dagger2的诞生就是源于开发者们对Dagger1半静态化半运行时的不满（尤其是在服务端的大型应用上），想要改造成完整的静态依赖图生成，完全的代码生成式依赖注入解决方案。在权衡了什么对Android更适合，以及对大型应用来说什么更有意义（往往有可怕数量的注入）两者后，Dagger2诞生了。</p>
<h1 id="初衷">初衷</h1><p>Dagger2的初衷就是装逼，啊，不对，是通过依赖注入让你少些很多公式化代码，更容易测试，降低耦合，创建可复用可互换的模块。你可以在Debug包，测试运行包以及release包优雅注入三种不同的实现。</p>
<h2 id="依赖注入">依赖注入</h2><p>说到依赖注入，或许很多以前做过JavaEE的朋友会想到Spring（SSH在我本科期间折磨得我欲生欲死，最后Spring MVC拯救了我）。</p>
<p>我们看个简单的比较图，左边是没有依赖注入的实现方式，右边是手动的依赖注入：<br><img src="/images/android-new-project-from-0-dagger-di.png" alt="Without DI and with Maunl DI"></p>
<p>我们想要一个咖啡机来做一杯咖啡，没有依赖注入的话，我们就需要在咖啡机里自己去new泵(pump)和加热器(heater)，而手动依赖注入的实现则将依赖作为参数，然后传入，而不是自己去显示创建。在没有依赖注入的时候，我们丧失了灵活性，因为一切依赖是在内部创建的，所以我们根本没有办法去替换依赖实例，比如想把电加热器换成火炉或者核加热器，看一看下图，是不是更清晰了：<br><img src="/images/android-new-project-from-0-dagger-di-picture.png" alt="Without DI and with Maunl DI"></p>
<h2 id="为什么我们需要DI库">为什么我们需要DI库</h2><p>但问题在于，在大型应用中，把这些依赖全都分离，然后自己去创建的话，会是一个很大的工作量——毫无营养的公式化代码，一堆Factory类。不仅仅是工作量的问题，这些依赖可能还有顺序的问题，A依赖B，B依赖C，B依赖D，如此一来C、D就必须在A、B的后面，手动去做这些工作简直是一个噩梦 =。=（哈哈，是不是想到了appliation初始化那些依赖）。Google的工程师碰到的问题就是在Android上有3000行这样的代码，而在服务器上的大型程序则是100000行。</p>
<p>你会想自己维护这样的代码吗？</p>
<h2 id="Why_Dagger2">Why Dagger2</h2><p>先来看看如果用Spring实现上面提到的咖啡机依赖，我们需要做什么：<br><img src="/images/android-new-project-from-0-dagger-spring.png" alt="DI with Spring"><br>不错，就是xml，当然，我们也不需要去关心顺序了，Spring会帮我们解决前后顺序的依赖问题。</p>
<p>但仔细想想，你会想去自己写这样的xml代码吗？layout.xml已经写得我很烦了。而且Spring是在运行时验证配置和依赖图的，你不会想在外网运行的app里让用户发现你的依赖注入出了问题的（比如bean名字打错了）。再加上xml和Java代码分离，很难追踪应用流。</p>
<p>Guice虽然较Spring进了一步，干掉了xml，通过Java声明依赖注入比起Spring好找多了，但其跟踪和报错（运行时的图验证）实在令人抓狂，而且在不同环境注入不同实例的配置也挺恶心的（if else各种判断），感兴趣的可以去看看，项目就在GitHub上，Android版本的叫RoboGuice。</p>
<p>而Dagger2和Dagger1的差别在上节已经提到了，更专注于开发者的体验，从半静态变为完全静态，从Map式的API变成申明式API（@Module），生成的代码更优雅，更高的性能（跟手写一样），更简单的debug跟踪，所有的报错也都是在编译时发生的。</p>
<p>Dagger2使用了JSR 330的依赖注入API，其实就是Provider了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Provider</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">  <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Usage:</span></span><br><span class="line">Provider&lt;T&gt; coffeeMakerProvider = ...;</span><br><span class="line">CoffeeMaker coffeeMaker = coffeeMakerProvider.get();</span><br></pre></td></tr></table></figure></p>
<p>Dagger2基于Component注解：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Component</span>(modules = DripCoffeModule.class)</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CoffeeMakerComponet</span> </span>&#123;</span><br><span class="line">  <span class="function">CoffeeMaker <span class="title">getCoffeeMaker</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 会生成这样的代码，Dagger_CoffeeMakerComponent里面就是一堆Provider，</span></span><br><span class="line"><span class="comment">// 或者是单例，或者是通过DripCoffeeModule申明new的方式，开发者不必关心依赖顺序</span></span><br><span class="line">CoffeeMakerComponent component = Dagger_CoffeeMakerComponent.create();</span><br><span class="line">CoffeeMaker coffeeMaker = component.getCoffeeMaker();</span><br></pre></td></tr></table></figure></p>
<p>除了上面提到的各种好处，不得不提的是也有对应问题：丧失了动态性，在之后的实践中我会举个例子描述一下，但相对于那些好处来说，我觉得是可接受的。Everything has a Price to Pay。啊，对了，还有另一点，没法自动升级，从Dagger1到Dagger2，当然如果你的app是没有历史负担的（本系列的前提），那这不算问题。</p>
<p>如果对性能感兴趣的话，可以去看看<a href="http://blog.nimbledroid.com/2016/03/07/performance-of-dependency-injection-libraries.html" target="_blank" rel="external">Comparing the Performance of Dependency Injection Libraries</a>，RoboGuice:Dagger1:Dagger2差不多是50:2:1的一个性能差距。</p>
<p>如果你用了Dagger2，而你的服务端还在用Spring，你可以自豪地说，我们比你们领先5年。而Google的服务端确实已经用了Dagger2。</p>
<h1 id="使用场景">使用场景</h1><p>上面也曾经提到了，因为手动去维护那些依赖关系、范围很麻烦，就连单例我都懒得写，何况是各种Factory类，老在那synchroized烦不烦。而如果不去写那些Factory，直接new，则会导致后期维护困难，比如增加了一个参数，为了保证兼容性，就只能留着原来的构造函数（习惯好一点的标一下deprecated），再新增一个构造函数。</p>
<p>Dagger2解决了这些问题，帮助我们管理实例，并进行解耦。new只需要写在一个地方，getInstance也再也不用写了。而需要使用实例的地方，只需要简简单单地来一个@inject，而不需要关心是如何注入的。Dagger2会在编译时通过apt生成代码进行注入。</p>
<p>想想你所有可能在多个地方使用的类实例依赖，比如lbs服务，比如你的cache，比如用户设置，比起getInstance，比起new，比起自己用注释去注明必须维持这种先后关系（说到此处，想到上个东家的android app初始化时候，必须保持正确顺序不然立马crash，singleton还必须只能init一次的糟糕代码），为什么不用dagger来做管理？Without any performance overhead。</p>
<p>Dagger2基于编译时的静态依赖图构建还能避免运行时再出现一些坑，比如循环依赖，编译的时候就会报错，而不会在运行时死循环。</p>
<p>生动点来说的话。有一场派对：</p>
<p>Android开发A说，有妹子我才来。<br>美女前端B说，有帅哥设计师，我才来。<br>iOS开发C说，有Android开发，我才来。<br>帅哥设计师说，只有礼拜天我才有空。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AndroidDeveloper</span> <span class="keyword">extends</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AndroidDeveloper</span><span class="params">(PartyMember female)</span> <span class="keyword">throws</span> NotMeizhiSayBB</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FrontEndDeveloper</span> <span class="keyword">extends</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FrontEndDeveloper</span><span class="params">(Designer designer)</span> <span class="keyword">throws</span> NotHandsomeBoySayBB</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IOSDeveloper</span> <span class="keyword">extends</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IOSDeveloper</span><span class="params">(AndroidDeveloper dev)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Designer</span> <span class="keyword">extends</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Designer</span><span class="params">(Date date)</span> throw CannotComeException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PartyMember</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mSex = <span class="number">0</span>; <span class="comment">// 1 for male, 2 for female.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSex</span><span class="params">(<span class="keyword">int</span> sex)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 手动DI，要自己想怎么设计顺序，还不能轻易改动</span></span><br><span class="line">Designer designer = <span class="keyword">new</span> Designer(<span class="string">"礼拜天"</span>)；</span><br><span class="line">FrontEndDeveloper dev1 = <span class="keyword">new</span> FrontEndDeveloper(designer);</span><br><span class="line">dev1.setSex(<span class="number">2</span>);</span><br><span class="line">AndroidDeveloper dev2 = <span class="keyword">new</span> AndroidDeveloper(dev1);</span><br><span class="line">IOSDeveloper dev3 = <span class="keyword">new</span> IOSDeveloper(dev2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// With Dagger2</span></span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">Designer designer;</span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">FrontEndDeveloper dev1;</span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">AndroidDeveloper dev2;</span><br><span class="line"><span class="annotation">@Inject</span></span><br><span class="line">IOSDeveloper dev3;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不使用DI太可怕了...自己想象一下会是什么样吧</span></span><br><span class="line">...我懒</span><br></pre></td></tr></table></figure>
<h2 id="Scope">Scope</h2><p>Dagger2的Scope，除了Singleton（root），其他都是自定义的，无论你给它命名PerActivity、PerFragment，其实都只是一个命名而已，真正起作用的是inject的位置，以及dependency。</p>
<p>Scope起的更多是一个限制作用，比如不同层级的Component需要有不同的scope，注入PerActivity scope的component后activity就不能通过@Inject去获得SingleTon的实例，需要从application去暴露接口获得（getAppliationComponent获得component实例然后访问，比如全局的navigator）。</p>
<p>当然，另一方面则是可读性和方便理解，通过scope的不同很容易能辨明2个实例的作用域的区别。</p>
<h1 id="依赖图例子">依赖图例子</h1><p><img src="/images/android-new-project-from-0-dagger-simple-graph.png" alt="Simple Graph"></p>
<p>如上是一个我现在使用的Dagger2的依赖图的简化版子集。</p>
<p>ApplicationComponent作为root，拆分出了3个module</p>
<ul>
<li>ApplicationModule（application context，lbs服务，全局设置等）</li>
<li>ApiModule（Retrofit那堆Api在这里）</li>
<li>RepositoryModule（各种repository）。<br>这里为了妥协内聚和简洁所以保持了这三个module。你不会想看到自己的di package下有一大堆module类，或者某个module里面掺杂着上百个实例注入的。</li>
</ul>
<p>UserComponent用在用户主页、登录注册，以及好友列表页。所以你能看到UserModule（用户系统以及那些UseCase）以及需要的赞Module、相册Module。</p>
<p>TagComponent是标签系统，有自己的标签Module以及赞Module（module重用），用在了标签搜索、热门标签等页面。</p>
<p>是不是很好理解？位于上层的component是看不到下层的，而下层则可以使用上层的，但不能引用同一层相邻component内的实例。</p>
<p>如果你的应用是强登录态的，则更可以只把UserComponent放在第二层，Module构造函数传入uid（PerUser scope，没有uid则为游客态，供deeplink之类使用），而所有需要登录态的则都放在第三层。</p>
<p>一个简单的应用就是这样了，而Component继承，SubComponent（共享的放在上层父类），不同component的module复用（一样可以生成实例绑定，只是没法共享component中暴露的接口罢了）这些则是不同场景下的策略，如果有必要我会再开一篇讲讲这些深入的使用。</p>
<h1 id="具体应用和心得体会">具体应用和心得体会</h1><ul>
<li><p>No Proguard rules need。因为0反射，所以完全不需要去配置proguard规则。</p>
</li>
<li><p>因为需要静态地去inject，如果一些参数需要运行时通过用户行为去获得，就只能使用set去设置注入实例的参数（因为我们的injection通常在最早，比如onCreate就需要执行）。这就是上文提到过的，因为完全静态而丧失了一定的动态性。</p>
</li>
<li><p>Singleton是线程安全的，请放心，如果实在怀疑，可以去检查生成的源码，笔者已经检查过了…</p>
</li>
<li><p>粒度的问题，如果基于页面去划分的话，老实说笔者觉得实在太细太麻烦，建议稍微粗一点，按照大功能去分，完全可以通过拆分module或者SubComponent的形式去解决复用的问题，而不用拆分出一大堆component，module只要足够内聚就可以，而不需要拆分到某个页面使用的那些。</p>
</li>
<li><p>fragment的问题，因为其诡异的生命周期，所以建议在实在需要fragment的时候，让activity去创建component，fragment通过接口（比如HasComponent）去获得component（一个activity只能inject一个component哦）。</p>
</li>
<li><p>举一个我遇到的例子来说说方便的地方，有一个UseCase叫做SearchTag，原先只需要TagRepository，ThreadExecutor，PostThreadExecutor三个参数。现在需求改变了，需要在发起请求前先进行定位，然后把位置信息也作为请求的参数。我们只需要简单地在构造函数增加一个LbsRepository，然后在buildUseCaseObservable通过RxJava组合一下，这样既避免了底层repository的耦合，又对上层屏蔽了复杂性。</p>
</li>
<li><p>再讲讲之前提到的依赖吧，我们有很多同级的实例，以Singleton为例，比如有一个要提供给第三方sdk的Provider依赖了某个Repository，直接在构造函数里加上那个Repository，然后加上@Inject，完全不需要关心前后顺序了，省不省心？还可以随时在单元测试的包注入一个不需要物理环境的模拟repository。想想以前你怎么做，或者在调用这个的初始化前init依赖的实例，或者在初始化里去使用依赖类的getInstance()，是不是太土鳖？</p>
</li>
<li><p>强烈推荐你在自己的项目里使用上，初期可能怀着装逼的心情觉得有点麻烦，熟练后你会发现简直太方便了，根本离不开（其实是我的亲身经历 哈哈）。</p>
</li>
</ul>
<h1 id="总结">总结</h1><p>本篇讲了讲Dagger2，主要还是在安利为什么要用Dagger2，以及一些正确的使用姿势，因为时间原因来不及写个demo来说说具体实现，欢迎大家提出意见和建议。<br>有空的话我最近会在GitHub上写一下demo，你如果有兴趣可以follow一下等等更新: <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a>（希望在4月能完成，哈哈…）。</p>
<h1 id="下集预告">下集预告</h1><p>怎么用Retrofit、Realm和RxJava搭建data层。</p>
<h1 id="参考文献">参考文献</h1><ul>
<li>DAGGER 2 - A New Type of dependency injection: <a href="https://youtu.be/oK_XtfXPkqw" target="_blank" rel="external">https://youtu.be/oK_XtfXPkqw</a></li>
<li>Dagger 2 Official Site: <a href="http://google.github.io/dagger/" target="_blank" rel="external">http://google.github.io/dagger/</a></li>
<li>Dagger 2 Design Doc: <a href="http://goo.gl/mW474Z" target="_blank" rel="external">http://goo.gl/mW474Z</a></li>
</ul>
<h1 id="扩展阅读">扩展阅读</h1><ul>
<li><a href="http://stackoverflow.com/questions/28411352/what-determines-the-lifecycle-of-a-component-object-graph-in-dagger-2" target="_blank" rel="external">What determines the lifecycle of a component (object graph) in Dagger 2?</a></li>
<li><a href="http://frogermcs.github.io/dependency-injection-with-dagger-2-custom-scopes/" target="_blank" rel="external">Dependency injection with Dagger 2 - Custom scopes</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>Dagger - 匕首，顾名思义，比ButterKnife这把黄油刀锋利得多。Square为什么这么有自信地给它取了这个名字，Google又为什么会拿去做了Dagger2呢（不都有Guice和基于其做的RoboGuice了么）？希望本文能讲清楚为什么要用Dagger2，又如]]>
    </summary>
    
      <category term="Dagger" scheme="http://blog.zhaiyifan.cn/tags/Dagger/"/>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目3 - MVPVM in Action, 谁告诉你MVP和MVVM是互斥的]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/03/16/android-new-project-from-0-p3/"/>
    <id>http://blog.zhaiyifan.cn/2016/03/16/android-new-project-from-0-p3/</id>
    <published>2016-03-16T02:19:28.000Z</published>
    <updated>2016-03-26T06:47:44.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>去年5月左右的时候，笔者在逛GitHub的时候，看到了一个MVP的项目，叫做mosby，仔细看了源码和作者介绍的文章后，发现确实有点意思，虽然会需要多写几个类和方法，但是解决了activity/fragment过重的问题，通过V/P分离能够帮助提高可维护性。时至去年年底，今年年初，MVP才逐渐被大家所知，也不时看到些文章介绍其概念和实践。</p>
<p>再说说MVVM (Model-View-ViewModel)，在Android上对应data binding。即ViewModel到View的映射，不需要再去自己找到view，然后更新字段，而是在映射建立后直接更新ViewModel然后反映到View上。</p>
<p>值得一提的是，MVP和MVVM都是微软提出的理念，最早都是在WPF里面被应用的，只是时至今日才在Android上被真正用起来。本文不是来介绍这两个的，所以不再赘述，讲讲正题。</p>
<p>在本系列<a href="http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p1/">首篇</a>中我曾经提到过在我设计的新应用中，采用了MVP+MVVM的混合（当初也考虑过Flux，但感觉并不合适Android），后来有一次CJJ同学和我探讨这个架构的时候，问到了我有没有什么正式的名字，我就有楞，因为这个组合和应用是我自己设计的，所以还真没想过这个问题，Google一搜，还真有这么个东西（见参考资料，文章写得很棒，建议英文不错的同学读一读）！</p>
<p>这就是本文我要介绍的东西，MVPVM (Model-View-Presenter-ViewModel)。</p>
<h1 id="Quick_glance">Quick glance</h1><p>以下所有Model，并不单单指的是Bean，而是Model层，更像是repository或者business logic。</p>
<p><img src="/images/android-new-project-from-0-mvc.png" alt="MVC"></p>
<p>MVC: View持有Controller，传递事件给Controller，Controller由此去触发Model层事件，Model更新完数据（如从网络或者数据库获得数据后）触发View的更新事件。</p>
<p><img src="/images/android-new-project-from-0-mvp.png" alt="MVP"></p>
<p>乍一看，MVP似乎是MVC的变种，即C的位置被P取代了，但如果我们再看一看下图：</p>
<p><img src="/images/android-new-project-from-0-mvpc.png" alt="MVCP"></p>
<p>其实MVP是MVC的一个wrap，C层仍然可以在那里，代替View处理点击事件、数据绑定、扮演ListView的观察者，从而View可以专注于处理纯视觉的一些东西。而Presenter则避免了Model直接去触发View的更新，View彻底成为了一个被动的东西，只有Presenter告知其更新视觉，它才会去更新，比如showLoading(), showEmpty()。</p>
<p><img src="/images/android-new-project-from-0-mvvm.png" alt="MVVM"></p>
<p>MVVM通过View和ViewModel的双向绑定，让我们可以</p>
<ul>
<li>直接更新ViewModel，View会进行对应刷新</li>
<li>View的事件直接传递到ViewModel，ViewModel去对Model进行操作并接受更新。</li>
</ul>
<h1 id="Why_MVPVM">Why MVPVM</h1><p>如果你仔细读过Clean architecture的源码，会发现其中已经有了ViewModel这一层。如果你熟悉DO（Domain Object），PO（Persistent Object），VO（View Object），或许了解visibility这个概念，各层只需要知道其应该知道的。这些Object代表了完全独立不同的概念。</p>
<p>ViewModel层的必要性，简单举个例子，服务器传来一个Date String，但我们需要显示的是该Date到现在的相对时间描述，比如1分钟前，2天前，为了避免在view中绑定数据时去做这个逻辑，ViewModel会代替来进行这个的转换。</p>
<p>MVVM尽管确实省去了绑定数据到View的boilerplate，但</p>
<ul>
<li>ViewModel引用了View，从而导致ViewModel无法重用于其他View。</li>
<li>并没有解决View层过重的问题，仅仅去掉了数据绑定，尤其对一些复杂业务逻辑的页面。</li>
</ul>
<p>模式的引入都是为了通过可拔插化以提高可复用性，松耦合和尽量小的接口可以给予最大的可复用性，使得组件能重组使用。</p>
<p>所以有了MVPVM：</p>
<p><img src="/images/android-new-project-from-0-mvpvm.png" alt="MVPVM"></p>
<p>在我的个人实践中:</p>
<ul>
<li>Model: data和domain模块组成，包含了Interactor（UseCase）、Repository、Datastore、Retrofit、Realm、DO、部分PO等。</li>
<li>View: Activity/Fragment。</li>
<li>Presenter：Presenter，包含了Subscriber，并通过Dagger2注入UseCase从而减轻耦合。</li>
<li>ViewModel：由Model转换而成，继承BaseObservable或SortedList，大部分直接wrap了model，从而去掉了mapper的boilerplate。通过Data Binding绑定到xml。</li>
</ul>
<p>从Presenter的Subscriber往下都是RxJava的流世界，stream in stream out。如果你原来就应用了MVP或者Clean Architecture，那会发现再加上ViewModel简直太简单了，同时让代码库更小，逻辑更清晰。</p>
<p>接着看看各个组件在MVPVM中的standing。</p>
<h2 id="MVPVM:_Model">MVPVM: Model</h2><p>实际对应的是Repository层，即第一篇文章中提到的data/domain module。具体的Model理论上应该是PO，但我们大部分场景并不需要PO，所以也可以是domain层的DO。</p>
<h2 id="MVPVM:_View">MVPVM: View</h2><p>View对ViewModel不需要了解太多，这样才能保持两者的解耦，两者之间的协议只需要：</p>
<ul>
<li>ViewModel支持View需要展示的properties。</li>
<li>View实现了ViewModel的观察者模式接口（如Listener）。</li>
</ul>
<p>所以这里ViewModel到View是一条虚线，而不是MVVM中的双向实线。</p>
<h2 id="MVPVM:_Presenter">MVPVM: Presenter</h2><p>和在MVP一样，Presenter站在View和Model层之间。这里值得一提的是Presenter到ViewModel是有耦合的，因为Presenter需要把model更新到ViewModel中，也就是map行为，然后调用View的对应接口进行binding。</p>
<p>Presenter是MVPVM中唯一不需要解耦的，它紧紧地与View、ViewModel、Model层耦合。如果你的Presenter被多个View重用了，那你可能需要考虑它是不是更应该作为一个module，比如（第三方）登陆。</p>
<h2 id="MVPVM:_ViewModel">MVPVM: ViewModel</h2><p>MVPVM让ViewModel可以重用，因为它再也不是直接和特定View绑定，而仅仅作为数据到View的一个绑定用展示。ViewModel因为用户操作而触发的事件不再直接对Model进行操作，而由View去负责任务流。ViewModel本身基本没有field，而是通过暴露get方法来让data binding找到对应要显示的property，get方法中直接调用持有的model的对应属性get方法。</p>
<p>理想化的架构是通过一个mapper类进行转换，但我想大部分的程序员面对这个工作都会抓狂，毕竟很多字段其实就是一个复制，而且对性能也有一些影响（遍历list，new对象，一个个字段转换，添加到新的list）。所以折中地，让ViewModel持有Model，在get方法中直接返回对应model的具体字段，在一些特殊的field如相对时间、添加一些描述性字符的地方再去进行拼接和特殊处理。</p>
<p>啊，对了，说到ViewModel，Data Binding现在支持双向绑定了哦，见<a href="https://halfthought.wordpress.com/2016/03/23/2-way-data-binding-on-android/，语法如：" target="_blank" rel="external">https://halfthought.wordpress.com/2016/03/23/2-way-data-binding-on-android/，语法如：</a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">EditText</span> <span class="attribute">android:text</span>=<span class="value">"@=&#123;user.firstName&#125;"</span> <span class="attribute">...</span>/&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>不同于单向绑定的@{}，使用了@={}，毕竟双向绑定这个东西还是慎用，一方面早成数据流混乱不好理解，另一方面容易出现死循环。</p>
<h2 id="NO_Presenter">NO Presenter</h2><p>在MVP中，我们有时候碰到的问题是，Presenter真的有必要存在吗，尤其是一些较为静态，没什么业务逻辑，只需要纯展示的页面，结果就是为了MVP而特意去创建一个Presenter。</p>
<p>所以Presenter不应该被强求，正如MVP中，V和C其实被并在了一起，在某些情况下（确实就是个纯展示，或者很少的业务逻辑），应该允许去Presenter，并让View承担其任务。比如注册页面，我真的就只是想把用户的输入发到服务器验证一下，何必非得去搞一个presenter套着呢？</p>
<p>我们不能永远理想化地去选择所谓最好的设计，在现实的必要情况下，我们要敢于舍弃，最合适的设计才是最好的设计。为此，Presenter不是强制的；为此，ViewModel并不一定通过mapper生成，而可以返回持有的DO对象对应字段。</p>
<h1 id="总结">总结</h1><p>本篇讲了讲MVPVM及其在Android的实践，因为时间原因来不及写个demo来说说具体实现，欢迎大家提出意见和建议。有空的话我最近会在GitHub上写一下demo，你如果有兴趣可以follow一下等等更新: <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a>。</p>
<h1 id="下集预告">下集预告</h1><p>Dagger匕首，比ButterKnife黄油刀锋利得多。Square为什么这么有自信地给它取了这个名字，Google又为什么会拿去做了Dagger2呢？笔者看了很多国内Dagger2的文章，但发现它们都保留在介绍API和官网翻译的层面，无法让读者能明白究竟为什么用Dagger2，又如何用好Dagger2。希望能在下一次为大家讲清楚。</p>
<h1 id="参考资料">参考资料</h1><ul>
<li><a href="https://msdn.microsoft.com/en-us/magazine/hh580734.aspx" target="_blank" rel="external">MVPVM Design Pattern - The Model-View-Presenter-ViewModel Design Pattern for WPF</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>去年5月左右的时候，笔者在逛GitHub的时候，看到了一个MVP的项目，叫做mosby，仔细看了源码和作者介绍的文章后，发现确实有点意思，虽然会需要多写几个类和方法，但是解决了activity/fragment过重的问题，通过V/P分离]]>
    </summary>
    
      <category term="MVP" scheme="http://blog.zhaiyifan.cn/tags/MVP/"/>
    
      <category term="MVPVM" scheme="http://blog.zhaiyifan.cn/tags/MVPVM/"/>
    
      <category term="MVVM" scheme="http://blog.zhaiyifan.cn/tags/MVVM/"/>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目2 - Gradle篇]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p2/"/>
    <id>http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p2/</id>
    <published>2016-03-14T05:52:39.000Z</published>
    <updated>2016-03-14T09:16:34.000Z</updated>
    <content type="html"><![CDATA[<p>相信大家的项目用上gradle都已经很久了，但用得如何呢？这里分享一下我的gradle脚本，大部分都是去年6月左右就开始用上的，有一部分比如签名的安全保存则是最近才自己动手，做了令自己觉得还不错的方案。</p>
<h1 id="module类型的区分">module类型的区分</h1><p>科普小结，可能有些同学不太明白Java library module和Android library module是怎么区分的，其实就是个plugin的区别，在module的build.gradle中:</p>
<p>Android application module:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.application'</span></span><br></pre></td></tr></table></figure></p>
<p>Android library module:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'com.android.library'</span></span><br></pre></td></tr></table></figure></p>
<p>Java library module:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'java'</span></span><br></pre></td></tr></table></figure></p>
<h1 id="版本号管理">版本号管理</h1><p>如果只有一个application module还好，如果我们有多个module怎么办呢？每次改版本号累不累？</p>
<p>解决方案就是在root里申明全局变量，可以在单独的gradle里（比如新建一个dependency.gradle）申明然后apply from引用进来，或者直接定义在root的build.gradle中。</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">project.ext &#123;</span><br><span class="line">    applicationId = <span class="string">"com.xxx"</span></span><br><span class="line">    buildToolsVersion = <span class="string">"23.0.2"</span></span><br><span class="line">    compileSdkVersion = <span class="number">23</span></span><br><span class="line">    minSdkVersion = <span class="number">14</span></span><br><span class="line">    targetSdkVersion = <span class="number">23</span></span><br><span class="line">    versionCode = <span class="number">1</span></span><br><span class="line">    versionName = <span class="string">"1.0.0"</span></span><br><span class="line">    abortOnLintError = <span class="literal">false</span></span><br><span class="line">    checkLintRelease = <span class="literal">false</span></span><br><span class="line">    useJack = <span class="literal">false</span></span><br><span class="line">    abortOnLintError = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">    javaVersion = JavaVersion.VERSION_1_8</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在子module里面则使用rootProject.ext去进行引用:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion rootProject.ext.compileSdkVersion</span><br><span class="line">    buildToolsVersion rootProject.ext.buildToolsVersion</span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId rootProject.ext.applicationId</span><br><span class="line">        minSdkVersion rootProject.ext.minSdkVersion</span><br><span class="line">        targetSdkVersion rootProject.ext.targetSdkVersion</span><br><span class="line">        versionCode rootProject.ext.versionCode</span><br><span class="line">        versionName rootProject.ext.versionName</span><br><span class="line">        multiDexEnabled <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility rootProject.ext.javaVersion</span><br><span class="line">        sourceCompatibility rootProject.ext.javaVersion</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    packagingOptions &#123;</span><br><span class="line">        exclude <span class="string">'LICENSE.txt'</span></span><br><span class="line">        exclude <span class="string">'META-INF/DEPENDENCIES'</span></span><br><span class="line">        exclude <span class="string">'META-INF/ASL2.0'</span></span><br><span class="line">        exclude <span class="string">'META-INF/NOTICE'</span></span><br><span class="line">        exclude <span class="string">'META-INF/LICENSE'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lintOptions &#123;</span><br><span class="line">        abortOnError rootProject.ext.abortOnLintError</span><br><span class="line">        checkReleaseBuilds rootProject.ext.checkLintRelease</span><br><span class="line">        quiet <span class="literal">true</span></span><br><span class="line">        ignoreWarnings <span class="literal">true</span></span><br><span class="line">        <span class="comment">// Some libraries have issues with this.</span></span><br><span class="line">        disable <span class="string">'InvalidPackage'</span></span><br><span class="line">        <span class="comment">// Lint gives this warning but SDK 20 would be Android L Beta.</span></span><br><span class="line">        disable <span class="string">'OldTargetApi'</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="依赖管理">依赖管理</h1><p>那么多第三方库的引用，在多个module里引用，修改起版本号来好辛苦，万一有一个漏改了（比如gson）结果导致了异常行为，搞不好查原因查个半天，结果摔键盘竟然是版本号导致的。</p>
<p>so，和上节类似，我们需要统一定义依赖:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> daggerVersion = <span class="string">"2.0.2"</span></span><br><span class="line"><span class="keyword">def</span> retrofitVersion = <span class="string">"2.0.0-beta4"</span></span><br><span class="line"><span class="keyword">def</span> supportVersion = <span class="string">"23.2.1"</span></span><br><span class="line"><span class="keyword">def</span> rxBindingVersion = <span class="string">'0.4.0'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> leakCanaryVersion = <span class="string">"1.3.1"</span></span><br><span class="line"><span class="keyword">def</span> blockCanaryVersion = <span class="string">'1.1.4'</span></span><br><span class="line"></span><br><span class="line">project.ext &#123;</span><br><span class="line">    ...</span><br><span class="line">    libSupportAppcompat = <span class="string">"com.android.support:appcompat-v7:$&#123;supportVersion&#125;"</span></span><br><span class="line">    libSupportDesign = <span class="string">"com.android.support:design:$&#123;supportVersion&#125;"</span></span><br><span class="line">    libSupportRecyclerview = <span class="string">"com.android.support:recyclerview-v7:$&#123;supportVersion&#125;"</span></span><br><span class="line">    libSupportV4 = <span class="string">"com.android.support:support-v4:$&#123;supportVersion&#125;"</span></span><br><span class="line"></span><br><span class="line">    libRxAndroid = <span class="string">"io.reactivex:rxandroid:1.1.0"</span></span><br><span class="line">    libRxJava = <span class="string">"io.reactivex:rxjava:1.1.1"</span></span><br><span class="line">    libEventBus = <span class="string">"org.greenrobot:eventbus:3.0.0"</span></span><br><span class="line">    libJavaxAnnotation = <span class="string">"javax.annotation:jsr250-api:1.0"</span></span><br><span class="line"></span><br><span class="line">    libGson = <span class="string">"com.google.code.gson:gson:2.4"</span></span><br><span class="line">    libRetrofit = <span class="string">"com.squareup.retrofit2:retrofit:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libRetrofitConverterGson = <span class="string">"com.squareup.retrofit2:converter-gson:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libRetrofitAdapterRxJava = <span class="string">"com.squareup.retrofit2:adapter-rxjava:$&#123;retrofitVersion&#125;"</span></span><br><span class="line">    libOkHttpLoggingInterceptor = <span class="string">"com.squareup.okhttp3:logging-interceptor:3.0.0-RC1"</span></span><br><span class="line"></span><br><span class="line">    libDagger = <span class="string">"com.google.dagger:dagger:$&#123;daggerVersion&#125;"</span></span><br><span class="line">    libDaggerCompiler = <span class="string">"com.google.dagger:dagger-compiler:$&#123;daggerVersion&#125;"</span></span><br><span class="line"></span><br><span class="line">    libGlide = <span class="string">"com.github.bumptech.glide:glide:3.7.0"</span></span><br><span class="line"></span><br><span class="line">    libRxBinding = <span class="string">"com.jakewharton.rxbinding:rxbinding:$&#123;rxBindingVersion&#125;"</span></span><br><span class="line">    libRxBindingSupportV4 = <span class="string">"com.jakewharton.rxbinding:rxbinding-support-v4:$&#123;rxBindingVersion&#125;"</span></span><br><span class="line">    libRxBindingAppcompatV7 = <span class="string">"com.jakewharton.rxbinding:rxbinding-appcompat-v7:$&#123;rxBindingVersion&#125;"</span></span><br><span class="line">    libRxBindingDesign = <span class="string">"com.jakewharton.rxbinding:rxbinding-design:$&#123;rxBindingVersion&#125;"</span></span><br><span class="line">    libRxBindingRecyclerview = <span class="string">"com.jakewharton.rxbinding:rxbinding-recyclerview-v7:$&#123;rxBindingVersion&#125;"</span></span><br><span class="line"></span><br><span class="line">    libRealm = <span class="string">"io.realm:realm-android:0.87.5"</span></span><br><span class="line"></span><br><span class="line">    debugDependencies = [</span><br><span class="line"><span class="label">            leakCanary:</span> <span class="string">"com.squareup.leakcanary:leakcanary-android:$&#123;leakCanaryVersion&#125;"</span>,</span><br><span class="line"><span class="label">            blockcanary:</span> <span class="string">"com.github.moduth:blockcanary-ui:$&#123;blockCanaryVersion&#125;"</span>,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    releaseDependencies = [</span><br><span class="line"><span class="label">            leakCanary:</span> <span class="string">"com.squareup.leakcanary:leakcanary-android-no-op:$&#123;leakCanaryVersion&#125;"</span>,</span><br><span class="line"><span class="label">            blockcanary:</span> <span class="string">"com.github.moduth:blockcanary-no-op:$&#123;blockCanaryVersion&#125;"</span>,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里也可以根据个人喜好把版本号也全都抽出去，我个人的实践原则是除非引用超出1处，否则还是定义在一起。</p>
<p>module中使用:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    compile fileTree(<span class="string">include:</span> [<span class="string">'*.jar'</span>], <span class="string">dir:</span> <span class="string">'libs'</span>)</span><br><span class="line">    ...</span><br><span class="line">    apt rootProject.ext.libDaggerCompiler</span><br><span class="line">    compile rootProject.ext.libDagger</span><br><span class="line">    compile rootProject.ext.libRxJava</span><br><span class="line">    compile rootProject.ext.libRxAndroid</span><br><span class="line">    compile rootProject.ext.libRxBinding</span><br><span class="line">    compile rootProject.ext.libGlide</span><br><span class="line">    provided rootProject.ext.libJavaxAnnotation</span><br><span class="line">    compile rootProject.ext.libSupportAppcompat</span><br><span class="line">    compile rootProject.ext.libSupportDesign</span><br><span class="line">    compile rootProject.ext.libSupportRecyclerview</span><br><span class="line">    compile rootProject.ext.libSupportV4</span><br><span class="line">    debugCompile rootProject.ext.debugDependencies.leakCanary</span><br><span class="line">    releaseCompile rootProject.ext.releaseDependencies.leakCanary</span><br><span class="line">    debugCompile rootProject.ext.debugDependencies.blockCanary</span><br><span class="line">    releaseCompile rootProject.ext.releaseDependencies.blockCanary</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这里我还特地为一些debug和release compile不同包的定义了2个map，见leakCanary和blockCanary引用。</p>
<h1 id="签名管理">签名管理</h1><p>签名是一个很敏感的东西，只要有了签名文件和对应的密码信息，就能轻易反编译修改源码然后再签名进行发布，因此如何保存这些敏感信息是很重要的。</p>
<p>在我的个人实践中，主要做了这么几点：</p>
<p>local.properties定义keystore信息文件路径:<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keystore<span class="class">.props</span><span class="class">.file</span>=../keystore.properties</span><br></pre></td></tr></table></figure></p>
<p>keystore.properties保存keystore信息:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">store=<span class="value">../buildsystem/release.jks</span></span></span><br><span class="line"><span class="setting">alias=<span class="value">xxx</span></span></span><br><span class="line"><span class="setting">storePass=<span class="value">xxx</span></span></span><br><span class="line"><span class="setting">pass=<span class="value">xxx</span></span></span><br></pre></td></tr></table></figure></p>
<p>buildsystem下保存了:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">ci.gradle</span><br><span class="line">debug.keystore</span><br><span class="line">release.jks</span><br></pre></td></tr></table></figure></p>
<p>application module的signingConfigs:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">signingConfigs &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> Properties localProps = <span class="keyword">new</span> Properties()</span><br><span class="line">    localProps.load(<span class="keyword">new</span> FileInputStream(file(<span class="string">'../local.properties'</span>)))</span><br><span class="line">    <span class="keyword">def</span> Properties keyProps = <span class="keyword">new</span> Properties()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果读取不到'keystore.props.file'属性，就使用debug keystore</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (localProps[<span class="string">'keystore.props.file'</span>]) &#123;</span><br><span class="line">        keyProps.load(<span class="keyword">new</span> FileInputStream(file(localProps[<span class="string">'keystore.props.file'</span>])))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        keyProps[<span class="string">"store"</span>] = <span class="string">'../buildsystem/debug.keystore'</span></span><br><span class="line">        keyProps[<span class="string">"alias"</span>] = <span class="string">'android'</span></span><br><span class="line">        keyProps[<span class="string">"storePass"</span>] = <span class="string">'androiddebugkey'</span></span><br><span class="line">        keyProps[<span class="string">"pass"</span>] = <span class="string">'android'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    debug &#123;</span><br><span class="line">        storeFile file(keyProps[<span class="string">"store"</span>])</span><br><span class="line">        keyAlias keyProps[<span class="string">"alias"</span>]</span><br><span class="line">        storePassword keyProps[<span class="string">"storePass"</span>]</span><br><span class="line">        keyPassword keyProps[<span class="string">"pass"</span>]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    release &#123;</span><br><span class="line">        <span class="comment">// release版本使用assert确保存在该属性否则报错，避免错误打包</span></span><br><span class="line">        <span class="keyword">assert</span> localProps[<span class="string">'keystore.props.file'</span>];</span><br><span class="line">        storeFile file(keyProps[<span class="string">"store"</span>])</span><br><span class="line">        keyAlias keyProps[<span class="string">"alias"</span>]</span><br><span class="line">        storePassword keyProps[<span class="string">"storePass"</span>]</span><br><span class="line">        keyPassword keyProps[<span class="string">"pass"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h1 id="Java8支持">Java8支持</h1><p>对Android的module<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apply <span class="string">plugin:</span> <span class="string">'me.tatarka.retrolambda'</span></span><br><span class="line"></span><br><span class="line">android &#123;</span><br><span class="line">    compileOptions &#123;</span><br><span class="line">        sourceCompatibility rootProject.ext.javaVersion</span><br><span class="line">        sourceCompatibility rootProject.ext.javaVersion</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对Java的module:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sourceCompatibility = <span class="number">1.8</span></span><br><span class="line">targetCompatibility = <span class="number">1.8</span></span><br></pre></td></tr></table></figure></p>
<h1 id="Split_APK">Split APK</h1><p>详细的可以看看Google的官方文档<a href="http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits" target="_blank" rel="external">Apk Splits</a></p>
<p>我的使用:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">splits &#123;</span><br><span class="line">    abi &#123;</span><br><span class="line">        enable <span class="literal">true</span></span><br><span class="line">        reset()</span><br><span class="line">        include <span class="string">'armeabi'</span>, <span class="string">'x86'</span> <span class="comment">//, 'x86', 'armeabi-v7a', 'mips'</span></span><br><span class="line">        universalApk <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>大致来说，就是可以根据脚本的配置，将apk以abi、density进行分包。再也不用为了缩小包的体积而专门去只留下一个arm的jni文件夹了，想怎么分怎么分，搞不定哪天就要传一个x86的包了，而且有的模拟器也只支持x86。</p>
<p>当然如果市场能支持这些配置，那就更好了，用户下载apk的流量就小多了。</p>
<h1 id="Module_aar依赖">Module aar依赖</h1><p>怎么能在使用aar依赖提升编译速度的同时，又能兼顾灵活性，随时可以修改源码呢？</p>
<p>解决方案就是module式aar依赖。</p>
<p>在你的library module目录下, 打开build/outputs/aar，是不是有aar文件（编译过后就会生成）？把它放到module目录下面，然后在build.gradle里面:</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">configurations.maybeCreate(<span class="string">"default"</span>)</span><br><span class="line">artifacts.add(<span class="string">"default"</span>, file(<span class="string">'lib_authorize-debug.aar'</span>))</span><br></pre></td></tr></table></figure>
<p>再把原来那些脚本给注释了，就搞定了。是不是特别简单？如果想再使用源码依赖，反注释一下就好了。</p>
<h1 id="总结">总结</h1><p>本篇主要讲了开发阶段gradle的各种实践，下一篇是什么暂时我也没有想法，哈哈。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>相信大家的项目用上gradle都已经很久了，但用得如何呢？这里分享一下我的gradle脚本，大部分都是去年6月左右就开始用上的，有一部分比如签名的安全保存则是最近才自己动手，做了令自己觉得还不错的方案。</p>
<h1 id="module类型的区分">module类型的区]]>
    </summary>
    
      <category term="Gradle" scheme="http://blog.zhaiyifan.cn/tags/Gradle/"/>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[从零开始的Android新项目1 - 架构搭建篇]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p1/"/>
    <id>http://blog.zhaiyifan.cn/2016/03/14/android-new-project-from-0-p1/</id>
    <published>2016-03-14T02:04:18.000Z</published>
    <updated>2016-03-27T14:26:55.000Z</updated>
    <content type="html"><![CDATA[<p>最近一直在忙新项目的事情，所以有的坑一直没填。。现在看来可能一时半会儿还填不了，倒不如记录一下新项目的搭建。</p>
<p>试想一下，如果没有历史负担，没有KPI压力，去新搭建一个项目，你会怎么设计和实现呢？</p>
<p>本系列文章不是教你怎么从0开始学Android，从0开始怎么建一个项目，而定位于零负担的情况下，在2016年怎么去创建一个好的Android项目，其中一部分技术并不太适合刚入门的初学者。</p>
<p><img src="/images/android-new-project-from-1-p1-1.png" alt="architecture"></p>
<h1 id="Application_specific">Application specific</h1><p>类似clean architecture，分为三层 presentation - data - domain。</p>
<p>关于Clean Architecture由于国内的一些文章和项目都多少有偏离和错误，建议直接看</p>
<ul>
<li><a href="http://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/" target="_blank" rel="external">http://fernandocejas.com/2014/09/03/architecting-android-the-clean-way/</a></li>
<li><a href="http://fernandocejas.com/2015/07/18/architecting-android-the-evolution/" target="_blank" rel="external">http://fernandocejas.com/2015/07/18/architecting-android-the-evolution/</a></li>
</ul>
<p>两篇文章。</p>
<p>domain为纯领域模型，是Java library，包含了use case(Interactor)、DO、repository接口等domain package，目标是在任何Java语言的平台上都能直接使用，所以必须是平台无关，对平台没有任何依赖，能使用Java的方法（JUnit + Mockito）来直接进行测试。</p>
<p>data为domain的实现，是Android library，从MVP的角度来说，即是M层，内部隐藏所有数据细节，cache、数据库、网络、PO、exception（根据业务特点自定义的exception）、repository的具体实现（内部屏蔽数据细节，可能来自网络、数据库、缓存等）。使用Robolectric 3 + JUnit + Mockito进行集成测试。</p>
<p>presentation即展示层，是Android application module，对data不存在实际感知，依赖仅仅是Dagger注入的实例化，所有访问都通过接口进行，可见的是domain里的接口。包含了error message factory(所有exception都会被factory生成对应的message)、DI、mapper（vo转换）、VO（data binding进行MVVM）、navigation、presenter（不强制，仅在一些特别复杂的场景引入）、usersystem、utils（业务相关）、view（activity、fragment、adapter等）、application实现、业务常量等。可以使用Espresso和Android Instrumentation进行UI测试。</p>
<p>整个项目类似MVP+MVVM的混合（谁跟你说的MVP和MVVM是互斥的？），不过P层不一定存在，以避免为了模式而模式所导致的开发压力。</p>
<h1 id="Common_libraries">Common libraries</h1><p>aar依赖以避免对编译速度造成影响，不过这里比较巧妙的是依赖作为module引入，所以当需要源码依赖的时候在build.gradle里进行注释/反注释就能迅速切换，十分方便。</p>
<p>lib_uiframework: UI framework，包含了各种Base类，如BaseActivity、BaseFragment、Navigator（应用中的一切通过scheme跳转）、ActivityManager、FragmentBackHelper等。</p>
<p>lib_uikit: 各种自定义view、第三方view的gradle或者源码依赖。</p>
<p>lib_im: 即时通讯库。</p>
<p>lib_component: 组件库，如cache、gif、ClassLoaderInjecter、Log、SP、Web等。</p>
<p>lib_authorize: 第三方认证(登陆)，目前包括QQ、微信、微博、LinkedIn。</p>
<p>lib_share: 第三方分享，目前包括QQ、微信、微博。</p>
<p>…等等</p>
<h1 id="Third_party_libraries">Third party libraries</h1><p>Dagger, jsr250: 依赖注入框架让我们省了很多代码，jsr250则是Dagger注入时的一个annotation根据，我们的domain依赖了jsr250。</p>
<p>Rx大家族: RxJava, RxAndroid, RxBinding。新时代Android开发必备，还用说吗？</p>
<p>Retrofit: 装逼，喔，不对，高效率开发必备的网络框架。使用注解生成API，方便极了。我这里的实践是根据业务划分多个API接口，然后通过Dagger module进行实例化注入。</p>
<p>EventBus: 有了RxJava还要EventBus？当然，事件并不总是一对一的，也不总是流式的（可能是持续被动的）。举个简单的例子，feed详情信息更新后（比如点赞数据），外部可能有2个timeline页面也需要更新这个数据，这个时候EventBus就可以优雅地进行事件广播。</p>
<p>Realm：一个不依赖于SqlLite的ORM库，特点就是…快。还有同时有多个平台的方案: ReactNative, OC, Swift, Java…</p>
<p>Google Support库, data binding: Google家的，不用说了吧。</p>
<p>LeakCanary, <a href="https://github.com/moduth/blockcanary" target="_blank" rel="external">BlockCanary</a>: 开发阶段必备工具，前者是square家检测内存泄露的，后者是我自己做的卡顿检测工具。</p>
<p>Glide, Glide Transformation: 不折腾fresco，乖乖用Glide。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近一直在忙新项目的事情，所以有的坑一直没填。。现在看来可能一时半会儿还填不了，倒不如记录一下新项目的搭建。</p>
<p>试想一下，如果没有历史负担，没有KPI压力，去新搭建一个项目，你会怎么设计和实现呢？</p>
<p>本系列文章不是教你怎么从0开始学Android，从]]>
    </summary>
    
      <category term="Android Architecture" scheme="http://blog.zhaiyifan.cn/tags/Android-Architecture/"/>
    
      <category term="New Android Project From 0" scheme="http://blog.zhaiyifan.cn/tags/New-Android-Project-From-0/"/>
    
      <category term="Android Project From 0" scheme="http://blog.zhaiyifan.cn/categories/Android-Project-From-0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android逆向分析(3) Android可执行文件之谜 - DEX与ODEX, OAT与ELF]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/02/24/android-reverse-3/"/>
    <id>http://blog.zhaiyifan.cn/2016/02/24/android-reverse-3/</id>
    <published>2016-02-24T15:09:12.000Z</published>
    <updated>2016-02-24T06:47:05.000Z</updated>
    <content type="html"><![CDATA[<p><strong>WORKING - 未完</strong></p>
<h1 id="前言">前言</h1><p>米娜桑，是时候揭开DEX的面纱了！我们都知道multidex，都知道65535方法数超标，那DEX到底是个什么东西呢？或许又有些同学知道DEX会优化为ODEX，那ODEX又是什么鬼，优化了什么呢？为什么ClassLoader热补丁方案插入构造函数导致CLASS_ISPREVERIFIED为false后，会对性能造成影响，和ODEX又有什么关系呢？</p>
<p>我们又知道5.0以上Android虚拟机变成了Art，那DEX在art上变成了什么呢？为什么安装特别耗时间？有时候我看着我的Nexus6安装一个应用在那进度条读啊读的好像卡住了，有一种想砸了它的想法，所以当我拿到Nexus 5测试机的时候，第一件事就是刷到4.4，不然每次安装的效率实在不能忍（捂脸）。</p>
<h1 id="DEX是什么">DEX是什么</h1><p>直接把apk当成zip打开后，第一级目录你就会看见有classes.dex，这就是我们要揭开面纱的东西了。</p>
<h2 id="Why_DEX">Why DEX</h2><p>为什么需要DEX，jar不行吗？相应地，为什么需要Dalvik虚拟机，JVM不行吗？</p>
<p>Dalvik虚拟机是专门为了Android移动平台设计的。目标系统的RAM有限，数据存储在缓慢的内部闪存上，而且性能和上个世纪的周免系统相当。它们运行Linux，来提供虚拟内存，进程和线程，以及基于UID的安全机制。</p>
<p>这些特征和限制使我们聚焦在这些目标上：</p>
<ul>
<li>类数据，尤其是字节码，必须被多个进程共享，以最小化系统内存使用。</li>
<li>启动一个新app的开销必须最小化，来保证设备的可响应。</li>
<li>在独立的文件存储类数据可能导致很多冗余，尤其是字符串。为了保证磁盘空间，我们需要把这些因子提出来。</li>
<li>解析类数据的fields在类加载的时候增加了很多不必要的开销。把数据值直接当成C类型（比如整数或字符串）使用会更好。</li>
<li>字节码验证是必要的，却也是缓慢的。所以我们想在app执行外尽量验证更多，以便不要影响app本身体验。</li>
<li>字节码优化（加速指令，精简方法）对速度和电池生命很重要。</li>
<li>为了安全原因，进程不能编辑共享代码。</li>
</ul>
<p>典型的虚拟机执行从压缩文件解压独立的类，然后把它们存到heap上。这就导致了每个类可能在每个进程有独立的拷贝，从而使得应用启动变慢，因为代码必须被解压（或者至少需要从磁盘的很多小片段去读取）。另一方面，在本地heap放置字节码简化了首次使用时的指令重写，从而可能导致一些不同的优化。</p>
<p>这些目标指引了一些基本决定：</p>
<ul>
<li>多个类被聚集到一个单个的DEX文件。</li>
<li>DEX文件被映射为只读，并且在进程间共享。</li>
<li>针对本地系统调整字节码顺序和词对齐。</li>
<li>字节码验证对所有类都是强制的，但我们想要对一切可能的进行”预验证(pre-verify)”。</li>
<li>需要重写字节码的优化必须提前执行。</li>
</ul>
<p>而Dalvik虚拟机和DEX也就应运而生。</p>
<h2 id="Hello_DEX">Hello DEX</h2><p>让我们手动来生成一个java，编译成javac，然后转换为dex看看:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">'class Foo &#123;'</span>\</span><br><span class="line"><span class="string">'public static void main(String[] args) &#123;'</span>\</span><br><span class="line"><span class="string">'System.out.println("Hello, world"); &#125;&#125;'</span> &gt; Foo.java</span><br><span class="line">javac Foo.java</span><br><span class="line">dx --dex --output=foo.jar Foo.class</span><br><span class="line">adb push foo.jar /sdcard/</span><br><span class="line">adb shell dalvikvm -cp /sdcard/foo.jar Foo</span><br></pre></td></tr></table></figure></p>
<p>当我们在dx命令的output中指定输出文件后缀为.jar，.zip，或者.apk，名为classes.dex的文件就会被创建并保存在压缩包内。解开Foo.jar你就会看到classes.dex和META-INF文件夹（里面只有一个MANIFEST.MF文件）。</p>
<p>我们创建完该jar后直接push到设备上，并通过shell直接让dalvik虚拟机去运行它，如果操作无误，会看到命令行的反馈 - Hello, world。</p>
<h2 id="DEX_in_file_system">DEX in file system</h2><p>这次我打算多画点图，所以看图说话吧:<br><img src="http://blog.zhaiyifan.cn/images/android-reverse-3-1.png" alt="DEX in file system"></p>
<h2 id="DEX_in_memory">DEX in memory</h2><p>为什么DEX不能被内存映射，或者说，不能直接从zip去执行呢？因为数据是压缩的，文件头也不保证是词对齐的。这些问题可以通过不压缩直接保存为classes.dex和填充zip文件来解决，但会导致数据网络间传输的包体积变大。</p>
<p>我们需要在使用前把zip包里的classes.dex解压。当我们拿到文件的时候，我们可能还会做些之前提到的其他操作（对齐、优化、验证）。这又引出了另一个问题：谁去负责做这些，我们又该把输出放在哪儿？</p>
<h1 id="ODEX是什么">ODEX是什么</h1><p>ODEX，全名Optimized DEX，即优化过的DEX。</p>
<p>有至少3种方法去创建一个“准备好的”DEX文件，即ODEX：</p>
<ol>
<li>虚拟机“即时(just in time)”执行。输出会跑到一个特殊的dalvik-cache目录。这只在一些特殊的桌面和工程机的设备上使用（这些机器的build中，dalvik-cache目录的权限不是严格的）。在生产机器上这是不被允许的。</li>
<li>系统的安装器在程序首次安装时候执行，它有写dalvik-cache的权限。</li>
<li>构建(build)系统预先执行。相关的 jar / apk 文件还在，但classes.dex被剥离出来了。ODEX和原来的zip包保存在一起，不在dalvik-cache，而是系统镜像的一部分。</li>
</ol>
<p>dalvik-cache目录更准确地说是$ANDROID_DATA/data/dalvik-cache。里面的文件的名字来源于源DEX的完整路径。在设备上该目录被system所拥有，而system拥有0771权限，保存在那里的ODEX被系统和应用的组所拥有，权限为0644。数字权限保护的应用会使用640权限来防止其他应用去检测它们。底线是你可以读取自己的与其他大部分应用的DEX文件，但你不能创建、修改，或删除它们。</p>
<p>前两种方法的执行分为以下三个步骤：</p>
<p>首先，dalvik-cache文件被创建。这必须在一个有恰当权限的进程进行，所以在“系统安装器”的场景，是在运行为root的installd进程执行的。</p>
<p>接着，classes.dex从zip包中解压出来。文件头部留出一小块空间给ODEX header。</p>
<p>最后，文件被内存映射以便访问，并被为当前系统使用进行调整。这包括了字节交换（byte-swapping），结构重新排列（structure realigning），但并没有对DEX文件做有意义的改变。还做了一些其他的基本结构检查，比如确保文件偏移量和数据索引落在有效范围内。</p>
<p>构建系统不在桌面上运行工具，而宁愿去启动模拟器，强制所有相关DEX文件的即时优化，然后从dalvik-cache把结果提取出来。这样做的原因，在解释完优化后会变得更显而易见。</p>
<p>一旦代码被字节替换和对齐，我们就可以继续了。我们添加了一些预计算的数据，在文件头填写ODEX header，然后开始执行。然而，如果我们对验证和优化有兴趣，就需要在初始准备后再插入一个步骤。</p>
<h1 id="dexopt的魔法">dexopt的魔法</h1><p>在Android 2.3版本以前，系统源码中提供了生成odex的工具dexopt-wrapper，位于Android 2.2系统源码的 build/tools/dexpreopt/dexopt-wrapper/ 目录下，查看<code>DexOptWrapper.cpp</code>文件会发现实际调用的是 /system/bin/dexopt 程序。在5.0及以上版本的设备上，你可能已经再也找不到dexopt了，取而代之的是dex2oat。</p>
<p>我们想要验证和优化DEX文件里的所有类。最简单和安全的方法就是把所有类加载到虚拟机，然后跑一遍。任何加载失败的就是验证/优化失败的。不幸的是，这可能导致一些资源的分配难以释放（比如native共享库的加载），所以我们不想执行在应用运行的虚拟机里。</p>
<p>解决方案就是起一个叫做dexopt的程序（事实上就是虚拟机的后门）。它会执行一个简短的虚拟机初始化，从引导的类路径加载0个或多个DEX文件，然后开始做一切从目标DEX可以做的验证和优化。结束后，进程退出，释放所有资源。</p>
<p>因为多个虚拟机可能同时需求同一个DEX文件，文件锁被用来确保dexopt仅被执行一次。</p>
<h2 id="验证">验证</h2><p>字节码验证过程包含了扫描DEX文件中每一个类每个方法的指令。目的是为了识别非法指令序列以便不会在运行时才发现它们。涉及到的很多运算对“准确的”GC也是必要的。更多信息见<a href="http://crypto.nknu.edu.tw/AOSP/AOSP/dalvik/docs/verifier.html" target="_blank" rel="external">Dalvik字节码验证器笔记</a>。</p>
<p>为了性能原因，（下节描述的）优化器假设验证器已经运行成功，还会做一些其他可能不安全的假设。默认地，Dalvik会坚持验证所有类，并只优化那些被验证过的类。可以使用命令行flags去禁用验证器。怎么在Android应用框架中控制这些功能的指令见<a href="http://security.nknu.edu.tw/AOSP/AOSP/dalvik/docs/embedded-vm-control.html" target="_blank" rel="external">控制嵌入式虚拟机</a>。</p>
<p>验证失败的报告是一个复杂的问题。例如，在不同的package中，调用一个package内可见的方法是非法的，会被验证器捕捉到。但我们未必想要在验证期报告它 —— 事实上我们想要在试图调用方法的时候抛出异常。在每个方法调用上检查这些访问flags也是很昂贵的，<a href="http://crypto.nknu.edu.tw/AOSP/AOSP/dalvik/docs/verifier.html" target="_blank" rel="external">Dalvik字节码验证器笔记</a>提到了这个问题。</p>
<p>成功被验证的类在ODEX有一个flag被设置了，在加载的时候就不会被重新验证。ODEX文件有一个32位的checksum，但那是主要是用来快速检查数据损坏的。</p>
<h2 id="优化">优化</h2><p>虚拟机解释器通常会在一段代码被首次使用的时候执行某些优化。常量池引用被指向内部数据结构的指针所替代，总是成功的操作或是那些总会以某种方式工作的，会被更简单的形式所替代。这些的一部分需要仅在运行时可用的信息，另一部分在某些特定假设下可以被静态推论出。</p>
<p>Dalvik优化器做了这些：</p>
<ul>
<li>对于虚方法调用，把方法索引替换为vtable索引。</li>
<li>对于实例变量（field）的get/put，把变量索引替换为字节偏移。另外，把 boolean / byte / char / short 基本变量（variants）合并到单个的32位形式（解释器里更少的代码意味着CPU I-cache里更少的空间）。</li>
<li>替换一些高频次调用，比如把 String.length() 替换成”内联“的。这可以跳过一些常见的方法调用消耗，直接从解释器切换到native实现。</li>
<li>删除空方法。最简单的例子就是Object.<init>，啥都没干，但却必须在任何对象被分配的时候执行。指令会被替换为一个新版本的空指令（no-op）形式，除非调试器被attach上去了。</init></li>
<li>附加预计算数据。例如，虚拟机想要一个类名的哈希表以便查找。不同于在加载DEX文件时候去计算这个，我们可以先计算，以节省堆（heap）空间和所有加载该DEX文件的虚拟机的计算时间。</li>
</ul>
<p>大部分的优化显然都会更好。</p>
<h2 id="Hello_ODEX">Hello ODEX</h2><p>我们继续玩耍之前生成的dex，来做一个odex:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">adb push dexopt-wrapper /sdcard/</span><br><span class="line"></span><br><span class="line">adb shell</span><br><span class="line"><span class="comment"># 不然没权限去/data/local</span></span><br><span class="line">su</span><br><span class="line">chmod <span class="number">777</span> dexopt-wrapper</span><br><span class="line"><span class="comment"># 直接在sdcard执行会提示权限错误</span></span><br><span class="line">cp dexopt-wrapper /data/<span class="built_in">local</span>/</span><br><span class="line">cp foo.jar /data/<span class="built_in">local</span>/</span><br><span class="line"><span class="built_in">cd</span> /data/<span class="built_in">local</span></span><br><span class="line">/dexopt-wrapper foo.jar foo.odex                        </span><br><span class="line">--- BEGIN <span class="string">'foo.jar'</span> (bootstrap=<span class="number">0</span>) ---</span><br><span class="line">--- waiting <span class="keyword">for</span> verify+opt, pid=<span class="number">5220</span></span><br><span class="line">--- would reduce privs here</span><br><span class="line">--- END <span class="string">'foo.jar'</span> (success) ---</span><br><span class="line">cp foo.odex /sdcard</span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line">adb pull /sdcard/foo.odex .</span><br></pre></td></tr></table></figure></p>
<p>这样子就拿到了优化后的odex，赶紧把手机还给同事。</p>
<h1 id="oat与elf">oat与elf</h1><h1 id="下期预告">下期预告</h1><p>下一次让我们利用本次讲到的这些知识，来改一改apktool，让它能重返19岁，反编译腾讯的apk。最后代码会丢到GitHub上。</p>
<hr>
<p>参考资料</p>
<ul>
<li><a href="https://zh.wikipedia.org/wiki/Android_Runtime" target="_blank" rel="external">https://zh.wikipedia.org/wiki/Android_Runtime</a></li>
<li><a href="http://blog.csdn.net/luoshengyang/article/details/18006645" target="_blank" rel="external">http://blog.csdn.net/luoshengyang/article/details/18006645</a></li>
<li>AOSP: dalvik/docs</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>WORKING - 未完</strong></p>
<h1 id="前言">前言</h1><p>米娜桑，是时候揭开DEX的面纱了！我们都知道multidex，都知道65535方法数超标，那DEX到底是个什么东西呢？或许又有些同学知道DEX会优化为ODEX，那]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Reverse Engineering" scheme="http://blog.zhaiyifan.cn/tags/Reverse-Engineering/"/>
    
      <category term="Android Reverse Engineering" scheme="http://blog.zhaiyifan.cn/categories/Android-Reverse-Engineering/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[世界级的Android测试开发流程（二）]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/02/23/world-class-testing-development-pipeline-for-android-part-2/"/>
    <id>http://blog.zhaiyifan.cn/2016/02/23/world-class-testing-development-pipeline-for-android-part-2/</id>
    <published>2016-02-23T03:25:28.000Z</published>
    <updated>2016-02-24T06:45:51.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>原文链接 : <a href="http://blog.karumi.com/world-class-testing-development-pipeline-for-android-part-2/" target="_blank" rel="external">World-Class Testing Development Pipeline for Android - Part 2.</a></li>
<li>原文作者 : <a href="hello@karumi.com">Karumi</a></li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a></li>
<li>校对者: <a href="https://github.com/lfkdsk" target="_blank" rel="external">JustWe</a>, <a href="https://github.com/xcc3641" target="_blank" rel="external">Hugo Xie</a></li>
</ul>
<p>在我们的上一篇博客文章，<a href="http://blog.karumi.com/world-class-testing-development-pipeline-for-android/" target="_blank" rel="external">“世界级的Android测试开发流程（一）”，我们开始讨论一个Android的测试开发流程</a>。我们讨论了一个软件工程师从开始写测试到找到测试开发的一些问题的演化过程。我们获得了以下结论，概括如下：</p>
<ul>
<li><ul>
<li>自动化测试是成功的软件开发的关键。</li>
</ul>
</li>
<li><ul>
<li>为了写特定类型的测试，可测试的代码是必须的。</li>
</ul>
</li>
<li><ul>
<li>一些开发者对测什么与怎么测一无所知，就开始写测试。</li>
</ul>
</li>
<li><ul>
<li>我们的测试的质量与可读性并不总是能达到预期。</li>
</ul>
</li>
<li><ul>
<li>一个测试开发流程对定义测什么与怎么测来说是必须的。</li>
</ul>
</li>
</ul>
<p>相应地，任何应用的测试关键部分是：</p>
<ul>
<li><ul>
<li>独立于框架或者库去测试业务逻辑。</li>
</ul>
</li>
<li><ul>
<li>测试服务器端的API集成。</li>
</ul>
</li>
<li><ul>
<li>在黑盒场景测试下，从用户角度写的的接收准则。</li>
</ul>
</li>
</ul>
<p>在这篇文章中，我们将会看到几个测试方法，它们覆盖了上述部分并保证了一个稳若盘石的测试开发流程。</p>
<h3 id="独立于框架或者库去测试业务逻辑："><strong>独立于框架或者库去测试业务逻辑：</strong></h3><p>至关重要的是检查<a href="http://c2.com/cgi/wiki?BusinessLogicDefinition" target="_blank" rel="external">业务逻辑</a>是否确实实现了预定的产品需求。我们需要隔离想要测试的代码，模拟不同的初始场景，以设置运行时的一些组件的行为。接着，我们将会通过选择想要练习的部分来测试代码。一旦完成，我们需要检查软件状态在训练该测试主题后是否正确。</p>
<p>这个测试方法的关键是 <a href="http://martinfowler.com/articles/dipInTheWild.html" target="_blank" rel="external">依赖倒置原则</a>。通过写依赖于抽象的代码，我们将可以把我们的软件分离为不同的层次。为了获得一个依赖的实例，我们需要从某个地方去请求它。或者，我们可以在实例被创建的时候获得它。我们软件的一部分要求我们创建代码来获取协作者的实例。在这些点，我们将会引入测试替身(Test Double)来模拟初始场景或编写不同行为来设计我们的测试。通过使用 <a href="http://martinfowler.com/articles/mocksArentStubs.html" target="_blank" rel="external">测试替身</a>，我们将能模拟生产环境代码的行为与状态。同时，它能帮助我们选择测试的范围（从根本上代表了要测试的代码的数量）。如果没有依赖倒置，所有类就需要各自去获得它们的依赖。从而导致类实现和依赖的实现相互耦合，进而无法引入测试替身来切断生产环境代码的执行流。</p>
<p>通常在构造中传递类依赖是最有效的应用依赖倒置的机制。该机制足够用来引入测试替身。在构造中传递类依赖会帮助我们创建实例来替代对应测试替身的依赖。<strong>尽管并不是强制的，记住<a href="http://martinfowler.com/articles/injection.html" target="_blank" rel="external">服务定位器(Service Locator)或者依赖注入</a>框架的用法对帮助减少样板代码以应用依赖倒置仍然很重要。</strong></p>
<p><strong>我们将会用一个具体的例子 (</strong>关于 <a href="https://github.com/pedrovgs/AndroidGameBoyEmulator" target="_blank" rel="external">我几个月前开始做的Android GameBoy模拟器</a> 的测试<strong>) 来展示如何测试我们的业务需求。</strong></p>
<p>以下测试有关于GameBoy内存管理单元和GameBoy BIOS执行。我们将会检查产品需求（硬件模拟）是否被正确实现。</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MMUTest</span> </span>{  
  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MMU_SIZE = <span class="number">65536</span>;
  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ANY_ADDRESS = <span class="number">11</span>;
  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span> ANY_BYTE_VALUE = <span class="number">0x11</span>;

  <span class="annotation">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldInitializeMMUFullOfZeros</span><span class="params">()</span> </span>{
    MMU mmu = givenAMMU();

    assertMMUIsFullOfZeros(mmu);
  }

  <span class="annotation">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldFillMMUWithZerosOnReset</span><span class="params">()</span> </span>{
    MMU mmu = givenAMMU();

    mmu.writeByte(ANY_ADDRESS, ANY_BYTE_VALUE);
    mmu.reset();

    assertMMUIsFullOfZeros(mmu);   
  }

  <span class="annotation">@Test</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldWriteBigBytesValuesAndRecoverThemAsOneWord</span><span class="params">()</span> </span>{
    MMU mmu = givenAMMU();

    mmu.writeByte(ANY_ADDRESS, (<span class="keyword">byte</span>) <span class="number">0xFA</span>);
    mmu.writeByte(ANY_ADDRESS +<span class="number">1</span>, (<span class="keyword">byte</span>) <span class="number">0xFB</span>);

    assertEquals(<span class="number">0xFBFA</span>, mmu.readWord(ANY_ADDRESS));
  }
}
</code></pre><p>前三个测试是检查GameBoy MMU（内存管理单元）是否正确实现。成功的关键在于检查测试执行的最后MMU状态是否正确。所有的测试检查MMU是否被正确初始化。如果reset后，MMU被清理了，或者写了2个字节后和期望的词相等，则最后的读取是正确的。为了测试模拟器软件的这部分，我们缩小了测试范围，仅有一个类作为测试对象。</p>
<pre><code><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameBoyBIOSExecutionTest</span> </span>{

  <span class="annotation">@Test</span>
  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldIndicateTheBIOSHasBeenLoadedUnlockingTheRomMapping</span><span class="params">()</span> </span>{
    GameBoy gameBoy = givenAGameBoy();

    tickUntilBIOSLoaded(gameBoy);

    assertEquals(<span class="number">1</span>, mmu.readByte(UNLOCK_ROM_ADDRESS) &amp; <span class="number">0xFF</span>);
  }

  <span class="annotation">@Test</span>
  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shouldPutTheNintendoLogoIntoMemoryDuringTheBIOSThirdStage</span><span class="params">()</span> </span>{
    GameBoy gameBoy = givenAGameBoy();

    tickUntilThirdStageFinished(gameBoy);

    assertNintendoLogoIsInVRAM();
  }

  <span class="function"><span class="keyword">private</span> GameBoy <span class="title">givenAGameBoy</span><span class="params">()</span> </span>{
    z80 = <span class="keyword">new</span> GBZ80();
    mmu = <span class="keyword">new</span> MMU();
    gpu = <span class="keyword">new</span> GPU(mmu);
    GameLoader gameLoader = <span class="keyword">new</span> GameLoader(<span class="keyword">new</span> FakeGameReader());
    GameBoy gameBoy = <span class="keyword">new</span> Gameboy(z80, mmu, gpu, gameLoader);
    <span class="keyword">return</span> gameboy;
  }

}
</code></pre><p>在这两个测试中，我们检查了跨越不同阶段的BIOS是否执行正确。在BIOS执行的最后，内存中具体位置的一个字节必须被初始化为具体的一个值。接着，在第三阶段的最后，任天堂的logo必须被读取到VRAM。我们决定扩大测试的范围，因为整个BIOS执行是任何模拟器开发的关键部分之一。关于该测试的主题是CPU，CPU指令集的部分（只包括BIOS执行相关的指令），以及MMU。为了检查执行的状态是否正确，我们必须在MMU状态上进行assert。<strong>一个能显著提升测试质量的关键就是检查执行最后的软件状态，而避免去验证和其他组件的交互。这是因为即便和你的组件交互正确，状态仍然可能错误。</strong> 知道这些测试的部分是独立的也很重要，像是CPU指令。</p>
<p>这些测试的另一个主要亮点是使用了测试替身，以模拟Android SDK使用相关的那些代码。在执行BIOS之前，GameBoy游戏必须被读取到GameBoy MMU里。然后，在测试期间，Android SDK将会变得不可用，作为一种变通方法，我们将不得不替换为从测试环境读取GameBoy rom。<em>* 我们使用了依赖倒置原则不仅仅是为了隐藏实现细节或者定义边界，—</em><em> 也是为了替代实际生产环境的AndroidGameReader为FakeGameReader，一个测试替身，<em>*从而不依赖于框架和库去测试代码。这样，我们创建了一个隔离的测试环境，并调整了测试范围。</em></em></p>
<h3 id="范围："><strong>范围：</strong></h3><p>调整测试范围是极其重要的。在写测试前，我们必须记住测试范围会帮助我们认识代码里的缺陷（取决于测试范围的大小）。简化的范围将会给我们更丰富的错误反馈，而大范围的测试则无法提供bug位置的准确信息。<strong>测试的粒度必须跟考虑中的测试范围一样小。</strong></p>
<h3 id="基础："><strong>基础：</strong></h3><p>写这些测试的基础很明确。我们需要写出在依赖倒置原则下可测试的代码，并结合mocking库使用测试框架。mocking库将会帮助我们创建模拟场景下的测试替身，或替换我们部分的生产代码。请注意这些框架和库的使用不是必须的，但我们推荐使用。</p>
<h3 id="结果："><strong>结果：</strong></h3><p>这个方法的结果很有趣。<strong>在遵循依赖倒置原则后，我们可以独立于框架或库去测试我们的业务逻辑</strong>。我们可以创建一个具有可重复性的 <strong>隔离环境</strong> 来实现和设计测试。另外，我们可以简单地 <strong>选择需要测试的生产环境代码的量</strong> 并把它们替换为 <strong>测试替身来模拟行为和不同场景</strong>。</p>
<p>既然我们已经可以测试产品需求是否被正确实现，我们便需要继续致力于测试开发流程。下个我们要测试的是与被测试替身替换的外部组件的集成是否正确。这是我们将会在下一篇博客文章中回顾的东西，敬请期待！;)</p>
<p>参考：</p>
<ul>
<li><ul>
<li>世界级的Android测试开发流程（一）by Pedro Vicente Gómez Sánchez. <a href="http://www.slideshare.net/PedroVicenteGmezSnch/worldclass-testing-development-pipeline-for-android" target="_blank" rel="external">http://www.slideshare.net/PedroVicenteGmezSnch/worldclass-testing-development-pipeline-for-android</a></li>
</ul>
</li>
<li><ul>
<li>Android GameBoy 模拟器 GitHub Repository by Pedro Vicente Gómez Sánchez. <a href="https://github.com/pedrovgs/AndroidGameBoyEmulator" target="_blank" rel="external">https://github.com/pedrovgs/AndroidGameBoyEmulator</a></li>
</ul>
</li>
<li><ul>
<li>控制反转容器和依赖注入模式 by Martin Fowler. <a href="http://martinfowler.com/articles/injection.html" target="_blank" rel="external">http://martinfowler.com/articles/injection.html</a></li>
</ul>
</li>
<li><ul>
<li>在野外的DIP by Martin Fowler.<a href="http://martinfowler.com/articles/dipInTheWild.html" target="_blank" rel="external">http://martinfowler.com/articles/dipInTheWild.html</a></li>
</ul>
</li>
<li><ul>
<li>测试替身 by Martin Fowler. <a href="http://www.martinfowler.com/bliki/TestDouble.html" target="_blank" rel="external">http://www.martinfowler.com/bliki/TestDouble.html</a></li>
</ul>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>原文链接 : <a href="http://blog.karumi.com/world-class-testing-development-pipeline-for-android-part-2/" target="_blank" rel="external"]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Test" scheme="http://blog.zhaiyifan.cn/tags/Test/"/>
    
      <category term="Android Test" scheme="http://blog.zhaiyifan.cn/categories/Android-Test/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[世界级的Android测试开发流程（一）]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/02/23/world-class-testing-development-pipeline-for-android-part-1/"/>
    <id>http://blog.zhaiyifan.cn/2016/02/23/world-class-testing-development-pipeline-for-android-part-1/</id>
    <published>2016-02-23T03:25:24.000Z</published>
    <updated>2016-02-24T10:32:52.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>原文链接 : <a href="http://blog.karumi.com/world-class-testing-development-pipeline-for-android/" target="_blank" rel="external">World-Class Testing Development Pipeline for Android - Part 1.</a></li>
<li>原文作者 : <a href="hello@karumi.com">Karumi</a></li>
<li>译文出自 : <a href="https://github.com/xitu/gold-miner" target="_blank" rel="external">掘金翻译计划</a></li>
<li>译者 : <a href="https://github.com/markzhai" target="_blank" rel="external">markzhai</a></li>
<li>校对者: <a href="https://github.com/lfkdsk" target="_blank" rel="external">JustWe</a>, <a href="https://github.com/xcc3641" target="_blank" rel="external">Hugo Xie</a></li>
</ul>
<h1 id="世界级的_Android_测试开发流程（一）">世界级的 Android 测试开发流程（一）</h1><p>在开发完移动应用并和手动QA团队合作了数年后，我们决定开始写测试。作为工程师，我们知道，<strong>自动化测试是成功的移动开发之关键。</strong> 在这篇博客里，我将会分享我们的故事——Karumi启动于几年前的测试故事。这是系列博客的第一篇，我们将会囊括世界级的 Android测试流程的所有方面。</p>
<p>几年前，我们开始为移动应用写测试。我们对测试了解有限，所以我们致力于接受测试并使用最常用的框架来做单元测试，一个简单的test runner和mocking库。过了一段时间我们遇到了问题：</p>
<ul>
<li>我们不知道测试什么和如何去测试它。</li>
<li>我们的代码还没准备好被测试。</li>
<li>我们沉迷于Mike Cohn的测试金字塔，却没有考虑到我们在写的软件类型。</li>
<li>即使我们的测试通过了，也不意味着代码没有问题。</li>
</ul>
<p>是不是很可怕? 我们花了很多时间去克服这些挑战，在某个时刻我们意识到是方法错了。即便测试覆盖率很高，我们的软件仍然在出错。最坏的是，从我们的测试中，无法得到任何反馈。<strong>解决我们的问题的关键是识别出我们一直碰到的问题所在：</strong></p>
<ul>
<li>我们的接受测试太难写了，因为我们需要提供配置API来模拟接受测试的初始状态。</li>
<li>大部分时候，我们的测试会随机失败，而我们不知道为什么。只能用重复编译来通过测试。</li>
<li>我们有大量的单元测试和高覆盖率，但我们的单元测试从未失败。即便应用出问题了，我们的测试仍然能通过。</li>
<li>我们用很多时间去验证mock的调用。</li>
<li>我们不得不使用一些“魔法”测试工具来测试代码，一个私有方法或者模拟静态方法的调用结果。</li>
</ul>
<p>这是我们决定停下，并开始思考为什么我们对自己的测试感觉不爽。我们快速需要找到问题的解决方案。我们的项目告诉说我们做错了，我们需要解决方案，<strong>我们需要一个测试开发流程</strong>。话虽如此，为了改善程序质量，测试开发流程不总是第一件要完善的事。</p>
<p><strong>一个测试开发流程定义了测什么、怎么测</strong>。用什么工具，为什么用？测试的范围是什么？<strong>即便有良好的测试开发流程，可测试的代码对有自信去写测试仍然是必须的</strong>，因为大部分的测试是不可能的，或者至少，很难去写。如果你的代码没有准备好，与代码以及单元或集成范围最贴近的测试并不是那么容易去写的。因此，我们决定带着这些目标，首先识别出应用中的问题，然后去解决它们。那么问题来了，如果我们的代码能够是完美的，我们对它有何期望呢？期望是：</p>
<ul>
<li>应用必须是可测试的。</li>
<li>代码必须是可读的。</li>
<li>职责必须是清晰而有结构的。</li>
<li>低耦合高内聚。</li>
<li>代码必须是诚实的。</li>
</ul>
<p>在重构之前代码一团糟。软件职责丢失在代码的行与行之间。实现细节是完全暴露的，activities和fragments负责处理软件的状态，到处都是软件状态。另外，我们的业务逻辑和框架是耦合的。带着这些问题，我们决定把应用架构改成其他更有结构的东西。<strong>我们使用的架构是 <a href="https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="external">“Clean Architecture”</a>。除了架构的核心内容，我们还应用了一些和GUI应用相关模式像是MVP和MMVM，以及数据处理相关的模式像是Repository模式</strong>。架构详情和这篇博客没有关系（我们会在未来的博文中讨论到它），“Clean Architecture”的<strong>核心元素</strong>与<strong>最重要的SOLID原则之一，<a href="http://martinfowler.com/articles/dipInTheWild.html" target="_blank" rel="external">依赖倒置原则</a></strong>相关。</p>
<p><strong>依赖倒置原则提出你的代码必须依赖于抽象而不是具体实现</strong>。这个原则，仅仅是这个原则就是通向成功的钥匙。它是<strong>改变我们的代码并适配测试策略以有效克服我们手上问题的关键</strong>。依赖于抽象既无关于依赖注入框架，也无关于使用Java接口来定义类的API。然而，它与隐藏细节有关。根据不同角色，软件职责改变的点，引入<a href="http://www.martinfowler.com/bliki/TestDouble.html" target="_blank" rel="external">测试替身(TestDouble)</a>的点去创建层，大大限制了测试的范围。</p>
<p><strong>通过依赖倒置原则，我们能够去选择正确数量的代码去测试</strong>。一旦这些点清晰了，我们就停下为所有的mocks去写测试。我们能够使用准确数字的mocks去覆盖一个测试用例，并确保我们在测试软件状态而不仅仅是组件之间的交互。</p>
<p>一旦应用架构清晰了，我们开始 <strong>定义我们的测试开发流程。我们的目标是回答2个问题：我们想要测试什么？我们如何去测试它？</strong> 在尝试找出如何分割测试，并用简单又可读的方式去写以后，我们注意到层次分离是最完美的出发点。结果，解决方案变得清晰：</p>
<p>我们想要测试什么?</p>
<ul>
<li>独立于任何框架或者库去测试我们的业务逻辑。</li>
<li>测试我们的API集成。</li>
<li>持久化框架的集成。</li>
<li>一些通用UI组件。</li>
<li>测试黑盒场景下，从用户视角写的的接收准则。</li>
</ul>
<p>我们想要怎么去测试?</p>
<ul>
<li>这是我们在下一博客文章要说的东西，敬请期待！;)</li>
</ul>
<p>参考:</p>
<ul>
<li>世界级的Android测试开发流程幻灯片 by Pedro Vicente Gómez Sánchez. <a href="http://www.slideshare.net/PedroVicenteGmezSnch/worldclass-testing-development-pipeline-for-android" target="_blank" rel="external">http://www.slideshare.net/PedroVicenteGmezSnch/worldclass-testing-development-pipeline-for-android</a></li>
<li>Mike Cohn的测试金字塔 by Martin Fowler. <a href="http://martinfowler.com/bliki/TestPyramid.html" target="_blank" rel="external">http://martinfowler.com/bliki/TestPyramid.html</a></li>
<li>Clean架构 by Uncle Bob. <a href="https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html" target="_blank" rel="external">https://blog.8thlight.com/uncle-bob/2012/08/13/the-clean-architecture.html</a></li>
<li>在野外的DIP by Martin Fowler.<a href="http://martinfowler.com/articles/dipInTheWild.html" target="_blank" rel="external">http://martinfowler.com/articles/dipInTheWild.html</a></li>
<li>测试替身 by Martin Fowler. <a href="http://www.martinfowler.com/bliki/TestDouble.html" target="_blank" rel="external">http://www.martinfowler.com/bliki/TestDouble.html</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>原文链接 : <a href="http://blog.karumi.com/world-class-testing-development-pipeline-for-android/" target="_blank" rel="external">World-]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Test" scheme="http://blog.zhaiyifan.cn/tags/Test/"/>
    
      <category term="Android Test" scheme="http://blog.zhaiyifan.cn/categories/Android-Test/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[编译时替换资源 - Android重叠包与资源合并一见]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/02/18/android-resource-overlay/"/>
    <id>http://blog.zhaiyifan.cn/2016/02/18/android-resource-overlay/</id>
    <published>2016-02-18T08:42:26.000Z</published>
    <updated>2016-02-19T15:25:12.000Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><p>在<a href="http://blog.zhaiyifan.cn/2016/02/13/android-reverse-2/">Android逆向分析(2) APK的打包与安装</a>一文中对资源编译过程的介绍中，笔者提到了overlay（重叠包）这个概念，一位每天都被自己帅醒的好友看了那篇东西后，来问我这个重叠包究竟是个什么东西，笔者想了想，确实这个概念有很多同学们都不甚了解，搜索了一下网上了介绍，也几乎没有看到任何对这个的讲解，只有<a href="http://blog.csdn.net/luoshengyang/article/details/8744683" target="_blank" rel="external">老罗的博客</a>提到过</p>
<blockquote>
<p>–mOverlay：表示当前正在编译的资源的重叠包。重叠包是什么概念呢？假设我们正在编译的是Package-1，这时候我们可以设置另外一个Package-2，用来告诉aapt，如果Package-2定义有和Package-1一样的资源，那么就用定义在Package-2的资源来替换掉定义在Package-1的资源。通过这种Overlay机制，我们就可以对资源进行定制，而又不失一般性。</p>
</blockquote>
<p>那我们应该怎么怎么去使用重叠包呢？它又能用在什么地方，带来什么便利呢？</p>
<p>本文从aapt overlay切入，介绍其用法和在gradle的实践，并接着介绍了gradle plugin提供的资源合并机制和实践。</p>
<p>测试源码: <a href="https://github.com/markzhai/ResourceOverlayDemo" target="_blank" rel="external">ResourceOverlayDemo</a>。</p>
<h1 id="aapt_overlay">aapt overlay</h1><p>我们看看aapt的命令help里是怎么描述的，省略版:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line"> aapt l[ist] [-v] [<span class="operator">-a</span>] file.&#123;zip,jar,apk&#125;</span><br><span class="line">   List contents of Zip-compatible archive.</span><br><span class="line"></span><br><span class="line"> aapt d[ump] [--values] [--include-meta-data] WHAT file.&#123;apk&#125; [asset [asset ...]]</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line"> aapt p[ackage] [<span class="operator">-d</span>][<span class="operator">-f</span>][-m][-u][-v][-x][-z][-M AndroidManifest.xml] \</span><br><span class="line">        ...</span><br><span class="line">        [--utf16] [--auto-add-overlay] \</span><br><span class="line">        ...</span><br><span class="line">        [-S resource-sources [-S resource-sources ...]] \</span><br><span class="line">        [-F apk-file] [-J R-file-dir] \</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">   Package the android resources.  It will <span class="built_in">read</span> assets and resources that are</span><br><span class="line">   supplied with the -M -A -S or raw-files-dir arguments.  The -J -P -F and -R</span><br><span class="line">   options control <span class="built_in">which</span> files are output.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"> Modifiers:</span><br><span class="line">   ...</span><br><span class="line">   <span class="comment"># 特别说明下，这就是前一篇我们说到的include的base set啦，比如android.jar</span></span><br><span class="line">   -I  add an existing package to base include <span class="built_in">set</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="comment"># overlay通过-S指定，可以指定多个目录，</span></span><br><span class="line">   -S  directory <span class="keyword">in</span> <span class="built_in">which</span> to find resources.  Multiple directories will be scanned</span><br><span class="line">       and the first match found (left to right) will take precedence.</span><br><span class="line">   ...</span><br><span class="line">   <span class="comment"># 自动添加overlays包里的资源</span></span><br><span class="line">   --auto-add-overlay</span><br><span class="line">       Automatically add resources that are only <span class="keyword">in</span> overlays.</span><br><span class="line">   ...</span><br></pre></td></tr></table></figure></p>
<p>举个例子</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">aapt package \</span><br><span class="line">-M AndroidManifest.xml \</span><br><span class="line">-m -J gen \</span><br><span class="line">-S src/com/example/res \</span><br><span class="line">-S src/com/example/ui/res</span><br></pre></td></tr></table></figure>
<p>假如我们有如上的aapt命令输入，那么当<code>src/com/example/res</code>与<code>src/com/example/ui/res</code>有相同资源的时候，就会使用前者的，这里对资源替换的粒度是resource而不是文件，比如两个文件夹的values/string.xml都有对同一个string id的描述，最后就会使用前者的字符串。</p>
<p>然后我们再来看看<code>--auto-add-overlay</code>有什么用，</p>
<p>假如我们在<code>src/com/example/ui/res</code>定义了资源string a，但是在<code>src/com/example/res</code>却没有这个string，那就会报错，因为基础包里是没有那个资源的，这时候就需要加上<code>--auto-add-overlay</code>，于是就会自动把新的资源都添加进去。</p>
<p>overlay大致就是这么一回事啦。</p>
<h1 id="Gradle实践">Gradle实践</h1><h2 id="aaptOptions">aaptOptions</h2><p>google的官方文档简直说了和没说一样。还是自己来吧，用AS的模板新建一个Testapp工程，随便建两个res文件夹，各放两个strings.xml，结构为：</p>
<pre><code>├── res
│   ├── drawable
│   ├── layout
│   │   ├── activity_main<span class="class">.xml</span>
│   │   └── content_main<span class="class">.xml</span>
│   ├── <span class="tag">menu</span>
│   │   └── menu_main<span class="class">.xml</span>
│   ├── mipmap-xxxhdpi
│   │   └── ic_launcher<span class="class">.png</span>
│   └── values
│       ├── colors<span class="class">.xml</span>
│       ├── dimens<span class="class">.xml</span>
│       ├── strings<span class="class">.xml</span>
│       └── styles<span class="class">.xml</span>
├── res2
│   └── values
│       └── strings<span class="class">.xml</span>
└── res3
    └── values
        └── strings.xml
</code></pre><p>res2和res3分别定义了一个string <code>hehe</code>，value分别为<code>hehe res2</code>和<code>hehe res3</code>。</p>
<p>content_main.xml的TextView使用了<code>hehe</code>（原来就是那个Hello World）。当然这里as会报错，因为res2和res3并没有标示为资源文件夹。</p>
<p>在module的build.gradle里:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  aaptOptions &#123;</span><br><span class="line">      additionalParameters <span class="string">'-S'</span>,</span><br><span class="line">              <span class="string">'/Users/yifan/dev/github/Testapp/app/src/main/res3'</span>,</span><br><span class="line">              <span class="string">'-S'</span>,</span><br><span class="line">              <span class="string">'/Users/yifan/dev/github/Testapp/app/src/main/res2'</span>,</span><br><span class="line">              <span class="string">'--auto-add-overlay'</span></span><br><span class="line">      noCompress <span class="string">'foo'</span>, <span class="string">'bar'</span></span><br><span class="line">      ignoreAssetsPattern <span class="string">'!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir&gt;_*:!CVS:!thumbs.db:!picasa.ini:!*~'</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>然后我们试图编译:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">All input files are considered out-of-date <span class="keyword">for</span> incremental task <span class="string">':app:processDebugResources'</span>.</span><br><span class="line">Starting process <span class="string">'command '</span>/Users/yifan/dev/sdk/adt-bundle-mac-sdk/build-tools/<span class="number">23.0</span>.<span class="number">2</span>/aapt<span class="string">''</span>. Working directory: /Users/yifan/dev/github/Testapp/app Command: /Users/yifan/dev/sdk/adt-bundle-mac-sdk/build-tools/<span class="number">23.0</span>.<span class="number">2</span>/aapt package <span class="operator">-f</span> --no-crunch -I /Users/yifan/dev/sdk/adt-bundle-mac-sdk/platforms/android-<span class="number">23</span>/android.jar -M /Users/yifan/dev/github/Testapp/app/build/intermediates/manifests/full/debug/AndroidManifest.xml -S /Users/yifan/dev/github/Testapp/app/build/intermediates/res/merged/debug -A /Users/yifan/dev/github/Testapp/app/build/intermediates/assets/debug -m -J /Users/yifan/dev/github/Testapp/app/build/generated/<span class="built_in">source</span>/r/debug -F /Users/yifan/dev/github/Testapp/app/build/intermediates/res/resources-debug.ap_ --debug-mode --custom-package cn.zhaiyifan.testapp -<span class="number">0</span> apk -S /Users/yifan/dev/github/Testapp/app/src/main/res2 --output-text-symbols /Users/yifan/dev/github/Testapp/app/build/intermediates/symbols/debug</span><br><span class="line">Successfully started process <span class="string">'command '</span>/Users/yifan/dev/sdk/adt-bundle-mac-sdk/build-tools/<span class="number">23.0</span>.<span class="number">2</span>/aapt<span class="string">''</span></span><br><span class="line">/Users/yifan/dev/github/Testapp/app/build/intermediates/res/merged/debug/values-af/values-af.xml:<span class="number">3</span> : AAPT: Resource at abc_action_bar_home_description appears <span class="keyword">in</span> overlay but not <span class="keyword">in</span> the base package; use &lt;add-resource&gt; to add.</span><br><span class="line">...</span><br><span class="line">...各种类似报错</span><br><span class="line">/usr/<span class="built_in">local</span>/google/buildbot/src/googleplex-android/mnc-supportlib-release/frameworks/support/v7/appcompat/res/color/switch_thumb_material_light.xml:<span class="number">19</span> : AAPT: No resource found that matches the given name (at <span class="string">'color'</span> with value <span class="string">'@color/switch_thumb_normal_material_light'</span>).</span><br><span class="line"></span><br><span class="line">:app:processDebugResources FAILED</span><br><span class="line">:app:processDebugResources (Thread[main,<span class="number">5</span>,main]) completed. Took <span class="number">10.493</span> secs.</span><br></pre></td></tr></table></figure>
<p>看到<code>&lt;add-resource&gt;</code>这个，大概知道啥问题了…于是在<code>additionalParameters</code>最后又加上了<code>--auto-add-overlay</code>，成功编译运行。</p>
<p>在屏幕中央，显示了hehe res3，交换-S顺序后则变成了hehe res2，符合我们第一节中说到的，选择首个匹配原则。</p>
<p>不仅是string，anim，layout等等资源都可以使用重叠包来进行动态指定。</p>
<h2 id="资源合并">资源合并</h2><p>和aapt的overlay有关，但使用场景略有不同，也介绍一下。</p>
<p>Google在Android Tools Project Site专门为此开了一个页面：<a href="http://tools.android.com/tech-docs/new-build-system/resource-merging" target="_blank" rel="external">Resource Merging(资源合并)</a>。</p>
<p>在过去的编译系统中，资源合并是通过传给aapt一个作为重叠包的资源文件夹列表来做的，再加上–auto-add-overlay来确保在重叠包里的新资源会被自动添加（默认行为只会重载既有资源）。</p>
<p>基础Gradle的编译系统的一个目标就是提供更大的灵活性，而另一个经常并问到的功能要求则是能拥有多个资源文件夹。aapt无法去处理这个，所以新的编译系统引进了一种新的超越aapt的合并机制，生成一个单独的，合并的，资源文件夹并提供给aapt。这个合并机制拥有增量的优点，既因为Gradle的输入/输出变更检测，又因为其实现方式（可以只使用唯一一个变更文件来做重新merge）。</p>
<p>合并的资源来自3种来源：</p>
<ol>
<li>主资源，和main sourceSet相关联，大多位于src/main/res</li>
<li>Variant重叠包，来自Build Type和Flavor(s).</li>
<li>Library项目依赖，通过它们的aar bundle提供资源。</li>
</ol>
<h3 id="优先级">优先级</h3><p>优先级为：BuildType -&gt; Flavor -&gt; main -&gt; Dependencies.</p>
<p>这意味着如果一个资源同时在Build Type和main存在，会使用Build Type里的。</p>
<p>需要注意的是合并的scope，同样（类型，名字）的资源但标示符不同的，是分开处理的。</p>
<p>即如果src/main/res有:</p>
<ul>
<li>res/layout/foo.xml</li>
<li>res/layout-land/foo.xml<br>而src/debug/res有：</li>
<li>res/layout/foo.xml</li>
</ul>
<p>则合并后的资源文件夹会包含默认的来自src/debug/res的foo.xml，但横屏版本则会选择src/main/res下的。</p>
<p>PS: android的资源有19个维度，见<a href="http://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources" target="_blank" rel="external">Grouping Resource Types</a>的Table 2，这19个维度会唯一指定1个资源（qualifier标示符）。在老罗的资源介绍博客中曾经提到过18个维度，现在变成了19是因为多了Round screen这个维度，用于描述Android Wear，添加于API 23.</p>
<h3 id="处理多个资源文件夹">处理多个资源文件夹</h3><p>每个sourceSet可以定义多个资源文件夹，举个例子:</p>
<pre><code><span class="xml">android.sourceSets </span><span class="expression">{
   <span class="variable">main.res.srcDirs</span> = ['<span class="variable">src</span><span class="end-block">/main</span><span class="end-block">/res</span>', '<span class="variable">src</span><span class="end-block">/main</span><span class="end-block">/res</span>2']
}</span><span class="xml"></span>
</code></pre><p>这种情况下，两个资源文件夹具有相同优先级，即如果一个资源在两个文件夹都声明了，合并会报错。</p>
<h3 id="Library依赖的优先级顺序">Library依赖的优先级顺序</h3><p>根据传递的依赖，Library项目的实际集被工程视为一个图，而不是平铺的列表，然后合并机制只会处理一个平优先级列表。</p>
<p>如果我们考虑如下例子的依赖关系：<br>项目 -&gt; A, B (意味着A的优先级高于B)<br>A -&gt; C, D<br>B -&gt; C<br>则最后的优先级list为A, D, B, C，同时保证了A和B可以重载C。</p>
<h3 id="小测试">小测试</h3><p>继续在之前我们建立的工程的基础上做个小测试吧。在sourceSet加上res2文件夹，最后build.gradle的android域如下:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    compileSdkVersion <span class="number">23</span></span><br><span class="line">    buildToolsVersion <span class="string">"23.0.2"</span></span><br><span class="line"></span><br><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">"cn.zhaiyifan.testapp"</span></span><br><span class="line">        minSdkVersion <span class="number">14</span></span><br><span class="line">        targetSdkVersion <span class="number">23</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">"1.0"</span></span><br><span class="line">    &#125;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">        release &#123;</span><br><span class="line">            minifyEnabled <span class="literal">false</span></span><br><span class="line">            proguardFiles getDefaultProguardFile(<span class="string">'proguard-android.txt'</span>), <span class="string">'proguard-rules.pro'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    aaptOptions &#123;</span><br><span class="line">        additionalParameters <span class="string">'-S'</span>,</span><br><span class="line">                <span class="string">'/Users/yifan/dev/github/Testapp/app/src/main/res3'</span>,</span><br><span class="line">                <span class="string">'-S'</span>,</span><br><span class="line">                <span class="string">'/Users/yifan/dev/github/Testapp/app/src/main/res2'</span>,</span><br><span class="line">                <span class="string">'--auto-add-overlay'</span></span><br><span class="line">        noCompress <span class="string">'foo'</span>, <span class="string">'bar'</span></span><br><span class="line">        ignoreAssetsPattern <span class="string">'!.svn:!.git:!.ds_store:!*.scc:.*:&lt;dir&gt;_*:!CVS:!thumbs.db:!picasa.ini:!*~'</span></span><br><span class="line">    &#125;</span><br><span class="line">    android.sourceSets &#123;</span><br><span class="line">        main.res.srcDirs = [<span class="string">'src/main/res'</span>, <span class="string">'src/main/res2'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行后发现界面显示了 hehe res2，符合预期，因为res2已经和res合并了，所以先找到了build/intermediates/res/merged/debug下的string，没有用res3的。</p>
<h1 id="使用场景">使用场景</h1><p>重叠包可以让我们在不同的buildType、渠道下的包，使用不同的资源，做一些定制，而不用侵入代码本身的逻辑。</p>
<p>资源合并则可以帮助资源分组，比如按业务分组之类的，当然也能做重叠包能做的事（比如在不同的buildType申明不同的res.srcDirs）…所以你问我有了resource merge之后重叠包还有什么用…我还真没法回答，可能有什么奇异的场景会用到吧，毕竟Google也说了，这是一种超越aapt的合并机制。</p>
<h1 id="总结">总结</h1><p>我们了解了Android aapt overlay的机制，gradle下的资源合并是怎么一回事，并编写运行demo验证了资源应用两种机制后的结果。</p>
<h1 id="参考文献">参考文献</h1><ul>
<li><a href="https://android.googlesource.com/platform/frameworks/native/+/jb-dev/libs/utils/README" target="_blank" rel="external">https://android.googlesource.com/platform/frameworks/native/+/jb-dev/libs/utils/README</a></li>
<li><a href="http://blog.csdn.net/luoshengyang/article/details/8744683" target="_blank" rel="external">http://blog.csdn.net/luoshengyang/article/details/8744683</a></li>
<li><a href="http://tools.android.com/tech-docs/new-build-system/resource-merging" target="_blank" rel="external">http://tools.android.com/tech-docs/new-build-system/resource-merging</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><p>在<a href="http://blog.zhaiyifan.cn/2016/02/13/android-reverse-2/">Android逆向分析(2) APK的打包与安装</a>一文中对资源编译过程的介绍中，笔者提到了over]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Resource" scheme="http://blog.zhaiyifan.cn/tags/Resource/"/>
    
      <category term="aapt" scheme="http://blog.zhaiyifan.cn/tags/aapt/"/>
    
      <category term="Android Introduction" scheme="http://blog.zhaiyifan.cn/categories/Android-Introduction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android逆向分析(2) APK的打包与安装]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/02/13/android-reverse-2/"/>
    <id>http://blog.zhaiyifan.cn/2016/02/13/android-reverse-2/</id>
    <published>2016-02-13T08:13:55.000Z</published>
    <updated>2016-02-19T09:45:13.000Z</updated>
    <content type="html"><![CDATA[<p>2/18日增加对aidl和java编译的描述。</p>
<h1 id="前言">前言</h1><p>上一次我们反编译了手Q，并遇到了Apktool反编译直接crash的问题，虽然笔者很想在这次解决这个问题，但在解决途中，发现该保护依赖于很多知识，所以本次先插入一下，正所谓知其然知其所以然，授之鱼不如授之以渔，只有知道一些基本原理，才能让我们以后能自行解决更多问题。</p>
<p>那么，你知道么？从我们在Android Studio中，点击run，到app运行在手机上，之间究竟发生了什么，代码和资源是怎么变成APK的，而APK又是怎么安装上去，并能执行的呢。</p>
<p><img src="http://img.blog.csdn.net/20160212233210732" alt="build-simple-overview"></p>
<p>我们或许都能说出来像<a href="http://developer.android.com/tools/building/index.html" target="_blank" rel="external">上图</a>这样一个简单的过程：Android工程编译打包为APK，签名后通过ADB push到设备或者模拟器上安装。但是再深入就蒙了。</p>
<p>希望看完下文，大家能对整个过程有一定了解。</p>
<p>源码：资源部分为Android 4.4，后半段改为了6.0_r2</p>
<h1 id="打包">打包</h1><p>APK是Android Package的缩写，实际上APK就是一个zip压缩包，使用zip解压软件直接就能对其进行解压，解压后会发现就是由各种资源文件、一或多个dex文件（odex过的apk除外）、AndroidManifest.xml、resources.arsc以及其他一些文件组成的。</p>
<p>我们先看看从Android在线文档找来的<a href="http://developer.android.com/sdk/installing/studio-build.html#detailed-build" target="_blank" rel="external">APK文件构建流程图</a>，如下（方形为对象，圆形为动作）。</p>
<p><img src="http://img.blog.csdn.net/20160212233741455" alt="apk-build"></p>
<p>从该图来看，整个打包过程可以分为以下七个步骤：</p>
<h2 id="第1步：aapt">第1步：aapt</h2><p>打包资源文件，生成R.java和编译后的资源。aapt的可执行文件位于sdk的build-tools下，而源码则在frameworks\base\tools\aapt目录下。打包过程主要是调用了<code>Resources.cpp</code>下的<code>buildResources()</code>。</p>
<p>路径为<code>Main.cpp</code>下的<code>handleCommand(Bundle* bundle)</code>到<code>Command.cpp</code>下的<code>doPackage(Bundle* bundle)</code>，经过一些初始化和检查后调用了我们要深入看的<code>buildResources(Bundle* bundle, const sp&lt;AaptAssets&gt;&amp; assets)</code>。因为代码都比较长，这里不贴了，主要说一下大概的逻辑和流程。</p>
<h3 id="检查AndroidManifest-xml">检查AndroidManifest.xml</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// String8是android framework源码定义的数据格式，用来保存UTF-8字符的字符串，类似的还有一个String16，用来放UTF-16字符串的。</span></span><br><span class="line">sp&lt;AaptGroup&gt; androidManifestFile =</span><br><span class="line">        assets-&gt;getFiles().valueFor(String8(<span class="string">"AndroidManifest.xml"</span>));</span><br><span class="line"><span class="keyword">if</span> (androidManifestFile == NULL) &#123;</span><br><span class="line">    fprintf(stderr, <span class="string">"ERROR: No AndroidManifest.xml file found.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> UNKNOWN_ERROR;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">status_t err = parsePackage(bundle, assets, androidManifestFile);</span><br><span class="line"><span class="keyword">if</span> (err != NO_ERROR) &#123;</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">NOISY(printf(<span class="string">"Creating resources for package %s\n"</span>,</span><br><span class="line">             assets-&gt;getPackage().string()));</span><br></pre></td></tr></table></figure>
<p>主要做一些检查并使用<code>parsePackage</code>初始化并设置一些attribute，比如<code>package</code>, <code>minSdkVersion</code>, <code>uses-sdk</code>。</p>
<h3 id="添加被引用资源包">添加被引用资源包</h3><p>使用<code>table.addIncludedResources(bundle, assets)</code>添加被引用资源包，比如系统的那些android:命名空间下的资源。</p>
<h3 id="收集资源文件">收集资源文件</h3><p>收集资源文件:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">collect_files</span><span class="params">(<span class="keyword">const</span> sp&lt;AaptDir&gt;&amp; dir,</span><br><span class="line">        KeyedVector&lt;String8, sp&lt;ResourceTypeSet&gt; &gt;* resources)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>处理overlay（重叠包，如果指定的重叠包有和当前编译包重名的资源，则使用重叠包的）:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apply the overlay files to the base set</span></span><br><span class="line"><span class="keyword">if</span> (!applyFileOverlay(bundle, assets, &amp;drawables, <span class="string">"drawable"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;layouts, <span class="string">"layout"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;anims, <span class="string">"anim"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;animators, <span class="string">"animator"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;interpolators, <span class="string">"interpolator"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;transitions, <span class="string">"transition"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;xmls, <span class="string">"xml"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;raws, <span class="string">"raw"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;colors, <span class="string">"color"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;menus, <span class="string">"menu"</span>) ||</span><br><span class="line">        !applyFileOverlay(bundle, assets, &amp;mipmaps, <span class="string">"mipmap"</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> UNKNOWN_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="将收集到的资源文件加到资源表(ResourceTable)">将收集到的资源文件加到资源表(<code>ResourceTable</code>)</h3><p>对res目录下的各个资源子目录进行处理，函数为<code>makeFileResources</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> status_t <span class="title">makeFileResources</span><span class="params">(Bundle* bundle, <span class="keyword">const</span> sp&lt;AaptAssets&gt;&amp; assets,</span><br><span class="line">                                  ResourceTable* table,</span><br><span class="line">                                  <span class="keyword">const</span> sp&lt;ResourceTypeSet&gt;&amp; <span class="built_in">set</span>,</span><br><span class="line">                                  <span class="keyword">const</span> <span class="keyword">char</span>* resType)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p><code>makeFileResources</code>会对资源文件名做合法性检查，并将其添加到ResourceTable内。</p>
<h3 id="编译values资源并添加到资源表">编译values资源并添加到资源表</h3><p>在上一步添加过程中，其实并没有对values资源进行处理，因为values比较特殊，需要经过编译之后，才能添加到资源表中。</p>
<p>编译会调用<code>ResourceTable</code>的<code>compileResourceFile</code>进行:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">status_t</span> compileResourceFile(Bundle* bundle,</span><br><span class="line">                             <span class="keyword">const</span> sp&lt;AaptAssets&gt;&amp; assets,</span><br><span class="line">                             <span class="keyword">const</span> sp&lt;AaptFile&gt;&amp; in,</span><br><span class="line">                             <span class="keyword">const</span> ResTable_config&amp; defParams,</span><br><span class="line">                             <span class="keyword">const</span> <span class="keyword">bool</span> overwrite,</span><br><span class="line">                             ResourceTable* outTable);</span><br></pre></td></tr></table></figure></p>
<h3 id="给bag资源分配id">给bag资源分配id</h3><p>在继续编译其他资源之前，我们需要先给bag资源（attrs，比如orientation这种属性的取值范围定义的子元素）分配id，因为其他资源可能对它们有引用。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">status_t</span> ResourceTable::assignResourceIds();</span><br></pre></td></tr></table></figure>
<h3 id="编译xml资源文件">编译xml资源文件</h3><p>最后我们终于可以编译xml文件了，因为我们已经为它准备好了一切可能引用到的东西（value, drawable等）。</p>
<p>程序会对layouts, anims, animators等逐一调用<code>ResourceTable.cpp</code>的:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">status_t</span> compileXmlFile(<span class="keyword">const</span> sp&lt;AaptAssets&gt;&amp; assets,</span><br><span class="line">                        <span class="keyword">const</span> sp&lt;AaptFile&gt;&amp; target,</span><br><span class="line">                        ResourceTable* table,</span><br><span class="line">                        <span class="keyword">int</span> options);</span><br></pre></td></tr></table></figure></p>
<p>进行编译，内部流程又可以分为：解析xml文件，赋予属性名称资源id，解析属性值，扁平化为二进制文件（调用<code>flatten(Bundle* bundle, const sp&lt;AaptFile&gt;&amp; dest)</code>）。</p>
<h3 id="编译AndroidManifest-xml文件">编译AndroidManifest.xml文件</h3><p>该步骤其实也可以归为上一步，但由于manifest文件的特殊，所以姑且抽了出来。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">// 拿到AndroidManifest.xml文件</span><br><span class="line">const sp&lt;AaptFile&gt; manifestFile(androidManifestFile-&gt;getFiles().valueAt(0));</span><br><span class="line">String8 manifestPath(manifestFile-&gt;getPrintableSource());</span><br><span class="line"></span><br><span class="line">// 生成最终编译后的manifest文件</span><br><span class="line"></span><br><span class="line">// 清空原来的数据，重新解析</span><br><span class="line">manifestFile-&gt;clearData();</span><br><span class="line">sp&lt;XMLNode&gt; manifestTree = XMLNode::parse(manifestFile);</span><br><span class="line">if (manifestTree == NULL) &#123;</span><br><span class="line">    return UNKNOWN_ERROR;</span><br><span class="line">&#125;</span><br><span class="line">// 马杀鸡manifest（从bundle读取必要的tag并写到manifestTree，</span><br><span class="line">// 处理package name重载，把各种相对路径的名字改为绝对路径）</span><br><span class="line">err = massageManifest(bundle, manifestTree);</span><br><span class="line">if (err &lt; NO_ERROR) &#123;</span><br><span class="line">    return err;</span><br><span class="line">&#125;</span><br><span class="line">// 编译manifest xml文件</span><br><span class="line">err = compileXmlFile(assets, manifestTree, manifestFile, &amp;table);</span><br><span class="line">if (err &lt; NO_ERROR) &#123;</span><br><span class="line">    return err;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="生成最终资源表">生成最终资源表</h3><p>生成我们解压后看到的那个<code>resources.arsc</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (table.hasResources()) &#123;</span><br><span class="line">    <span class="comment">// 生成资源符号表</span></span><br><span class="line">    sp&lt;AaptSymbols&gt; symbols = assets-&gt;getSymbolsFor(String8(<span class="string">"R"</span>));</span><br><span class="line">    err = table.addSymbols(symbols);</span><br><span class="line">    <span class="keyword">if</span> (err &lt; NO_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 生成资源索引表resources.arsc</span></span><br><span class="line">    resFile = getResourceFile(assets);</span><br><span class="line">    <span class="keyword">if</span> (resFile == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"Error: unable to generate entry for resource data\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> UNKNOWN_ERROR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = table.flatten(bundle, resFile);</span><br><span class="line">    <span class="keyword">if</span> (err &lt; NO_ERROR) &#123;</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可能有一些同学用到过，这就是public.xml里定义的固定资源id</span></span><br><span class="line">    <span class="keyword">if</span> (bundle-&gt;getPublicOutputFile()) &#123;</span><br><span class="line">        FILE* fp = fopen(bundle-&gt;getPublicOutputFile(), <span class="string">"w+"</span>);</span><br><span class="line">        <span class="keyword">if</span> (fp == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERROR: Unable to open public definitions output file %s: %s\n"</span>,</span><br><span class="line">                    (<span class="keyword">const</span> <span class="keyword">char</span>*)bundle-&gt;getPublicOutputFile(), strerror(errno));</span><br><span class="line">            <span class="keyword">return</span> UNKNOWN_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (bundle-&gt;getVerbose()) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"  Writing public definitions to %s.\n"</span>, bundle-&gt;getPublicOutputFile());</span><br><span class="line">        &#125;</span><br><span class="line">        table.writePublicDefinitions(String16(assets-&gt;getPackage()), fp);</span><br><span class="line">        fclose(fp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把资源读回来到最终资源表</span></span><br><span class="line">    finalResTable.add(resFile-&gt;getData(), resFile-&gt;getSize(), <span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 生成完毕</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>而具体的<strong>resources.arsc</strong>生成则在<code>ResourceTable.cpp</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个400行的函数，具体的生成实现在这里</span></span><br><span class="line"><span class="keyword">status_t</span> ResourceTable::flatten(Bundle* bundle, <span class="keyword">const</span> sp&lt;AaptFile&gt;&amp; dest);</span><br></pre></td></tr></table></figure></p>
<p>写入顺序为 索引资源表头部(ResourceTypes:ResTable_header) -&gt; 资源项的值字符串资源池 -&gt; Package数据块。</p>
<h3 id="验证AndroidManifest-xml文件">验证AndroidManifest.xml文件</h3><p>验证manifest各个属性对应值的合法性，即value中能出现的字符，完成后资源正式处理完毕，添加到<code>AaptAssets</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (resFile != <span class="literal">NULL</span>) &#123;</span><br><span class="line">    <span class="comment">// These resources are now considered to be a part of the included resources, for others to reference.</span></span><br><span class="line">    err = assets-&gt;addIncludedResources(resFile);</span><br><span class="line">    <span class="keyword">if</span> (err &lt; NO_ERROR) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERROR: Unable to parse generated resources, aborting.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="生成R-java">生成R.java</h3><p>终于，我们已经读取并处理好了需要的一切，是时候开始写文件了，于是又回到了<code>Command.cpp</code>的<code>doPackage</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新那些需要被作为Java符号的符号</span></span><br><span class="line">assets-&gt;applyJavaSymbols();</span><br><span class="line"><span class="keyword">if</span> (SourcePos::hasErrors()) &#123;</span><br><span class="line">    goto bail;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果需要则在这里生成.d依赖文件</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写R.java常量</span></span><br><span class="line"><span class="keyword">if</span> (!assets-&gt;havePrivateSymbols()) &#123;</span><br><span class="line">    <span class="keyword">if</span> (bundle-&gt;getCustomPackage() == NULL) &#123;</span><br><span class="line">        <span class="comment">// 将R.java文件写到恰当的目录下</span></span><br><span class="line">        <span class="comment">// 如 gen/com/foo/app/R.java</span></span><br><span class="line">        err = writeResourceSymbols(bundle, assets, assets-&gt;getPackage(), <span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">const</span> String8 <span class="title">customPkg</span><span class="params">(bundle-&gt;getCustomPackage()</span>)</span>;</span><br><span class="line">        err = writeResourceSymbols(bundle, assets, customPkg, <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        goto bail;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 如果有library文件，则需要把R.java也写到那些libraries的对应class目录下</span></span><br><span class="line">    <span class="comment">// 如 gen/com/foo/app/lib/R.java</span></span><br><span class="line">    <span class="keyword">if</span> (bundle-&gt;getExtraPackages() != NULL) &#123;</span><br><span class="line">        <span class="comment">// 冒号分割</span></span><br><span class="line">        <span class="function">String8 <span class="title">libs</span><span class="params">(bundle-&gt;getExtraPackages()</span>)</span>;</span><br><span class="line">        <span class="keyword">char</span>* packageString = strtok(libs.lockBuffer(libs.length()), <span class="string">":"</span>);</span><br><span class="line">        <span class="keyword">while</span> (packageString != NULL) &#123;</span><br><span class="line">            err = writeResourceSymbols(bundle, assets, String8(packageString), <span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                goto bail;</span><br><span class="line">            &#125;</span><br><span class="line">            packageString = strtok(NULL, <span class="string">":"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        libs.unlockBuffer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 有不对外开放的私有符号</span></span><br><span class="line">    err = writeResourceSymbols(bundle, assets, assets-&gt;getPackage(), <span class="keyword">false</span>);</span><br><span class="line">    <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        goto bail;</span><br><span class="line">    &#125;</span><br><span class="line">    err = writeResourceSymbols(bundle, assets, assets-&gt;getSymbolsPrivatePackage(), <span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        goto bail;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="生成ProGuard文件">生成ProGuard文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">err = writeProguardFile(bundle, assets);</span><br><span class="line"><span class="keyword">if</span> (err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">goto</span> bail;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而<code>writeProguardFile(bundle, assets)</code>则会调用</p>
<ul>
<li>writeProguardForAndroidManifest(&amp;keep, assets);</li>
<li>writeProguardForLayouts(&amp;keep, assets);</li>
</ul>
<p>将规则更新到ProguardKeepSet中，然后打开proguard文件进行写入（proguard文件由-G命令指定）。</p>
<h3 id="生成apk">生成apk</h3><p>又是一个洋洋洒洒150多行的函数，浓缩一下看看删减版<code>Package.cpp</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">status_t</span> writeAPK(Bundle* bundle, <span class="keyword">const</span> sp&lt;AaptAssets&gt;&amp; assets, <span class="keyword">const</span> String8&amp; outputFile)</span><br><span class="line">&#123;</span><br><span class="line">    ... 计时，初始化状态变量</span><br><span class="line">    <span class="comment">// so，apk就是作为一个zip包创建的</span></span><br><span class="line">    ZipFile* zip = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * 准备Zip文件，如果文件存在，则根据bundle设置的"update"或者"force"进行对应处理</span><br><span class="line">     */</span></span><br><span class="line">    FileType fileType = getFileType(outputFile.<span class="built_in">string</span>());</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 准备完毕，new ZipFile并打开准备开始写</span></span><br><span class="line">    <span class="keyword">status_t</span> status;</span><br><span class="line">    zip = <span class="keyword">new</span> ZipFile;</span><br><span class="line">    status = zip-&gt;open(outputFile.<span class="built_in">string</span>(), ZipFile::kOpenReadWrite | ZipFile::kOpenCreate);</span><br><span class="line">    <span class="keyword">if</span> (status != NO_ERROR) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERROR: unable to open '%s' as Zip file for writing\n"</span>,</span><br><span class="line">                outputFile.<span class="built_in">string</span>());</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 先把assets丢进去（即第10步我们准备好的东西，包括了assets目录, res目录下values以外的子目录 - 因为values已经被编译到资源索引表了, resources.arsc）</span></span><br><span class="line">    count = processAssets(bundle, zip, assets);</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERROR: unable to process assets while packaging '%s'\n"</span>,</span><br><span class="line">                outputFile.<span class="built_in">string</span>());</span><br><span class="line">        result = count;</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 再把用-j指定的包含classes的jar或者zip包给丢进去</span></span><br><span class="line">    count = processJarFiles(bundle, zip);</span><br><span class="line">    <span class="keyword">if</span> (count &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">"ERROR: unable to process jar files while packaging '%s'\n"</span>,</span><br><span class="line">                outputFile.<span class="built_in">string</span>());</span><br><span class="line">        result = count;</span><br><span class="line">        <span class="keyword">goto</span> bail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 走到这儿算是处理成功了</span></span><br><span class="line">    result = NO_ERROR;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span><br><span class="line">     * 各种标记删除，然后flush zip</span><br><span class="line">     */</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 没东西要你何用，删 */</span></span><br><span class="line">    <span class="keyword">if</span> (zip-&gt;getNumEntries() == <span class="number">0</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果被要求生成依赖文件，则在这里进行，最后写到指定apk输出目录下，如bin/resources.ap_.d</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    assert(result == NO_ERROR);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面任何一部出错则goto跑来这儿，删除文件</span></span><br><span class="line">bail:</span><br><span class="line">    <span class="keyword">delete</span> zip;        <span class="comment">// must close before remove in Win32</span></span><br><span class="line">    <span class="keyword">if</span> (result != NO_ERROR) &#123;</span><br><span class="line">        ...删除并unlink</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (result == NO_ERROR &amp;&amp; bundle-&gt;getVerbose())</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Done!\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="第2步：aidl">第2步：aidl</h2><p>处理aidl文件，调用build-tools下的<strong>aidl</strong>可执行文件生成对应的Java文件。该工具的源码位于frameworks\base\tools\aidl。</p>
<p>aidl，全名Android Interface Definition Language，即Android接口定义语言。</p>
<p>输入：aidl后缀的文件。<br>输出：可用于进程通信的C/S端java代码，位于build/generated/source/aidl。</p>
<p>对于这块，推荐Android开发艺术一书，其在跨进程一章对AIDL有比较详尽的描述。其实我们也完全可以自己去实现AIDL生成的那套，这里不进行赘述。</p>
<h2 id="插入_-_RenderScript_&amp;_BuildConfig">插入 - RenderScript &amp; BuildConfig</h2><p>插入一下官网图里没说到的。</p>
<p>编译RenderScript，生成BuildConfig。</p>
<h2 id="第3步：Java源码编译">第3步：Java源码编译</h2><p>我们有了R.java和aidl生成的Java文件，再加上工程的源代码，现在可以使用javac进行正常的java编译生成class文件了。</p>
<p>输入：java source的文件夹（另外还包括了build/generated下的：R.java, aidl生成的java文件，以及BuildConfig.java）。<br>输出：对于gradle编译，可以在build/intermediates/classes里，看到输出的class文件。</p>
<h2 id="第4步：dex">第4步：dex</h2><p>调用dx.bat将所有的class文件（上一步生成的以及第三方库的）转化为classes.dex文件，实际调用的是build-tools\lib\dx.jar，其源码位于libcore\dex（描述Dex文件的格式）及dalvik\dx（包含dx及multidex打包）下。</p>
<p>dx会将class转换为Dalvik字节码，生成常量池，消除冗余数据等。</p>
<p>关于dex，我们下一篇会单独去细说。</p>
<h2 id="第5步：apkbuilder">第5步：apkbuilder</h2><p>打包生成APK文件。旧的apkbuilder脚本已经废弃，现在都已经通过<code>sdklib.jar</code>的<code>ApkBuilder</code>类进行打包了。输入为我们之前生成的包含resources.arcs的.ap_文件，上一步生成的dex文件，以及其他资源如jni、jar包内的资源。</p>
<p>大致步骤为</p>
<ol>
<li>以包含resources.arcs的.ap_文件为基础，new一个ApkBuilder，设置debugMode</li>
<li>apkBuilder.addZipFile(f);</li>
<li>apkBuilder.addSourceFolder(f);</li>
<li>apkBuilder.addResourcesFromJar(f);</li>
<li>apkBuilder.addNativeLibraries(nativeFileList);</li>
<li>apkBuilder.sealApk();    // 关闭apk文件</li>
<li>generateDependencyFile(depFile, inputPaths, outputFile.getAbsolutePath());</li>
</ol>
<h2 id="第6步：Jarsigner">第6步：Jarsigner</h2><p>对apk文件进行签名。APK需要签名才能在设备上进行安装，源码在build\tools\signapk下。</p>
<p>很多时候我们在逆向改完后，会因为没有签名文件导致最后的apk无法正常使用，又细分为本地验证和服务器验证。</p>
<h2 id="第7步：zipalign">第7步：zipalign</h2><p>调用buildtools\zipalign，对签名后的apk文件进行对齐处理，使apk中所有资源文件距离文件起始偏移为4字节的整数倍，从而在通过内存映射访问apk文件时会更快。</p>
<p>这样我们的最终apk就生成完毕了，对gradle是如何在输入gradle assembleDebug之后打包的，可以参见aosp下builder/src/main/java/com/android/builder目录，这样你可以更了解整个流程和每个gradle子任务做了什么（像是BuildConfig是怎么生成的）。</p>
<h1 id="ADB">ADB</h1><p>ADB, 全名 Android Debug Bridge，不仅仅是命令行我们输入的adb xxx命令，<a href="http://developer.android.com/tools/debugging/index.html" target="_blank" rel="external">Debug</a>, <a href="http://developer.android.com/tools/help/monitor.html" target="_blank" rel="external">Device Monitor</a>, <a href="http://developer.android.com/tools/debugging/ddms.html" target="_blank" rel="external">DDMS</a>也都是通过adb来完成设备与我们的开发机器的通信的。</p>
<p>比如当我们在命令行输入<br><img src="http://blog.zhaiyifan.cn/images/android-reverse-2-2.png" alt="adb daemon start"></p>
<p>实际上就会有2个进程被起起来（这就是下文提到的组件中的client和server了）<br><img src="http://blog.zhaiyifan.cn/images/android-reverse-2-1.png" alt="adb ps"></p>
<h2 id="角色">角色</h2><p>ADB扮演了2个角色</p>
<ul>
<li>传输。host和设备间的通信路径。可能是USB，也可能是TCP，但host不需要关心。</li>
<li>服务。通过传输提供服务，在目标设备上执行指定命令。</li>
</ul>
<h2 id="组件">组件</h2><p>ADB中有3个组件</p>
<ul>
<li>adb clients。其实就是那个子命令的可执行文件。比如起了3个adb shell，那就是3个clients。</li>
<li>adb server（<strong>就是那个动不动卡死要restart的东西</strong>）。在开发机器的后台运行，扮演着adb clients和adbd之间的中介，让彼此可以通信。</li>
<li>adb daemon(adbd)。在目标设备上运行的后台进程；由init启动，死掉后会由init重启。</li>
</ul>
<h2 id="server的启动">server的启动</h2><p>当启动adb client的时候，client首先会检查是否有adb server进程在运行中，如果没有则启动进程。</p>
<p>server启动后会绑定到TCP端口5037，并监听来自adb clients的命令。接着server会通过扫描5555到5585之间的奇数端口（被模拟器和物理设备所使用），建立到所有运行中设备实例的连接。一旦server找到adb daemon，就会建立到那个端口的连接（而未开启USB调试的设备则没有adb daemon运行）。</p>
<p>每个设备实例都需要一对连续的端口（这就是为什么刚才只扫描奇数端口），一个偶数端口用于控制连接，一个奇数端口用于adb连接，例如：</p>
<p>模拟器1，控制: 5554<br>模拟器2，adb: 5555<br>Nexus6，控制: 5556<br>Nexus6, adb: 5557<br>…</p>
<p>如上，5554和5555其实都是被同一台设备所使用。</p>
<h2 id="内部实现">内部实现</h2><p>源码位于aosp的system/core/adb目录下，adb和adbd都是从这儿编译出来的。<br>有一部分文件是共用的：adb.c, fdevent.c, transort.c, transport_local.c, tansport_usb.c, service.c, sockets.c, util.c。</p>
<p>举个例子<code>adb.c</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::<span class="function"><span class="built_in">string</span> <span class="title">get_trace_setting</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="preprocessor">#<span class="keyword">if</span> ADB_HOST</span></span><br><span class="line">    <span class="keyword">return</span> get_trace_setting_from_env();</span><br><span class="line"><span class="preprocessor">#<span class="keyword">else</span></span></span><br><span class="line">    <span class="keyword">return</span> get_trace_setting_from_prop();</span><br><span class="line"><span class="preprocessor">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>通过ADB_HOST这个宏编译不同的代码。其他大部分文件则由server和client后缀可以区分。</p>
<p>跟我们的主题息息相关的主要就是install系列的命令了，先看看命令使用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">adb install [-lrtsdg] &lt;file&gt;</span><br><span class="line">                             - 把安装包文件push到设备并安装</span><br><span class="line">                               (<span class="operator">-l</span>: forward lock application)</span><br><span class="line">                               (-r: replace existing application)</span><br><span class="line">                               (-t: allow <span class="built_in">test</span> packages)</span><br><span class="line">                               (<span class="operator">-s</span>: install application on sdcard)</span><br><span class="line">                               (<span class="operator">-d</span>: allow version code downgrade)</span><br><span class="line">                               (-g: grant all runtime permissions)</span><br><span class="line"></span><br><span class="line">adb install-multiple [-lrtsdpg] &lt;file...&gt;</span><br><span class="line">                             - 把安装包文件push到设备并安装</span><br><span class="line">                               (<span class="operator">-l</span>: forward lock application)</span><br><span class="line">                               (-r: replace existing application)</span><br><span class="line">                               (-t: allow <span class="built_in">test</span> packages)</span><br><span class="line">                               (<span class="operator">-s</span>: install application on sdcard)</span><br><span class="line">                               (<span class="operator">-d</span>: allow version code downgrade)</span><br><span class="line">                               (-p: partial application install)</span><br><span class="line">                               (-g: grant all runtime permissions)</span><br><span class="line"></span><br><span class="line">adb uninstall [-k] &lt;package&gt; - 从设备上卸载该app</span><br><span class="line">                               (<span class="string">'-k'</span> means keep the data and cache directories)</span><br></pre></td></tr></table></figure></p>
<p>分别对应<code>commandline.cpp</code>下的三个方法:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">install_app</span><span class="params">(transport_type t, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">install_multiple_app</span><span class="params">(transport_type t, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">uninstall_app</span><span class="params">(transport_type t, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span></span>;</span><br></pre></td></tr></table></figure></p>
<h2 id="adb_install">adb install</h2><p>这里以install命令为例看看adb做了什么:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">install_app</span><span class="params">(transport_type transport, <span class="keyword">const</span> <span class="keyword">char</span>* serial, <span class="keyword">int</span> argc,</span><br><span class="line">                       <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> DATA_DEST = <span class="string">"/data/local/tmp/%s"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> SD_DEST = <span class="string">"/sdcard/tmp/%s"</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* where = DATA_DEST;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析-s参数，有则把where改成SD_DEST</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到最后的APK参数，检查是否是APK，不是则提示"Invalid APK file"，然后直接退出</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* apk_file = argv[last_apk];</span><br><span class="line">    <span class="keyword">char</span> apk_dest[PATH_MAX];</span><br><span class="line">    <span class="comment">// apk_dest这样就是最终要拷贝过去的完整路径了，比如"/data/local/tmp/app.apk"</span></span><br><span class="line">    <span class="built_in">snprintf</span>(apk_dest, <span class="keyword">sizeof</span> apk_dest, where, get_basename(apk_file));</span><br><span class="line">    <span class="comment">// 把文件push上去</span></span><br><span class="line">    <span class="keyword">int</span> err = do_sync_push(apk_file, apk_dest, <span class="number">0</span> <span class="comment">/* no show progress */</span>);</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup_apk;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        argv[last_apk] = apk_dest; <span class="comment">/* destination name, not source location */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过pm安装</span></span><br><span class="line">    err = pm_command(transport, serial, argc, argv);</span><br><span class="line"></span><br><span class="line"><span class="comment">// push出错了就删了文件</span></span><br><span class="line">cleanup_apk:</span><br><span class="line">    delete_file(transport, serial, apk_dest);</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// pm命令</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">pm_command</span><span class="params">(transport_type transport, <span class="keyword">const</span> <span class="keyword">char</span>* serial,</span><br><span class="line">                      <span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span>** argv)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> cmd = <span class="string">"shell:pm"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (argc-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        cmd += <span class="string">" "</span> + escape_arg(*argv++);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> send_shell_command(transport, serial, cmd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="彩蛋">彩蛋</h2><p>还有几个有趣的命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 跟adb shell差不多，不过颜色很hell</span></span><br><span class="line">adb hell</span><br><span class="line"></span><br><span class="line"><span class="comment"># 笑你妹</span></span><br><span class="line">adb lolcat</span><br></pre></td></tr></table></figure></p>
<h1 id="安装">安装</h1><p>为什么有时候会安装不上apk呢？安装的界面是怎么弹出来的？抱着这些疑问，我们看下去。</p>
<h2 id="安装方式">安装方式</h2><p>大致上有四种</p>
<ol>
<li>系统程序安装，开机时安装，没有安装界面。<br>由开机时启动的<code>PackageManagerService</code>服务完成，会在启动时扫描<code>/system/app</code>, <code>vender/app</code>, <code>/data/app</code>, <code>/data/app-private</code>并安装。</li>
<li>通过Android市场安装，Google Play可以直接安装，其他市场除非root，否则需要自己点击安装（除非定制rom），即和第4种一样。</li>
<li>ADB安装，即上一节说的，也没有安装界面。shell:pm是<code>PackageManagerService</code>的Shell客户端，源码位于<br>/frameworks/base/cmds/pm</li>
</ol>
<p>执行路径大致是从main -&gt; run -&gt; runInstall，挑一段最后的核心代码<code>Pm.java</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">runInstall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        VerificationParams verificationParams = <span class="keyword">new</span> VerificationParams(verificationURI,</span><br><span class="line">                originatingURI, referrerURI, VerificationParams.NO_UID, null);</span><br><span class="line">        <span class="comment">// 通过IPackageManager</span></span><br><span class="line">        mPm.installPackageAsUser(apkFilePath, obs.getBinder(), installFlags,</span><br><span class="line">                installerPackageName, verificationParams, abi, userId);</span><br><span class="line"></span><br><span class="line">        synchronized (obs) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!obs.finished) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    obs.wait();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 我们看到的成功失败返回信息</span></span><br><span class="line">            <span class="keyword">if</span> (obs.result == PackageManager.INSTALL_SUCCEEDED) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Success"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.err.println(<span class="string">"Failure ["</span></span><br><span class="line">                        + installFailureToString(obs)</span><br><span class="line">                        + <span class="string">"]"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>手机自行通过文件浏览器打开安装，有安装界面。</li>
</ol>
<h2 id="PackageInstaller">PackageInstaller</h2><p>当我们在手机的文件管理器或者notification点击apk文件，就会出现如下图所示（Nexus6 Android 6.0.1）的界面，点击安装按钮即可开始安装，点击取消按钮返回。</p>
<p><img src="http://blog.zhaiyifan.cn/images/android-reverse-2-3.jpg" alt="安装界面"></p>
<p>这个安装界面是Android系统程序PackageInstaller的PackageInstallerActivity，dump一下可以看到如下图信息</p>
<p><img src="http://blog.zhaiyifan.cn/images/android-reverse-2-4.png" alt="PackageInstallerActivity"></p>
<p>当Android系统请求安装apk程序时，会启动这个Activity，并通过Intent读取传来的apk信息，我们来简单看看该Activty onCreate的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PackageInstallerActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnCancelListener</span>, <span class="title">OnClickListener</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle icicle)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(icicle);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拿到pm和installer</span></span><br><span class="line">        mPm = getPackageManager();</span><br><span class="line">        mInstaller = mPm.getPackageInstaller();</span><br><span class="line">        mUserManager = (UserManager) getSystemService(Context.USER_SERVICE);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Intent intent = getIntent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查permission，初始化读取mSessionId，mPackageURI，mOriginatingURI，mReferrerURI</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查是否允许未知来源</span></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查scheme是否支持，不支持则直接结束</span></span><br><span class="line">        <span class="keyword">final</span> String scheme = mPackageURI.getScheme();</span><br><span class="line">        <span class="keyword">if</span> (scheme != <span class="keyword">null</span> &amp;&amp; !<span class="string">"file"</span>.equals(scheme) &amp;&amp; !<span class="string">"package"</span>.equals(scheme)) &#123;</span><br><span class="line">            Log.w(TAG, <span class="string">"Unsupported scheme "</span> + scheme);</span><br><span class="line">            setPmResult(PackageManager.INSTALL_FAILED_INVALID_URI);</span><br><span class="line">            mInstallFlowAnalytics.setFlowFinished(</span><br><span class="line">                    InstallFlowAnalytics.RESULT_FAILED_UNSUPPORTED_SCHEME);</span><br><span class="line">            finish();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> PackageUtil.AppSnippet as;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">"package"</span>.equals(mPackageURI.getScheme())) &#123;</span><br><span class="line">            <span class="comment">// package scheme</span></span><br><span class="line">            mInstallFlowAnalytics.setFileUri(<span class="keyword">false</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                mPkgInfo = mPm.getPackageInfo(mPackageURI.getSchemeSpecificPart(),</span><br><span class="line">                        PackageManager.GET_PERMISSIONS | PackageManager.GET_UNINSTALLED_PACKAGES);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NameNotFoundException e) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 无法获得PackageInfo，直接退出</span></span><br><span class="line">            <span class="keyword">if</span> (mPkgInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            as = <span class="keyword">new</span> PackageUtil.AppSnippet(mPm.getApplicationLabel(mPkgInfo.applicationInfo),</span><br><span class="line">                    mPm.getApplicationIcon(mPkgInfo.applicationInfo));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// file scheme</span></span><br><span class="line">            mInstallFlowAnalytics.setFileUri(<span class="keyword">true</span>);</span><br><span class="line">            <span class="keyword">final</span> File sourceFile = <span class="keyword">new</span> File(mPackageURI.getPath());</span><br><span class="line">            PackageParser.Package parsed = PackageUtil.getPackageInfo(sourceFile);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检查解析错误，显示错误对话框，直接退出</span></span><br><span class="line">            <span class="keyword">if</span> (parsed == <span class="keyword">null</span>) &#123;</span><br><span class="line">                ...</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 生成PackageInfo</span></span><br><span class="line">            mPkgInfo = PackageParser.generatePackageInfo(parsed, <span class="keyword">null</span>,</span><br><span class="line">                    PackageManager.GET_PERMISSIONS, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">null</span>,</span><br><span class="line">                    <span class="keyword">new</span> PackageUserState());</span><br><span class="line">            <span class="comment">// manifest校验</span></span><br><span class="line">            mPkgDigest = parsed.manifestDigest;</span><br><span class="line">            <span class="comment">// 设置apk的程序名和图标</span></span><br><span class="line">            as = PackageUtil.getAppSnippet(<span class="keyword">this</span>, mPkgInfo.applicationInfo, sourceFile);</span><br><span class="line">        &#125;</span><br><span class="line">        mInstallFlowAnalytics.setPackageInfoObtained();</span><br><span class="line"></span><br><span class="line">        setContentView(R.layout.install_start);</span><br><span class="line">        mInstallConfirm = findViewById(R.id.install_confirm_panel);</span><br><span class="line">        mInstallConfirm.setVisibility(View.INVISIBLE);</span><br><span class="line">        PackageUtil.initSnippetForNewApp(<span class="keyword">this</span>, as, R.id.app_snippet);</span><br><span class="line"></span><br><span class="line">        mOriginatingUid = getOriginatingUid(intent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果必要则禁止来自未知来源的安装</span></span><br><span class="line">        <span class="keyword">if</span> (!requestFromUnknownSource) &#123;</span><br><span class="line">            <span class="comment">// 进行一些其他的初始化工作</span></span><br><span class="line">            initiateInstall();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 未知来源检查，如果admin禁止则直接提示错误退出。否则显示选项提示用户去设置里修改该设置。</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">boolean</span> isManagedProfile = mUserManager.isManagedProfile();</span><br><span class="line">        <span class="keyword">if</span> (!unknownSourcesAllowedByAdmin || (!unknownSourcesAllowedByUser &amp;&amp; isManagedProfile)) &#123;</span><br><span class="line">            showDialogInner(DLG_ADMIN_RESTRICTS_UNKNOWN_SOURCES);</span><br><span class="line">            mInstallFlowAnalytics.setFlowFinished(</span><br><span class="line">                    InstallFlowAnalytics.RESULT_BLOCKED_BY_UNKNOWN_SOURCES_SETTING);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!unknownSourcesAllowedByUser) &#123;</span><br><span class="line">            showDialogInner(DLG_UNKNOWN_SOURCES);</span><br><span class="line">            mInstallFlowAnalytics.setFlowFinished(</span><br><span class="line">                    InstallFlowAnalytics.RESULT_BLOCKED_BY_UNKNOWN_SOURCES_SETTING);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            initiateInstall();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>整个方法有2个重点函数。</p>
<p>1)  <code>PackageUtil.getPackageInfo(sourceFile)</code></p>
<p><code>getPackageInfo</code>会构造<code>PackageParser</code>，调用<code>Package parseMonolithicPackage(File apkFile, int flags)</code>去解析该apk程序包，然后记录下manifest的校验码。</p>
<p><code>parseMonolithicPackage()</code>对于我们普通的app又会调用<code>parseBaseApk(File apkFile, AssetManager assets, int flags)</code>去做真正的解析并获得Package对象（该类里有很多给split apk用的方法和逻辑）。</p>
<p>解析过程会首先读取AndroidManifest.xml获取程序包名以构建Package对象，然后再处理manifest的其他标签包括四大组件，并把信息全都存到Package对象里面。</p>
<p>2) <code>initiateInstall()</code></p>
<p>首先检测该程序是否已安装，是则弹框提示是否替换程序，否则直接调用<code>startInstallConfirm()</code>，做UI初始化和事件绑定，于是当我们点击安装的时候则会触发onClick下的OK按钮事件:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (mOkCanInstall || mScrollView == <span class="keyword">null</span>) &#123;</span><br><span class="line">    mInstallFlowAnalytics.setInstallButtonClicked();</span><br><span class="line">    <span class="keyword">if</span> (mSessionId != -<span class="number">1</span>) &#123;</span><br><span class="line">        mInstaller.setPermissionsResult(mSessionId, <span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// We're only confirming permissions, so we don't really know how the</span></span><br><span class="line">        <span class="comment">// story ends; assume success.</span></span><br><span class="line">        mInstallFlowAnalytics.setFlowFinishedWithPackageManagerResult(</span><br><span class="line">                PackageManager.INSTALL_SUCCEEDED);</span><br><span class="line">        finish();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        startInstall();</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    mScrollView.pageScroll(View.FOCUS_DOWN);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对于本地app则会继续走<code>startInstall</code>的逻辑，开启一个新的activity，InstallAppProgress，该activity判断scheme进行不同的安装:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="string">"package"</span>.equals(mPackageURI.getScheme())) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        pm.installExistingPackage(mAppInfo.packageName);</span><br><span class="line">        observer.packageInstalled(mAppInfo.packageName,</span><br><span class="line">                PackageManager.INSTALL_SUCCEEDED);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</span><br><span class="line">        observer.packageInstalled(mAppInfo.packageName,</span><br><span class="line">                PackageManager.INSTALL_FAILED_INVALID_APK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    pm.installPackageWithVerificationAndEncryption(mPackageURI, observer, installFlags,</span><br><span class="line">            installerPackageName, verificationParams, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>installPackageWithVerificationAndEncryption()</code>其实还是会调用<code>installPackage()</code>，结果和adb安装殊途同归，整个转的路径为<code>installPackage()</code> -&gt; <code>installPackageAsUser()</code>(这儿会先检查调用者是否有安装的权限) -&gt; processPendingInstall() -&gt; installPackageLI():<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">installPackageLI</span><span class="params">(InstallArgs args, PackageInstalledInfo res)</span> </span>&#123;</span><br><span class="line">    ....</span><br><span class="line">    <span class="keyword">if</span> (replace) &#123;</span><br><span class="line">        <span class="comment">// 替换已有程序</span></span><br><span class="line">        replacePackageLI(pkg, parseFlags, scanFlags | SCAN_REPLACING, args.user,</span><br><span class="line">                installerPackageName, volumeUuid, res);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 安装新程序</span></span><br><span class="line">        installNewPackageLI(pkg, parseFlags, scanFlags | SCAN_DELETE_DATA_ON_FAILURES,</span><br><span class="line">                args.user, installerPackageName, volumeUuid, res);</span><br><span class="line">    &#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>无论是替换还是新安装，都会调用<code>scanPackageLI()</code>，然后跑去<code>scanPackageDirtyLI</code>，它会判断是否为系统程序，解析apk程序包，检查依赖库，验证签名，检查sharedUser签名、权限冲突、ContentProvider冲突，更新native库目录文件（检测abi），进行dexopt，杀掉现有进程（仅对覆盖安装的场景）等等，最后调用createDataDirsLI()进行实际安装:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">createDataDirsLI</span><span class="params">(String volumeUuid, String packageName, <span class="keyword">int</span> uid, String seinfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] users = sUserManager.getUserIds();</span><br><span class="line">    <span class="keyword">int</span> res = mInstaller.install(volumeUuid, packageName, uid, uid, seinfo);</span><br><span class="line">    <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> user : users) &#123;</span><br><span class="line">        <span class="keyword">if</span> (user != <span class="number">0</span>) &#123;</span><br><span class="line">            res = mInstaller.createUserData(volumeUuid, packageName,</span><br><span class="line">                    UserHandle.getUid(user, uid), user, seinfo);</span><br><span class="line">            <span class="keyword">if</span> (res &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> res;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>mInstaller</code>为<code>Installer</code>类的实例，但实际安装并不是在java做的，而会通过<code>InstallerConnection</code>把命令使用socket通信发到/system/bin/installd。</p>
<p>在这里第一次call的<code>install()</code>对应命令为<br><code>install uuid name uid gid seinfo</code><br>而第二次call的<code>createUserData</code>则会使用命令<br><code>mkuserdata uuid name uid userId seinfo</code></p>
<p>installd是一个常驻进程，可以在adb shell通过<code>ps | grep installd</code>查看进程信息。源码位于frameworks/native/cmd/installd/installd.cpp下（dexopt也在这里哦），处理install命令的函数为do_install(), do_install调用了<code>Command.cpp</code>的<code>install()</code>:<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">install</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *uuid, <span class="keyword">const</span> <span class="keyword">char</span> *pkgname, uid_t uid, gid_t gid, <span class="keyword">const</span> <span class="keyword">char</span> *seinfo)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((uid &lt; AID_SYSTEM) || (gid &lt; AID_SYSTEM)) &#123;</span><br><span class="line">        ALOGE(<span class="string">"invalid uid/gid: %d %d\n"</span>, uid, gid);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> _pkgdir(create_data_user_package_path(uuid, <span class="number">0</span>, pkgname));</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* pkgdir = _pkgdir.c_str();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mkdir(pkgdir, <span class="number">0751</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot create dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (chmod(pkgdir, <span class="number">0751</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot chmod dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">        unlink(pkgdir);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (selinux_android_setfilecon(pkgdir, pkgname, seinfo, uid) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot setfilecon dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">        unlink(pkgdir);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (chown(pkgdir, uid, gid) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot chown dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">        unlink(pkgdir);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.0支持多用户后把用户数据和app数据的创建分开了，完成install后，</span></span><br><span class="line"><span class="comment">// java层会调用这儿依次为所有用户创建用户数据，而过去这两个函数是合并的一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">make_user_data</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *uuid, <span class="keyword">const</span> <span class="keyword">char</span> *pkgname, uid_t uid, userid_t userid, <span class="keyword">const</span> <span class="keyword">char</span>* seinfo)</span></span><br><span class="line"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">string</span> _pkgdir(create_data_user_package_path(uuid, userid, pkgname));</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span>* pkgdir = _pkgdir.c_str();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (mkdir(pkgdir, <span class="number">0751</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot create dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (chmod(pkgdir, <span class="number">0751</span>) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot chmod dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">        unlink(pkgdir);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (selinux_android_setfilecon(pkgdir, pkgname, seinfo, uid) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot setfilecon dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">        unlink(pkgdir);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (chown(pkgdir, uid, uid) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ALOGE(<span class="string">"cannot chown dir '%s': %s\n"</span>, pkgdir, strerror(errno));</span><br><span class="line">        unlink(pkgdir);</span><br><span class="line">        <span class="keyword">return</span> -errno;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行完毕后，通过socket回传结果，而<code>PackageInstaller</code>根据返回结果做对应处理并显示给用户，至此为止，整个apk安装过程结束。</p>
<h1 id="总结和下期预告">总结和下期预告</h1><p>我们了解了一个android工程是怎么变成apk的，apk是怎么跑到设备上，而最后又是如何安装的。下一次我们来看看dex和odex，art上的elf和oat都是什么，而dexopt又做了什么优化。dex加壳技术大多就是在dex上面做了手脚。</p>
<hr>
<p>参考文献：</p>
<ul>
<li><a href="http://developer.android.com/tools/building/index.html" target="_blank" rel="external">http://developer.android.com/tools/building/index.html</a></li>
<li><a href="http://developer.android.com/sdk/installing/studio-build.html" target="_blank" rel="external">http://developer.android.com/sdk/installing/studio-build.html</a></li>
<li><a href="http://blog.csdn.net/luoshengyang/article/details/8744683" target="_blank" rel="external">http://blog.csdn.net/luoshengyang/article/details/8744683</a></li>
<li>《Android软件安全与逆向分析》，作者：丰生强，人民邮电出版社</li>
<li><a href="https://events.linuxfoundation.org/images/stories/pdf/lf_abs12_kobayashi.pdf" target="_blank" rel="external">https://events.linuxfoundation.org/images/stories/pdf/lf_abs12_kobayashi.pdf</a></li>
<li><a href="http://developer.android.com/tools/help/adb.html" target="_blank" rel="external">http://developer.android.com/tools/help/adb.html</a></li>
</ul>
<p>原文：<a href="http://blog.zhaiyifan.cn/2016/02/13/android-reverse-2/">http://blog.zhaiyifan.cn/2016/02/13/android-reverse-2/</a></p>
<p><em>写的途中还不慎看到csdn上某排名500多的百度大V声称自己看老罗的博客并结合参考资料写的整理，实则完全就是照抄书上的，连错误的地方都照抄了，也没有说是人家的，我也是呵呵哒。更有趣的是该作者还在新的文章里提到觉得网上的文章内容重复太多。恩恩，不愧是伟大的百度公司的开发。实在忍不住喷一下。果然还是太年轻。</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>2/18日增加对aidl和java编译的描述。</p>
<h1 id="前言">前言</h1><p>上一次我们反编译了手Q，并遇到了Apktool反编译直接crash的问题，虽然笔者很想在这次解决这个问题，但在解决途中，发现该保护依赖于很多知识，所以本次先插入一下，正所谓知]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Reverse Engineering" scheme="http://blog.zhaiyifan.cn/tags/Reverse-Engineering/"/>
    
      <category term="Android Reverse Engineering" scheme="http://blog.zhaiyifan.cn/categories/Android-Reverse-Engineering/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android逆向分析(1) 反编译看看手Q口令红包的实现原理]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/02/09/android-reverse-1/"/>
    <id>http://blog.zhaiyifan.cn/2016/02/09/android-reverse-1/</id>
    <published>2016-02-09T15:33:30.000Z</published>
    <updated>2016-02-10T03:10:18.000Z</updated>
    <content type="html"><![CDATA[<p>本系列文章是《Android软件安全与逆向分析》的实践笔记（一些工具的版本和用法已经不同了），同时笔者希望系统性地记录一下逆向方面的文字和想法。犹记得在大学的时候，曾经学过一段时间的逆向工程，现在只记得那时候用OD跳来跳去看汇编代码，找到破解处时兴奋的感觉了。</p>
<blockquote>
<p>逆向工程（又称反向工程），是一种技术过程，即对一项目标产品进行逆向分析及研究，从而演绎并得出该产品的处理流程、组织结构、功能性能规格等设计要素，以制作出功能相近，但又不完全一样的产品。逆向工程源于商业及军事领域中的硬件分析。其主要目的是，在不能轻易获得必要的生产信息下，直接从成品的分析，推导出产品的设计原理。</p>
<p>逆向工程可能会被误认为是对知识产权的严重侵害，但是在实际应用上，反而可能会保护知识产权所有者。例如在集成电路领域，如果怀疑某公司侵犯知识产权，可以用逆向工程技术来寻找证据。    —— <a href="https://zh.wikipedia.org/wiki/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B" target="_blank"> [ 维基百科 ]</a></p>
</blockquote>
<p>首篇作为开始，先讲讲简单的反编译。反编译通常有几种目的：互相学习、借来用用、嘿嘿（干你，又分为小干干类似微信红包，和大干干改别人的apk帮他上架）。</p>
<p>因为没带kvm回来，mbpr屏幕太小，所以下文环境为windows。</p>
<h1 id="反编译">反编译</h1><p>让我们从实战开始，先实践一下怎么去反编译一个apk，看看某些功能的实现。毕竟没有实践的原理都是耍流氓。<br>这里我们保留互相学习的心态，所以是友善的第一种目的，嘻嘻。</p>
<h2 id="准备">准备</h2><p>工具</p>
<ul>
<li><a href="http://ibotpeaches.github.io/Apktool/" target="_blank" rel="external">Apktool</a></li>
<li><a href="https://github.com/skylot/jadx" target="_blank" rel="external">jadx</a>（新一代反编译大杀器）</li>
</ul>
<p>安装包</p>
<ul>
<li><a href="https://qd.myapp.com/myapp/qqteam/AndroidQQ/mobileqq_android.apk" target="_blank" rel="external">手机QQ 6.2.3</a> (目标就设定为看看口令红包是怎么做的吧)</li>
</ul>
<h3 id="Apktool的使用">Apktool的使用</h3><p>首先确保你安装了java 7或以上，并能直接在命令行调用<code>java</code>。</p>
<ol>
<li>下载 <a href="https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/windows/apktool.bat" target="_blank" rel="external">windows用wrapper脚本</a> (<a href="https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/osx/apktool" target="_blank" rel="external">mac使用这个</a>)。</li>
<li>下载最新的<a href="https://bitbucket.org/iBotPeaches/apktool/downloads" target="_blank" rel="external">apktool</a>。</li>
<li>重命名上面下载的apktool jar文件为<code>apktool.jar</code>。</li>
<li>把apktool.bat和apktool.jar放在同一个目录下，并加入PATH环境变量。</li>
<li>现在你可以直接通过命令行调用<code>apktool</code>并查看使用方式了。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Apktool v2.<span class="number">0.3</span> - a tool <span class="keyword">for</span> reengineering Android apk files</span><br><span class="line">with smali v2.<span class="number">1.0</span> and baksmali v2.<span class="number">1.0</span></span><br><span class="line"></span><br><span class="line">usage: apktool</span><br><span class="line"> -advance,--advanced   prints advance information.</span><br><span class="line"> -version,--version    prints the version <span class="keyword">then</span> exits</span><br><span class="line"></span><br><span class="line">usage: apktool <span class="keyword">if</span>|install-framework [options] &lt;framework.apk&gt;</span><br><span class="line"> -p,--frame-path &lt;dir&gt;   Stores framework files into &lt;dir&gt;.</span><br><span class="line"> -t,--tag &lt;tag&gt;          Tag frameworks using &lt;tag&gt;.</span><br><span class="line"></span><br><span class="line">usage: apktool d[ecode] [options] &lt;file_apk&gt;</span><br><span class="line"> <span class="operator">-f</span>,--force              Force delete destination directory.</span><br><span class="line"> -o,--output &lt;dir&gt;       The name of folder that gets written. Default is apk.out</span><br><span class="line"> -p,--frame-path &lt;dir&gt;   Uses framework files located <span class="keyword">in</span> &lt;dir&gt;.</span><br><span class="line"> -r,--no-res             Do not decode resources.</span><br><span class="line"> <span class="operator">-s</span>,--no-src             Do not decode sources.</span><br><span class="line"> -t,--frame-tag &lt;tag&gt;    Uses framework files tagged by &lt;tag&gt;.</span><br><span class="line"></span><br><span class="line">usage: apktool b[uild] [options] &lt;app_path&gt;</span><br><span class="line"> <span class="operator">-f</span>,--force-all          Skip changes detection and build all files.</span><br><span class="line"> -o,--output &lt;dir&gt;       The name of apk that gets written. Default is dist/name.apk</span><br><span class="line"> -p,--frame-path &lt;dir&gt;   Uses framework files located <span class="keyword">in</span> &lt;dir&gt;.</span><br></pre></td></tr></table></figure>
<h3 id="jadx的使用">jadx的使用</h3><ol>
<li>下载<a href="https://github.com/skylot/jadx/releases" target="_blank" rel="external">jadx</a>。</li>
<li>运行gradlew dist编译。</li>
<li><code>jadx\jadx-gui\build\install\jadx-gui\bin</code>下有可运行的gui</li>
<li><code>jadx\jadx-cli\build\install\jadx\bin</code>是命令行程序</li>
<li>可以都加入PATH环境变量，以便直接命令行调用。</li>
</ol>
<h2 id="分析APK文件">分析APK文件</h2><h3 id="First_Try">First Try</h3><p>虽然我们可以用jadx直接打开apk傻瓜式地去查看源代码，但是为了更理解反编译的过程和工作原理，以便以后在碰到一些问题（比如加壳）的时候可以自己解决，这里我们先装逼一下，使用Apktool去进行分析。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">D:\dev\reverse&gt;apktool d -o qq mobileqq_android_6.<span class="number">2.3</span>.apk</span><br><span class="line">I: Using Apktool <span class="number">2.0</span>.<span class="number">3</span> on mobileqq_android_6.<span class="number">2.3</span>.apk</span><br><span class="line">I: Loading resource table...</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> brut.androlib.AndrolibException: Multiple res specs: attr/name</span><br><span class="line">        at brut.androlib.res.data.ResTypeSpec.addResSpec(ResTypeSpec.java:<span class="number">78</span>)</span><br><span class="line">        at brut.androlib.res.decoder.ARSCDecoder.readEntry(ARSCDecoder.java:<span class="number">248</span>)</span><br><span class="line">        at brut.androlib.res.decoder.ARSCDecoder.readTableType(ARSCDecoder.java:<span class="number">212</span>)</span><br><span class="line">        at brut.androlib.res.decoder.ARSCDecoder.readTableTypeSpec(ARSCDecoder.java:<span class="number">154</span>)</span><br><span class="line">        at brut.androlib.res.decoder.ARSCDecoder.readTablePackage(ARSCDecoder.java:<span class="number">116</span>)</span><br><span class="line">        at brut.androlib.res.decoder.ARSCDecoder.readTableHeader(ARSCDecoder.java:<span class="number">78</span>)</span><br><span class="line">        at brut.androlib.res.decoder.ARSCDecoder.decode(ARSCDecoder.java:<span class="number">47</span>)</span><br><span class="line">        at brut.androlib.res.AndrolibResources.getResPackagesFromApk(AndrolibResources.java:<span class="number">544</span>)</span><br><span class="line">        at brut.androlib.res.AndrolibResources.loadMainPkg(AndrolibResources.java:<span class="number">63</span>)</span><br><span class="line">        at brut.androlib.res.AndrolibResources.getResTable(AndrolibResources.java:<span class="number">55</span>)</span><br><span class="line">        at brut.androlib.Androlib.getResTable(Androlib.java:<span class="number">66</span>)</span><br><span class="line">        at brut.androlib.ApkDecoder.setTargetSdkVersion(ApkDecoder.java:<span class="number">198</span>)</span><br><span class="line">        at brut.androlib.ApkDecoder.decode(ApkDecoder.java:<span class="number">96</span>)</span><br><span class="line">        at brut.apktool.Main.cmdDecode(Main.java:<span class="number">165</span>)</span><br><span class="line">        at brut.apktool.Main.main(Main.java:<span class="number">81</span>)</span><br></pre></td></tr></table></figure>
<p>竟然报错了，Multiple res specs: attr/name，在网上找了找资料，应该是腾讯利用Apktool的bug去进行了加壳，除了添加同名id外还做了若干加固，好，你狠，我们下篇文章针对腾讯的壳来分析并修改Apktool，这次先用jadx来试试。</p>
<h3 id="Second_Try">Second Try</h3><p>如果直接用jadx-gui打开QQ的apk，你会发现，卡死了。不错，就是卡死了，因为太大了…</p>
<p>我们打开jadx-gui文件（其实就是个启动的script），加上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> JAVA_OPTS=-server -Xms1024m -Xmx8192m -XX:PermSize=<span class="number">256</span>m -XX:MaxPermSize=<span class="number">1024</span>m</span><br></pre></td></tr></table></figure></p>
<p>就跟我们加速as/idea的原理差不多，多给点内存，这样就能顺利地打开了（可能会需要比较久的时间）。</p>
<p><img src="http://img.blog.csdn.net/20160209202814031" alt="jadx干完手Q后"></p>
<h3 id="字符串大法">字符串大法</h3><p>为了找到我们的目标，红包，我们首先尝试用字符串搜索大法：在Resources -&gt; resources.arsc -&gt; res -&gt; values -&gt; strings.xml找到口令红包对应的<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">string</span> <span class="attribute">name</span>=<span class="value">"qb_hbdetail_command_word"</span>&gt;</span>口令红包<span class="tag">&lt;/<span class="title">string</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后Crtl+Shift+F进行Text Search，结果…没找到。</p>
<p>我们再使用资源id大法，直接在resources.arsc找到<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0x7f0a0e5a (2131365466) = string.qb_hbdetail_command_word: &#21475;&#20196;&#32418;&#21253;</span><br></pre></td></tr></table></figure></p>
<p>再搜，好，你狠。。。还是没有。是在下输了。</p>
<h3 id="类/函数名大法">类/函数名大法</h3><p>我们再祭出第二大杀器，类/函数/变量名大法搜索大法。</p>
<p>通常类名符合的范围更小，所以先只使用Class。<br>试试看红包的英语：RedPacket（类名命名所以R和P大写）<br><img src="http://img.blog.csdn.net/20160209205945134" alt="RedPacket Search"><br>OK，我们找到了十几条，开始逐一排查，第一条<code>RedPacketInfo</code>点进去一看就是个包含了各种field的ui用的vo类，跳过，再看下一个，从包名<code>com.tencent.mobileqq.data</code>看上去，似乎有戏，<code>QQWalletRedPacketMsg</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tencent.mobileqq.data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.text.TextUtils;</span><br><span class="line"><span class="keyword">import</span> com.tencent.mobileqq.hotpatch.NotVerifyClass;</span><br><span class="line"><span class="keyword">import</span> cooperation.qzone.util.WiFiDash;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInput;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutput;</span><br><span class="line"><span class="keyword">import</span> tencent.im.msg.im_msg_body.QQWalletAioBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* compiled from: ProGuard */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QQWalletRedPacketMsg</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String authkey;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> channelId;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> conftype;</span><br><span class="line">    <span class="keyword">public</span> QQWalletTransferMsgElem elem;</span><br><span class="line">    <span class="keyword">public</span> String envelopeName;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> envelopeid;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isOpened;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> msgFrom;</span><br><span class="line">    <span class="keyword">public</span> String redPacketId;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> redtype;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> resend;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> templateId;</span><br><span class="line"></span><br><span class="line">	...串行化、读写、构建方法等，可以无视。</span><br></pre></td></tr></table></figure></p>
<p>从field名来看，这里还是比较可疑的，猜测<code>redtype</code>是不是描述红包类型的。</p>
<p>我们再次使用关键词<code>redtype</code>进行搜索，这次选择Code，只进行代码内搜索，结果却发现貌似不对，找到相关的字符串是”查看详情”，貌似是描述红包领取状态的。</p>
<p>不放弃，继续抓住<code>QQWalletRedPacketMsg</code>这个类进行搜索，看看是不是有外面包着这个类的Class，搜索QQWalletRedPacketMsg，范围使用Field，排除掉类本身外，只有唯一的结果：<code>MessageForQQWalletMsg</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MessageForQQWalletMsg</span> <span class="keyword">extends</span> <span class="title">ChatMessage</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 哦哦？COMMAND_REDPACKET？口令红包</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_TYPE_COMMAND_REDPACKET = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_TYPE_COMMON_REDPACKET = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_TYPE_COMMON_THEME_REDPACKET = <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_TYPE_INDIVIDUAL_REDPACKET = <span class="number">2001</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_TYPE_LUCY_REDPACKET = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_TYPE_LUCY_THEME_REDPACKET = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_TYPE_PUBLIC_ACCOUNT_REDPACKET = <span class="number">2002</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MSG_TYPE_TRANSFER = <span class="number">1</span>;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></p>
<p>我们找到了一个常量字段，目测就是这个描述了是否是口令红包了。在该类搜索此字段还找到<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isCommandRedPacketMsg</span><span class="params">(MessageRecord messageRecord)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (messageRecord != <span class="keyword">null</span> &amp;&amp; (messageRecord <span class="keyword">instanceof</span> MessageForQQWalletMsg) &amp;&amp; ((MessageForQQWalletMsg) messageRecord).messageType == MSG_TYPE_COMMAND_REDPACKET) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>果然，我们再接着分别查找<code>MSG_TYPE_COMMAND_REDPACKET</code>和<code>isCommandRedPacketMsg</code>，结果只在<code>TroopMessageManager</code>里面找到了一段没成功反编译的代码中对方法<code>isCommandRedPacketMsg</code>的引用:<br><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="label">L_0x0100:</span></span><br><span class="line">    <span class="built_in">r2</span> = <span class="keyword">com</span>.tencent.mobileqq.data.MessageForQQWalletMsg.isCommandRedPacketMsg(<span class="built_in">r25</span>)<span class="comment">;</span></span><br><span class="line">    if (<span class="built_in">r2</span> == <span class="number">0</span>) goto L_0x011e<span class="comment">;</span></span><br></pre></td></tr></table></figure></p>
<p>这里如果是口令红包会继续走下去，而如果不是则会跳到L_0x011e。</p>
<p>而从类的名字来看，<code>TroopMessageManager</code>应该是指<code>群消息管理者</code>，应该没错，毕竟红包也是群消息的一种。</p>
<p>于是我们只能耐心地看下去这段神奇的充满goto的代码。晕着看完后大概看到就是各种逻辑判断和调用<code>MsgProxyUtils.java</code>去处理消息处理逻辑和缓存。然后就没了…好，你屌，是在下输了。我再试试别的。</p>
<h3 id="常量大法">常量大法</h3><p>常量大法其实也可以算是字符串搜索的一种，只是不去搜索xml里的，而是使用中文转化为unicode后的字符串去进行查找。自行搜索Unicode编码转化可以找到online convertor。</p>
<p>口令红包对应的是”\u53e3\u4ee4\u7ea2\u5305”：</p>
<p><img src="http://img.blog.csdn.net/20160209224453176" alt="\u53e3\u4ee4\u7ea2\u5305搜索"></p>
<p>找到2个类共3处代码引用。</p>
<p>最后那个类的起名有点耐人寻味，<code>PasswdRedBagManager</code>，密码红包管理器，有点意思：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">    ((TroopTipsMsgMgr) <span class="keyword">this</span>.f2203a.getManager(<span class="number">80</span>)).a(str, <span class="string">"\u533f\u540d\u4e0d\u80fd\u62a2\u53e3\u4ee4\u7ea2\u5305\u54e6"</span>, NetConnInfoCenter.getServerTime(), BaseConstants.DEFAULT_QUICK_HEARTBEAT_TIMEOUT, f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>这串Unicode转换成中文后是”匿名不能抢口令红包哦”，原来还有这种逻辑，产品经理你真是够了。</p>
<p>这里我们重新从该类的上面看下来，大致扫一扫，发现onDestroy下面有一个方法打的log很神奇:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">long</span>[] m883a(SessionInfo sessionInfo, String str) &#123;</span><br><span class="line">    <span class="keyword">if</span> (QLog.isColorLevel()) &#123;</span><br><span class="line">        QLog.d(f2197a, (<span class="keyword">int</span>) h, <span class="string">"openPasswdRedBagByPassword, passwd = "</span> + str);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span>[] jArr = <span class="keyword">new</span> <span class="keyword">long</span>[]&#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (sessionInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> jArr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (TextUtils.isEmpty(str)) &#123;</span><br><span class="line">        <span class="keyword">return</span> jArr;</span><br><span class="line">    &#125;</span><br><span class="line">    c();</span><br><span class="line">    List&lt;String&gt; list = (List) <span class="keyword">this</span>.f2206a.get(str);</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="keyword">null</span> || list.isEmpty()) &#123;</span><br><span class="line">        <span class="keyword">return</span> jArr;</span><br><span class="line">    &#125;</span><br><span class="line">    PasswdRedBagInfo passwdRedBagInfo;</span><br><span class="line">    String str2 = a(sessionInfo.a) + <span class="string">"_"</span> + sessionInfo.f1757a;</span><br><span class="line">    <span class="keyword">for</span> (String str3 : list) &#123;</span><br><span class="line">        HashMap hashMap = (HashMap) <span class="keyword">this</span>.f2209b.get(str3);</span><br><span class="line">        <span class="keyword">if</span> (hashMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            passwdRedBagInfo = (PasswdRedBagInfo) hashMap.get(str2);</span><br><span class="line">            <span class="keyword">if</span> (!(passwdRedBagInfo == <span class="keyword">null</span> || a(str3))) &#123;</span><br><span class="line">                jArr[g] = passwdRedBagInfo.a.uint64_creator_uin.get();</span><br><span class="line">                <span class="keyword">if</span> (!b(str3)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!c(str3)) &#123;</span><br><span class="line">                        hashMap.put(str2, passwdRedBagInfo);</span><br><span class="line">                        jArr[f] = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    jArr[f] = <span class="number">3</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    jArr[f] = <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    passwdRedBagInfo = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (passwdRedBagInfo == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> jArr;</span><br><span class="line">    &#125;</span><br><span class="line">    b(sessionInfo.a, sessionInfo.f1757a, passwdRedBagInfo.a.string_redbag_id.get().toStringUtf8());</span><br><span class="line">    a(sessionInfo, passwdRedBagInfo);</span><br><span class="line">    <span class="keyword">return</span> jArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>isColorLevel目测是某种debug用的tag，可能某些环境下部分用户会打开，而从log结合我们平时打log习惯来看，这个方法应该就叫<code>openPasswdRedBagByPassword</code>了，第二个参数就是<code>password</code>。终于找到了。看一下逻辑大致是从外面load进来所有红包信息到本类的各种hashmap和list（有一个tag，只会加载第一次，本类多个方法都会调用这个方法），然后根据password从里面找到对应<code>passwdRedBagInfo</code>，设置result tag，然后调用了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b(sessionInfo.a, sessionInfo.f1757a, passwdRedBagInfo.a.string_redbag_id.get().toStringUtf8());</span><br><span class="line">a(sessionInfo, passwdRedBagInfo);</span><br></pre></td></tr></table></figure></p>
<p>我们先不急看这两个方法是做什么的。再往下看下一个方法，直接就有:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">long</span>[] b(SessionInfo sessionInfo, String str) &#123;</span><br><span class="line">    <span class="keyword">if</span> (QLog.isColorLevel()) &#123;</span><br><span class="line">        QLog.d(f2197a, (<span class="keyword">int</span>) h, <span class="string">"openPasswdRedBagById, id = "</span> + str);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p>
<p><code>openPasswdRedBagById</code>用id打开红包，猜测该id就是我们最早看到的结构里的<code>redPacketId</code>字段。</p>
<p>而该方法同样调用了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b(sessionInfo.a, sessionInfo.f1757a, str);</span><br><span class="line">a(sessionInfo, passwdRedBagInfo);</span><br></pre></td></tr></table></figure></p>
<p>看看这两个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">(SessionInfo sessionInfo, PasswdRedBagInfo passwdRedBagInfo)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sessionInfo != <span class="keyword">null</span> &amp;&amp; passwdRedBagInfo != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Object obj = (sessionInfo.a == <span class="number">0</span> || sessionInfo.a == h || sessionInfo.a == Action.ACTION_REGISTNEWACCOUNT_COMMITSMS || sessionInfo.a == Action.ACTION_LOGIN) ? g : <span class="keyword">null</span>;</span><br><span class="line">        String str = sessionInfo.f1757a;</span><br><span class="line">        String valueOf = String.valueOf(passwdRedBagInfo.a.uint64_creator_uin.get());</span><br><span class="line">        <span class="keyword">if</span> (obj != <span class="keyword">null</span>) &#123;</span><br><span class="line">            str = valueOf.equals(<span class="keyword">this</span>.f2213d) ? sessionInfo.f1757a : <span class="keyword">this</span>.f2213d;</span><br><span class="line">        &#125;</span><br><span class="line">        JSONObject a = QQWalletMsgItemBuilder.a(<span class="keyword">this</span>.f2203a, sessionInfo, passwdRedBagInfo.a.string_redbag_id.get().toStringUtf8(), passwdRedBagInfo.a.string_authkey.get().toStringUtf8(), str, <span class="string">"appid#1344242394|bargainor_id#1000030201|channel#msg"</span>, <span class="string">"graphb"</span>, <span class="keyword">null</span>);</span><br><span class="line">        Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">        bundle.putString(<span class="string">"json"</span>, a.toString());</span><br><span class="line">        bundle.putString(<span class="string">"callbackSn"</span>, jbi.a);</span><br><span class="line">        Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>.f2200a, PayBridgeActivity.class);</span><br><span class="line">        intent.putExtras(bundle);</span><br><span class="line">        intent.addFlags(<span class="number">268435456</span>);</span><br><span class="line">        intent.putExtra(<span class="string">"pay_requestcode"</span>, <span class="number">5</span>);</span><br><span class="line">        <span class="keyword">this</span>.f2200a.startActivity(intent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">(<span class="keyword">int</span> i, String str, String str2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!TextUtils.isEmpty(str2)) &#123;</span><br><span class="line">        HashMap hashMap = (HashMap) <span class="keyword">this</span>.f2209b.get(str2);</span><br><span class="line">        <span class="keyword">if</span> (hashMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">            PasswdRedBagInfo passwdRedBagInfo = (PasswdRedBagInfo) hashMap.get(a(i) + <span class="string">"_"</span> + str);</span><br><span class="line">            <span class="keyword">if</span> (passwdRedBagInfo != <span class="keyword">null</span> &amp;&amp; !passwdRedBagInfo.f4810a) &#123;</span><br><span class="line">                passwdRedBagInfo.f4810a = <span class="keyword">true</span>;</span><br><span class="line">                ThreadManager.a(<span class="keyword">new</span> kmr(<span class="keyword">this</span>, str2), h, <span class="keyword">null</span>, <span class="keyword">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>发现第一个方法似乎就直接发请求了，看来只要调用到这里，就是可以领红包了。那最初又是如何来这里的呢？我们搜索对<code>PasswdRedBagManager</code>内这两个方法的引用找到<code>BaseChatPie.java</code>:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">public</span> PasswdRedBagManager f25190a;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EnterForSend</span> <span class="keyword">implements</span> <span class="title">OnKeyListener</span>, <span class="title">OnEditorActionListener</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 这里从方法名判断是每次输入点击发送后调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onEditorAction</span><span class="params">(TextView textView, <span class="keyword">int</span> i, KeyEvent keyEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (i != BaseChatPie.dr) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String obj = <span class="keyword">this</span>.a.f25220a.getText().toString();</span><br><span class="line">        <span class="keyword">if</span> (obj.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 调用了外部类的下述方法</span></span><br><span class="line">            <span class="keyword">long</span>[] a = <span class="keyword">this</span>.a.a(obj);</span><br><span class="line">            <span class="comment">// 再进行消息发送</span></span><br><span class="line">            SendMsgParams sendMsgParams = <span class="keyword">new</span> SendMsgParams();</span><br><span class="line">            sendMsgParams.b = <span class="keyword">this</span>.a.dL;</span><br><span class="line">            sendMsgParams.a = <span class="keyword">this</span>.a.dJ;</span><br><span class="line">            sendMsgParams.c = <span class="keyword">this</span>.a.dN;</span><br><span class="line">            sendMsgParams.f26863c = <span class="keyword">this</span>.a.dL;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里调用了那2个openPasswdRedBagxxx方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">long</span>[] m5613a(String str) &#123;</span><br><span class="line">    <span class="keyword">long</span>[] jArr = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">// 非匿名模式才会继续尝试匹配口令红包，原来里里外外都做了判断</span></span><br><span class="line">    <span class="keyword">if</span> (!AnonymousChatHelper.a().a(<span class="keyword">this</span>.f25174a.a)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (TextUtils.isEmpty(<span class="keyword">this</span>.f25269d) || !str.equals(<span class="keyword">this</span>.f25278e)) &#123;</span><br><span class="line">            <span class="comment">// 使用密码打开</span></span><br><span class="line">            jArr = <span class="keyword">this</span>.f25190a.a(<span class="keyword">this</span>.f25174a, str);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 使用redPacketId直接打开</span></span><br><span class="line">            jArr = <span class="keyword">this</span>.f25190a.b(<span class="keyword">this</span>.f25174a, <span class="keyword">this</span>.f25269d);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 无意义的打log打点啥的，华丽丽地无视吧</span></span><br><span class="line">        <span class="keyword">if</span> (jArr != <span class="keyword">null</span> &amp;&amp; jArr[s] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.f25269d = QunUppUploadTask.QunUppAppId;</span><br><span class="line">            <span class="keyword">this</span>.f25278e = QunUppUploadTask.QunUppAppId;</span><br><span class="line">            <span class="keyword">this</span>.f25228a.sendEmptyMessage(dz);</span><br><span class="line">            <span class="keyword">if</span> (QLog.isColorLevel()) &#123;</span><br><span class="line">                QLog.d(PasswdRedBagManager.a, u, <span class="string">"passwdredbags result[0]="</span> + jArr[s] + <span class="string">",result[1]="</span> + jArr[t] + <span class="string">",send str="</span> + str);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (QLog.isColorLevel()) &#123;</span><br><span class="line">        QLog.d(PasswdRedBagManager.a, u, <span class="string">"current is in Anonymous, dont search passwdredbags"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> jArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>可见每次我们输入消息发送时，都发生了判断，会去查询是不是红包口令，如果是则直接发请求拿红包然后继续，否则直接当做普通消息继续发送。所以如果想要做自动抢红包的话，其实只要直接在收到消息时，调用<code>PasswdRedBagManager</code>的open方法即可，连模拟UI、生成请求、发送消息都不用了，我们再也不用昧着良心说口令了。顺便我们还看到了手机QQ确实喜欢用Activity，这里的红包弹框也是一个单独的Activity，而且请求是发送到手Q红包那边去的，看来还分业务线。</p>
<p>到此为止我们的目的告一段落，其实继续下去，还可以尝试dump当前Activity，用Activity名字去查找，或者用hierarchy view看看view id试试。</p>
<h1 id="总结和下期预告">总结和下期预告</h1><p>经过上文的折腾，我们成功反编译了手机QQ，并追溯到手机QQ红包的数据结构和判断流程。期间经历过数次无用功，但逆向工程正是这么一回事，尤其是静态分析，如果不及时找其他的路，而一路钻牛角尖从一个线索一路去看，很可能会越陷越深，本文的跟踪流程正是不断在坑还小的时候钻出来，然后去找其他的路径，最后才快速地找到了想看的东西。</p>
<p>至于下一期，可能是smali，可能是怎么修改Apktool，也可能是jadx的源码分析，看心情吧，哈哈。</p>
<hr>
<p>参考资料：<br><a href="http://www.mak-blog.com/tencent-shell-crack.html" target="_blank" rel="external">http://www.mak-blog.com/tencent-shell-crack.html</a><br><a href="http://www.kanxue.com/bbs/showthread.php?p=1390763&amp;langid=3" target="_blank" rel="external">http://www.kanxue.com/bbs/showthread.php?p=1390763&amp;langid=3</a></p>
<p>原文：<a href="http://blog.zhaiyifan.cn/2016/02/09/android-reverse-1/">http://blog.zhaiyifan.cn/2016/02/09/android-reverse-1/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本系列文章是《Android软件安全与逆向分析》的实践笔记（一些工具的版本和用法已经不同了），同时笔者希望系统性地记录一下逆向方面的文字和想法。犹记得在大学的时候，曾经学过一段时间的逆向工程，现在只记得那时候用OD跳来跳去看汇编代码，找到破解处时兴奋的感觉了。</p>
<b]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Reverse Engineering" scheme="http://blog.zhaiyifan.cn/tags/Reverse-Engineering/"/>
    
      <category term="Android Reverse Engineering" scheme="http://blog.zhaiyifan.cn/categories/Android-Reverse-Engineering/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android安全学习(1) - Android的安全设计]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/02/08/android-security-1/"/>
    <id>http://blog.zhaiyifan.cn/2016/02/08/android-security-1/</id>
    <published>2016-02-08T14:21:23.000Z</published>
    <updated>2016-02-16T15:13:09.000Z</updated>
    <content type="html"><![CDATA[<p>WORKING</p>
<h1 id="前言">前言</h1><p>本系列将会</p>
<h1 id="了解Android架构">了解Android架构</h1><p>Android系统经常会被理解为”运行在Linux上的Java”，但这种说法并不能体现出Android平台的复杂性。为了对</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>WORKING</p>
<h1 id="前言">前言</h1><p>本系列将会</p>
<h1 id="了解Android架构">了解Android架构</h1><p>Android系统经常会被理解为”运行在Linux上的Java”，但这种说法并不能体现出Android平台]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Security" scheme="http://blog.zhaiyifan.cn/tags/Security/"/>
    
      <category term="Android Security" scheme="http://blog.zhaiyifan.cn/categories/Android-Security/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发学前端之Vue.js(1) Hello World]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/02/06/learn-vue-js-1/"/>
    <id>http://blog.zhaiyifan.cn/2016/02/06/learn-vue-js-1/</id>
    <published>2016-02-05T16:06:50.000Z</published>
    <updated>2016-04-22T02:56:21.000Z</updated>
    <content type="html"><![CDATA[<p>大家好，我是doge。噢不，我是markzhai。</p>
<p>其实一直对前端很好奇，在学校念书的时候，曾在各种项目里用过诸如PHP/RoR/Spring等Web框架搭过大小网站，但一方面很烦写css，另一方面js也就是写写很简单的东西（比如ajax和jquery刷新刷新东西），更多的还是在写业务逻辑，所以这两年看着推陈出新的前端技术和酷炫的效果，有一种自己从没学过的感觉。</p>
<p>在React Native出现后，更加让我觉得有必要再系统性学习一下js的新技术。而我的良师益友 - 大头鬼则屡次安利我Vue.js(发音 /vjuː/，类似 view)，同时阿里内部在推的weex也是基于Vue.js做的一套跨平台方案。于是决定，不管以后能不能用上weex，先学习一下Vue.js吧。</p>
<p>本系列的源码都在：<a href="https://github.com/markzhai/HelloVue" target="_blank" rel="external">HelloVue</a>，虽然其实大部分是官网上的例子，哈哈，不要鄙视我。</p>
<p>本系列的受众是对移动开发和基本的HTML知识有一定了解的童鞋。</p>
<h1 id="例子">例子</h1><p>简单来说，html描述页面信息，css是style，而JavaScript则操作页面上的element。当然，因为我们要学的是Vue.js，所以不会接触到css。</p>
<p>先看<code>hello-world.html</code>的html:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">input</span> <span class="attribute">v-model</span>=<span class="value">"newTodo"</span> <span class="attribute">v-on:keyup.enter</span>=<span class="value">"addTodo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">li</span> <span class="attribute">v-for</span>=<span class="value">"todo in todos"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">span</span>&gt;</span>&#123;&#123; todo.text &#125;&#125;<span class="tag">&lt;/<span class="title">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="title">button</span> <span class="attribute">v-on:click</span>=<span class="value">"removeTodo($index)"</span>&gt;</span>X<span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>除了熟悉的各个html标签外，我们看到了<code></code>, <code>v-model</code>, <code>v-on:keyup.enter</code>等东西，这些便是Vue.js的了。<br>顾名思义猜测一下，<code>v-model</code>应该是data-binding， <code>v-on:keyup.enter</code>应该是键盘按下回车键时触发的函数，<code>v-for</code>估计是遍历，<code></code>则是注入model的字符串，<code>v-on:click</code>嘛肯定是点击事件的函数啦。</p>
<p>然后我们来看看JavaScript部分：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="xml"><span class="comment">&lt;!-- 嗯...作用域？就是html里的id --&gt;</span></span><br><span class="line">  el: '#app',</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- data，包含了一个object和一个list？ --&gt;</span></span><br><span class="line">  data: &#123;</span><br><span class="line">    newTodo: '',</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; text: 'Add some todos' &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 那些触发的函数就在这里啦 --&gt;</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="comment">&lt;!-- addToDo从newToDo拿到trim后的字符串然后加到todo，清空input框 --&gt;</span></span><br><span class="line">    addTodo: function () &#123;</span><br><span class="line">      var text = this.newTodo.trim()</span><br><span class="line">      if (text) &#123;</span><br><span class="line">        this.todos.push(&#123; text: text &#125;)</span><br><span class="line">        this.newTodo = ''</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">&lt;!-- 根据传入的index删除todo列表的对应项，为啥Java的for不能直接拿到当前index呢 --&gt;</span></span><br><span class="line">    removeTodo: function (index) &#123;</span><br><span class="line">      this.todos.splice(index, 1)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span></span><br></pre></td></tr></table></figure></p>
<h1 id="水水的结束前">水水的结束前</h1><p>是不是感受到js的简洁了…然后似乎也都能看懂！还有data-binding哦，还是双向的，想想我们输入的内容自动被设置到了newToDo，而更新后的todos则自动刷新了页面上的列表。而Android上如果想做到这个…我们得写多少东西。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>大家好，我是doge。噢不，我是markzhai。</p>
<p>其实一直对前端很好奇，在学校念书的时候，曾在各种项目里用过诸如PHP/RoR/Spring等Web框架搭过大小网站，但一方面很烦写css，另一方面js也就是写写很简单的东西（比如ajax和jquery刷新刷新]]>
    </summary>
    
      <category term="H5" scheme="http://blog.zhaiyifan.cn/tags/H5/"/>
    
      <category term="JavaScript" scheme="http://blog.zhaiyifan.cn/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="http://blog.zhaiyifan.cn/tags/Vue-js/"/>
    
      <category term="前端" scheme="http://blog.zhaiyifan.cn/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue.js" scheme="http://blog.zhaiyifan.cn/categories/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Deep Link是什么]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/02/04/deeplink-intro/"/>
    <id>http://blog.zhaiyifan.cn/2016/02/04/deeplink-intro/</id>
    <published>2016-02-04T09:34:57.000Z</published>
    <updated>2016-02-08T06:29:09.000Z</updated>
    <content type="html"><![CDATA[<p>今天在看Google关于Android Studio 2.0的视频的时候，提到了一个feature：支持Deep Link提示。笔者在去年上半年时候略微接触了一下，之后8月又看到全家桶出了一个山寨版叫AppLink。但是似乎在国内不太看到有这方面的介绍，在微博搜了一下，也没有正式介绍Deep Link的文章，所以产生了写本文的念头。</p>
<h1 id="Deep_Link是什么">Deep Link是什么</h1><p>Deep Link，又叫deep linking，中文翻译作深层链接。全家桶搜索的话你会发现第一个结果是AppLink。呵呵。</p>
<p>说回正题。</p>
<p>简单地从用户体验来讲，Deep Link，就是可以让你在手机的浏览器/Google Search上点击搜索的结果，便能直接跳转到已安装的应用中的某一个页面的技术。如果你想体验的话，可以在Android 4.1以上设备安装IMDB，然后在Google上搜索一部IMDB的影片，你就会发现点击后直接跳转到了App里的该电影介绍页面。</p>
<p>当然在这简简单单的操作背后，却隐藏着很多工作。</p>
<p>先让我们看看现在移动端的搜索体验问题：</p>
<h2 id="搜索">搜索</h2><p>就因为我司没有做Web版的页面，所以搜索引擎就没法找到我们提供的内容。</p>
<p>搜索结果是不是可以做得更好呢。对于爬虫，在我们的印象中都是去爬网站的数据。但是现在作为一个巨大内容载体的移动平台却被忽略了，”似乎”只能自己提供一个H5版本去让搜索引擎爬数据索引？就像把自己的网站加入robots协议一样，app是不是也能直接这么做呢？</p>
<h2 id="排名">排名</h2><p>我的App这么火爆，为什么搜索出来的结果都是别人的引用？！</p>
<p>本科在学校时候做过<a href="https://zh.wikipedia.org/zh-sg/PageRank" target="_blank" rel="external">PageRank</a>的实践，简单来说就是一个带权的树形有向图，用通俗的话来讲，大V关注了你，可以让你的价值提升。而在App的世界里，我们也经常会体验到在应用之间跳转的体验（尽管有些应用时灵时不灵的），这种跳转难道不也能拿来作为PageRank的有向边吗？</p>
<p>做个例子来说（绝不是广告）：手Q、QQ空间、QQ音乐都在应用里的某页面引用了腾讯新闻的某一条新闻的页面，而手Q、QQ空间、QQ音乐这三个应用的该页面本身在算法里排名就很靠前，那么我们就认为腾讯新闻的该页面是有价值的，在相同结果的页面中应该排在更前面。</p>
<p>搜索引擎应该对移动端的app也支持排名和链接关系解析。</p>
<h2 id="移动化">移动化</h2><p>每次在百度搜好吃的，搜到点评的结果后，怎么就不能直接跳到app里呢。</p>
<p>我们知道，现在从全家桶、Google搜索关于我们自己app的内容，往往只能搜到一些相关介绍和下载的链接，然后我们就中断了。而在Web世界，搜索后我们可以直接打开网页查看内容，相比起来体验实在是差了太多。难道我们就不能直接点击跳到手机上已经安装的app上吗？或者干脆直接跳到某个页面？</p>
<p>其实这种体验也是一种个性化搜索：个性化这个词比较宽泛，早期来说，搜索引擎会根据IP所在地区的不同返回有差别的结果。后来在引入账号系统后，会让用户可以设置语言和地域，恩…还有safe search，你懂的，会让我们看不到一些日文的内容。<br><img src="http://blog.zhaiyifan.cn/images/deeplink-2.png" alt="deeplink-2"><br><img src="http://blog.zhaiyifan.cn/images/deeplink-3.png" alt="deeplink-3"></p>
<p>而对移动端来说，个性化则是移动化，不同于返回网页，搜索引擎会返回支持Deep Link的应用内部页面的链接，比如我们找一部电影，可以直接跳到IMDB应用里这部电影的详情页面，体验是不是比看网页好多了呢（明明我安装了应用，为什么要让我看H5呢）。</p>
<h2 id="After_Deep_Linked">After Deep Linked</h2><p>而Deep Link则会解决以上的问题，搜索引擎可以直接用爬虫检索App的内容，对App也列入PageRank排名，安装了App的设备点击后，则可以直接跳到应用内的对应页面！！Cool！</p>
<p>既然这么酷炫，那我们要怎么才能让自家的应用支持Deep Link呢？</p>
<h1 id="使用">使用</h1><p>乍一看，Deep Link不就是scheme么？不错，或者我们该说，目前app的scheme，就是Deep Link的一种雏形（仅仅是跳转，且没有标准化的体验，见下文”首次点击自由”体验）。且有的app处理scheme并不是各个activity去注册自己的path，而会去通过一个中心activity去集成处理比如鉴权、解出各种参数，并美其名曰Navigator。</p>
<p>废话不多说了，看看正确的姿势吧。下文以Android接入为例，iOS可以查看<a href="https://developers.google.com/app-indexing/ios/app" target="_blank" rel="external">App Indexing on iOS9</a></p>
<h2 id="支持Deeplink">支持Deeplink</h2><p>参考内容：<br><a href="http://search-codelabs.appspot.com/codelabs/android-deep-linking#1" target="_blank" rel="external">启用指向你app的Deep Linking</a>。<br><a href="https://developers.google.com/app-indexing/app-only" target="_blank" rel="external">为纯app内容创建索引</a></p>
<p>以Google给的demo为例：<a href="https://github.com/google/search-samples.git" target="_blank" rel="external">search-samples</a></p>
<p>我们需要添加Intent Filter到manifest：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">activity</span> <span class="attribute">android:name</span>=<span class="value">"com.recipe_app.client.RecipeActivity"</span></span><br><span class="line">          <span class="attribute">android:label</span>=<span class="value">"@string/app_name"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">intent-filter</span> <span class="attribute">android:label</span>=<span class="value">"@string/app_name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">action</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.action.VIEW"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">category</span> <span class="attribute">android:name</span>=<span class="value">"android.intent.category.BROWSABLE"</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 接受以"http://recipe-app.com/recipe"开头的URI --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">data</span> <span class="attribute">android:scheme</span>=<span class="value">"http"</span></span><br><span class="line">              <span class="attribute">android:host</span>=<span class="value">"recipe-app.com"</span></span><br><span class="line">              <span class="attribute">android:pathPrefix</span>=<span class="value">"/recipe"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>然后为该intent filter添加处理代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_recipe);</span><br><span class="line">    onNewIntent(getIntent());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span><br><span class="line"> * 检验该intent是否是deep link的intent。如果是则从intent数据从接触recipe的URI并调用</span><br><span class="line"> * showRecipe()来展示菜谱。</span><br><span class="line"> **/</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onNewIntent</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">    String action = intent.getAction();</span><br><span class="line">    String data = intent.getDataString();</span><br><span class="line">    <span class="keyword">if</span> (Intent.ACTION_VIEW.equals(action) &amp;&amp; data != <span class="keyword">null</span>) &#123;</span><br><span class="line">        String recipeId = data.substring(data.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>);</span><br><span class="line">        Uri contentUri = RecipeContentProvider.CONTENT_URI.buildUpon()</span><br><span class="line">                .appendPath(recipeId).build();</span><br><span class="line">        showRecipe(contentUri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<pre><code>重要：通过deep link打开的<span class="keyword">app</span>必须提供给用户<span class="string">"首次点击自由(First Click Free)"</span>的体验。
这也就是说在第一次访问你的<span class="keyword">app</span>的时候，用户必须能直接进入相关页面，而不是被插播式广告比如
提示、登陆、闪屏等打断。你可以提醒用户在该次点击之后再进行动作。

即便该应用未曾被启动过或者用户未曾登陆，也必须提供这种体验。
</code></pre><p>常见问题：<a href="http://stackoverflow.com/a/25997627" target="_blank" rel="external">如何避免通过deep link打开多个应用实例</a></p>
<h2 id="测试该intent_filter">测试该intent filter</h2><p>上述demo运行后，在adb输入以下命令来trigger一个deep link:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell am start <span class="operator">-a</span> android.intent.action.VIEW \</span><br><span class="line"><span class="operator">-d</span> <span class="string">"http://recipe-app.com/recipe/pierogi-poutine"</span> com.recipe_app</span><br></pre></td></tr></table></figure></p>
<p>可以再替换以上url来打开其他菜谱<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://recipe-app.com/recipe/grilled-potato-salad</span><br><span class="line">http://recipe-app.com/recipe/haloumi-salad</span><br><span class="line">http://recipe-app.com/recipe/wedge-salad</span><br></pre></td></tr></table></figure></p>
<p>常见问题：</p>
<ul>
<li><a href="http://stackoverflow.com/a/24850504" target="_blank" rel="external">为什么提示”Error: Activity not started, unable to resolve Intent”?</a></li>
<li><a href="https://support.google.com/googleplay/android-developer/answer/6041489" target="_blank" rel="external">怎么让我的deep link在搜索结果中出现</a></li>
</ul>
<h2 id="获得来源">获得来源</h2><p>从Google的应用中点击了指向你的应用的链接，你的应用的那个页面将会收到特定的intent extra：</p>
<pre><code>应用引用站点 — android-<span class="string">app:</span><span class="comment">//{package_id}/{scheme}/{host_path}</span>
Web 引用站点 — <span class="string">https:</span><span class="comment">//{host_path}</span>
</code></pre><p>比如从Google应用点击到你的应用，则会有<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">android-<span class="string">app:</span><span class="comment">//com.google.android.googlequicksearchbox/https/www.google.com</span></span><br></pre></td></tr></table></figure></p>
<p>App能在页面启动时获得引用站点的信息，具体如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.google.android.gms.appindexing.AndroidAppUri;</span><br><span class="line"><span class="keyword">import</span> android.net.ParseException;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 返回启动该Activity的引用者. */</span></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Uri <span class="title">getReferrer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP_MR1) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.getReferrer();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> getReferrerCompatible();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 在低于SDK 22版本时使用该方法获得引用者 */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Uri <span class="title">getReferrerCompatible</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Intent intent = <span class="keyword">this</span>.getIntent();</span><br><span class="line">        Uri referrerUri = intent.getParcelableExtra(Intent.EXTRA_REFERRER);</span><br><span class="line">        <span class="keyword">if</span> (referrerUri != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> referrerUri;</span><br><span class="line">        &#125;</span><br><span class="line">        String referrer = intent.getStringExtra(<span class="string">"android.intent.extra.REFERRER_NAME"</span>);</span><br><span class="line">        <span class="keyword">if</span> (referrer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 尝试parse引用者URL</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> Uri.parse(referrer);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        Intent intent = <span class="keyword">this</span>.getIntent();</span><br><span class="line">        Uri referrerUri = <span class="keyword">this</span>.getReferrer();</span><br><span class="line">        <span class="keyword">if</span> (referrerUri != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (referrerUri.getScheme().equals(<span class="string">"http"</span>) || referrerUri.getScheme().equals(<span class="string">"https"</span>)) &#123;</span><br><span class="line">                <span class="comment">// App从浏览器打开</span></span><br><span class="line">                String host = referrerUri.getHost();</span><br><span class="line">                <span class="comment">// host会包含host路径 (比如www.google.com)</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">// 在这里增加分析的代码以记录从Web搜索点击进来的流量</span></span><br><span class="line"></span><br><span class="line">                ...</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (referrerUri.getScheme().equals(<span class="string">"android-app"</span>)) &#123;</span><br><span class="line">                <span class="comment">// App从另一个app被打开</span></span><br><span class="line">                AndroidAppUri appUri = AndroidAppUri.newAndroidAppUri(referrerUri);</span><br><span class="line">                String referrerPackage = appUri.getPackageName();</span><br><span class="line">                <span class="keyword">if</span> (<span class="string">"com.google.android.googlequicksearchbox"</span>.equals(referrerPackage)) &#123;</span><br><span class="line">                    <span class="comment">// App从Google app被打开</span></span><br><span class="line">                    String host = appUri.getDeepLinkUri().getHost();</span><br><span class="line">                    <span class="comment">// host会包含host路径 (比如www.google.com)</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 在这里增加分析的代码以记录从Google app点击进来的流量</span></span><br><span class="line"></span><br><span class="line">                    ...</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"com.google.appcrawler"</span>.equals(referrerPackage)) &#123;</span><br><span class="line">                    <span class="comment">// Google的爬虫来着，别把这个算作app使用了</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="商业价值">商业价值</h1><p>对搜索引擎提供上来说：广告，你懂的。百毒会不会把一些钓鱼app的页面放到最前面呢？呵呵。</p>
<p>对App来说则一方面可以解决目前移动应用的孤岛局面，另一方面可以通过搜索分析报告来了解通过搜索引擎导流的点击次数、查询次数，以及最受欢迎的页面。</p>
<p>各全家桶app企业也能就此机会更加紧密地抱团在一起，由大公司投资的各创业公司则能就此机会表忠心或者抱大腿。</p>
<h1 id="最后">最后</h1><p>上文大多是从Google的Deeplink展开的，如果你的应用主打本土市场，且考虑到目前Google仍然未回归，可以参考全家桶的Applink，大都是雷同的，只需要换一下前缀罢了（我猜是这样的 哈哈)。</p>
<p>目前App本身和搜索还是没有结合起来，国内只有豌豆荚和全家桶开始了这种体验的尝试，App的体验仍然是一个个信息孤岛，远不如在Web上搜到哪儿去哪儿，希望Deep Link的逐渐推广和应用，可以帮助app们达到和网页一样的体验。</p>
<p>以后App也能和网页一样，不需要自己提供搜索功能，让搜索引擎去做一切索引，直接在手机浏览器里打开app页面。甚至可以像现在使用site指定搜索目标一样，去指定要搜索的app。</p>
<p>试想我能直接社工搜索到女神的信息，然后直接跳到微博app里的feed详情页。另外，现在这种听一首歌要装3个app还要一个个去搜想听的到底在哪家的情况是不是也能解决呢？</p>
<hr>
<p>原文：<a href="http://blog.zhaiyifan.cn/2016/02/04/deeplink-intro/">http://blog.zhaiyifan.cn/2016/02/04/deeplink-intro/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天在看Google关于Android Studio 2.0的视频的时候，提到了一个feature：支持Deep Link提示。笔者在去年上半年时候略微接触了一下，之后8月又看到全家桶出了一个山寨版叫AppLink。但是似乎在国内不太看到有这方面的介绍，在微博搜了一下，也没]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Deep Link" scheme="http://blog.zhaiyifan.cn/tags/Deep-Link/"/>
    
      <category term="Android Introduction" scheme="http://blog.zhaiyifan.cn/categories/Android-Introduction/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Android开发模式 S2 EP1 - Snackbar, 合适的打断]]></title>
    <link href="http://blog.zhaiyifan.cn/2016/02/03/AndroidDevelopmentPatternsS2EP1/"/>
    <id>http://blog.zhaiyifan.cn/2016/02/03/AndroidDevelopmentPatternsS2EP1/</id>
    <published>2016-02-03T07:33:29.000Z</published>
    <updated>2016-02-03T15:38:26.000Z</updated>
    <content type="html"><![CDATA[<p>视频见：<a href="https://www.youtube.com/watch?v=puhfMX8jb9c" target="_blank" rel="external">https://www.youtube.com/watch?v=puhfMX8jb9c</a><br>视频很短，但是这个主题还是很有价值的，能帮助我们开发者理解应用设计的一些模式规范。</p>
<p>在我看来，作为一个前端开发者，我们不仅仅是去执行产品设计下发下来的东西，更多的是要去思考什么样的设计/交互是好的，什么样的需求是合理的，成为一个有独立思考的开发者。</p>
<p>本篇是该系列第二季的第一集，介绍了Snackbar的使用场景（相信现在大部分的开发者使用的还只是Toast和Alert吧）。</p>
<h2 id="正文">正文</h2><p>在你的应用中，交互信息的一个细节在于使用屏幕上的提示。但是，当那个信息很重要或者需要用户做决定的时候，你可能想要使用对话框(Alert)。</p>
<p>在过去，你有2种方式：</p>
<ol>
<li>对话框。可以展示信息给用户，并让他们对其进行操作。<br>但是对话框是中断性的（强制用户停下正在做的，来处理你的对话框）。想想，你享受被打断的滋味吗？你喜欢那种去确认你想做的操作的感觉吗？还是喜欢弹出对话框？<br><img src="/images/android-development-patterns-s2-ep1-1.png" alt="android-development-patterns-s2-ep1-1"></li>
</ol>
<p>这种交互很让人烦躁，不是么？<br>所以，对话框需要尽可能保守地去使用，这就让我们来到了第二种方式。</p>
<ol>
<li>Toast<br>Toast可以确认用户做的事情确实发生了。</li>
</ol>
<p>但如果这个操作是破坏性的呢，比如删除？<br>你的用户可能不想去那么做，而现在他们惊慌地在找怎么撤销，并对你在他删除那张美女图片前不进行再次确认而感到无语。卧槽，这是要干啥。</p>
<p>Snackbar就是为此而生的。</p>
<p>Snackbar和Toast类似，但它更强大，因为它是可交互的（比如提供你的用户正在找的撤销操作）。<br><img src="/images/android-development-patterns-s2-ep1-2.png" alt="android-development-patterns-s2-ep1-2"></p>
<p>Snackbar从屏幕底部浮起，用户可以将它划走，或者无视它（过一会自动消失，就像Toast那样）。Snackbar包含了一条短的信息，并能提供一个单一操作，比如撤销。</p>
<p>所以你现在有3种组件来帮助你使用最完美的方式来打断用户。</p>
<ul>
<li>对话框：当用户的反应对你的app流程来说很重要，在这种时候你需要破坏性的干扰。</li>
<li>Toast：给用户一个不会改变任何东西的小提示。</li>
<li>Snackbar：前两者之间的区间内，Snackbar是你最好的朋友。</li>
</ul>
<h2 id="小结">小结</h2><p>对话框（Alerts）对于和用户交互来说是<strong>很重</strong>的一个操作，但它确实帮助你了解什么是恰当的，从而你的用户不会讨厌你。幸运的是，现在有了一个简单的回答：使用<a href="http://developer.android.com/reference/android/support/design/widget/Snackbar.html" target="_blank" rel="external">Snackbar!</a>。</p>
<p>有一些微妙的场景，我们不知道如何在Toast和Snackbar之间抉择，那么<a href="http://www.google.com/design/spec/components/snackbars-toasts.html#" target="_blank" rel="external">Google的设计文档</a>包括了你可能需要的所有的详尽细节。如果你仍然希望做错，<a href="http://www.google.com/design/spec/components/dialogs.html#dialogs-behavior" target="_blank" rel="external">Dialog</a>当然也可以使用。但我们相信你能做得更好。所以成为一个更好的开发者，使用更好的选择：Snackbar。</p>
<p>最后牢骚一句，国内一些app退出的时候还要弹个Dialog问你是不是要退出的交互，真是够了/(ㄒoㄒ)/~~</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>视频见：<a href="https://www.youtube.com/watch?v=puhfMX8jb9c" target="_blank" rel="external">https://www.youtube.com/watch?v=puhfMX8jb9c</a><]]>
    </summary>
    
      <category term="Android" scheme="http://blog.zhaiyifan.cn/tags/Android/"/>
    
      <category term="Android Development Patterns" scheme="http://blog.zhaiyifan.cn/tags/Android-Development-Patterns/"/>
    
      <category term="翻译" scheme="http://blog.zhaiyifan.cn/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="Android Development Patterns" scheme="http://blog.zhaiyifan.cn/categories/Android-Development-Patterns/"/>
    
  </entry>
  
</feed>
